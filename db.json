{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-Chic/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/icons8-bell-curve-100.png","path":"icons8-bell-curve-100.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/mind.ico","path":"mind.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/font.styl","path":"css/font.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/media.styl","path":"css/media.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/normalize.styl","path":"css/normalize.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/variable.styl","path":"css/variable.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/image/avatar.jpeg","path":"image/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/image/cutcamera.png","path":"image/cutcamera.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"d8acbe5112449da57ef340a25b67b72e3bc8fe7e","modified":1691987585104},{"_id":"source/_posts/萌新的自瞄系统入门指南.md","hash":"505b1110c54a0368784ba44fce6ec22fa47fecba","modified":1691987585192},{"_id":"source/category/index.md","hash":"4c4401dfe57dbcd5a1aaf22001fc0d08f05e76a2","modified":1691987585192},{"_id":"source/tag/index.md","hash":"3291e1b4e53b71f5bfa1a3eeaabefa1c974fa791","modified":1691987585192},{"_id":"source/_posts/kalman-filter-的个人理解.md","hash":"68067e4dde44a9884c5f34ae0e35b7f38dcb29af","modified":1691987585108},{"_id":"source/_posts/开发者小白的git入门指南.md","hash":"fea6bb2992b285d8ecc11cb5baec58e40d529f04","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-03-21-21-37.png","hash":"7308c43fc81a1d51484187bd5501ce4ef02ef08b","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-03-21-25-06.png","hash":"c4a665fd43ee65fa184e1a3985ffdbe32188ced6","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-03-21-59-34.png","hash":"a86c2c713a33ecc92a76b4c12de9e8d0797968de","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-05-11-19-44.png","hash":"b760abd770fc35ea8792ab3d24d1273c7ef5f260","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-05-11-20-44.png","hash":"b1377045ed26c768a2b101da82a4df05b2bf2b00","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-00-13-32.png","hash":"856e181f653e94fe145a93c05d9750503cc2e384","modified":1691987585124},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-05-23-40-57.png","hash":"242e96a3984e155442eba7bf59ecd1864fbf0de9","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-00-47-55.png","hash":"d909f15ae8f83d294d17456a9c05db1d57d9f85e","modified":1691987585124},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-59-31.png","hash":"0cec49a9de4208b43d6d55627f2870a5ed85ab18","modified":1691987585132},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-55-23.png","hash":"8e53fc546542499be61b0efe9d26ae008dd590be","modified":1691987585132},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-40-37.png","hash":"cc4c418593b150ea12de70893395d28a0324eb54","modified":1691987585136},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-02-16.png","hash":"087e621f75eb9c22bb602c5ebeff80bb1fbaf0af","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-14-01.png","hash":"f280c9d3f696747d12bb19c6d965b7ad72cd9ec6","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-12-08-03.png","hash":"e8e74d78a1e4518af210aa0f6118197829b12f7b","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-14-33-31.png","hash":"fd889a118fe56f1f1f5ac8eb615af9ce389f0c75","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-14-36-39.png","hash":"14e2d53873032f955386948b69940f310aa13d38","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-15-41-59.png","hash":"8858500a44a4f2e35670bba36c12b52e6f44ae29","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-16-07-24.png","hash":"7aa75fc3586a1b7ca58b438f1bdfbeec75a6bb7b","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-16-50-38.png","hash":"3e2b511ccd57723055fe9555c4931e19298c89d0","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-17-02-20.png","hash":"fc11a81c00de0bb7e5e33d3b43ca03a50b125b8d","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-15-46-24.png","hash":"96facfca08d455871223a490d6303c882c0b21d9","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-25-27.png","hash":"f4df43d5e9daa7f93e8eea5e72dae1cf652afc64","modified":1691987585148},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-19-23.png","hash":"878d17ab3cb5103f16307f28986d553585106d14","modified":1691987585152},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-16-57-04.png","hash":"78c50d9a3bd801757b1379ed822d87e4a67081b7","modified":1691987585156},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-15-59-43.png","hash":"ae59811eb9ecdf17c1ad73d2c96e135d335548e9","modified":1691987585156},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-17-04-34.png","hash":"a607547288f32e38b06bfffa72c5ac213c2b7397","modified":1691987585156},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108161212.png","hash":"73bf51329a21e5f2cb839bf0cd62c1bdf20a5207","modified":1691987585108},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108161823.png","hash":"540d0d63960e8feeac577e31fcf1c5fd844bcae8","modified":1691987585108},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108170338.png","hash":"3f110d2eac4b9464fcea0d824e1d58bc045145d9","modified":1691987585108},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108170817.png","hash":"75d7dc7911a7f63168bc6a2d37bbc16cbecc209a","modified":1691987585108},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108173559.png","hash":"a6b05dc425758fe230cb4e36953260ed6a21f3e5","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108174304.png","hash":"c331b8f83303b1b15d89c415aea080e6852b85fa","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108175411.png","hash":"4d0e50a603a1b4aec5c258ccf951b58cedfd98c3","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108174540.png","hash":"4582a662ee65aec7286c125574fbd463f94d112c","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108175455.png","hash":"4d0e50a603a1b4aec5c258ccf951b58cedfd98c3","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108180141.png","hash":"03dc408d2f66a6be7f5c53e8482a50039736f31d","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108200143.png","hash":"db4e8c58e9ca61605d5f8c8301eb4c91c75de852","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109103344.png","hash":"2e837885a80114077629998091bfa65c68f644d9","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109104234.png","hash":"2e837885a80114077629998091bfa65c68f644d9","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108200147.png","hash":"db4e8c58e9ca61605d5f8c8301eb4c91c75de852","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109135140.png","hash":"01ae194cd43d6a90efd14a4cbe381e4095c1d792","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109134209.png","hash":"cb44162aff1ae68a380ba5a1fa27b164a73bff02","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109105000.png","hash":"eba0134d1c3857de479465f2170ae66dc78ddd84","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109142504.png","hash":"5bce61bd1a71325e92347999f2f8b37273c23abc","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109142637.png","hash":"04fbbe9ce9907d4992bcb939ee6a836d755d3209","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109140809.png","hash":"ce8ea28da46ba65ba0af0ad1f4a2e43591eae296","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109161402.png","hash":"16c637290ee3120db976d10d1ad1269f5ce422c5","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109161325.png","hash":"16c637290ee3120db976d10d1ad1269f5ce422c5","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109221302.png","hash":"874b22c281805cb69285c026f7cc559b0e473a5f","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109192900.png","hash":"3ad6abf05f96b1a4175e891ae38464fba300336a","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109205107.png","hash":"f88b47a295b6275eb53f5026d272698be485d65f","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109205237.png","hash":"c3cda16c55cbf59f0743383af6a44bd20226cd2e","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109222813.png","hash":"f257a3e1163cf831fe09ab59a165b5bc042bfefd","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109225734.png","hash":"1954f078699462364c78d0f180f1dbbd37468da3","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109232734.png","hash":"c6ab31e876bfad31c31352dbe61a8b4ec279fa17","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109225958.png","hash":"64f26c6b241551de2a73239c2cb8e741950e01cf","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109234457.png","hash":"71a8aaa09e3f3e0b123c3eda38bea0116134d3c1","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109232852.png","hash":"06394b231512d6469a84741f4573f716dd8fe395","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110000421.png","hash":"0f4327d68d4d86964bf76fc4fb01c839c0afbc34","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109234602.png","hash":"3889fd576a74ae043e3a9f4788d96ffb42bfaac8","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110000834.png","hash":"6876f94e1aff0fe6158c065946296debc03f65e4","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110011546.png","hash":"ca558c8f13293a388c0d8c994bf128847cc225f6","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110011600.png","hash":"f0ef53410ff4e638d9c69f8f070d273f173d52b0","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110003415.png","hash":"f0d582b5deea9d9bc3b8501c69245a74479767f5","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109234638.png","hash":"d997385beaa2722f71cbbbabe0e0894458d205c2","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110012117.png","hash":"c476e4c60aa17bf62d00f729e4248e5efceccb96","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110012215.png","hash":"e0db82078a71b8f78ff392966cfdbb6dba0c9968","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110012240.png","hash":"b182d24cc035459d4c179b6da1f97e88f63debb6","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110015019.png","hash":"ec3a7646335e57130b574a1563833fdb645e5c27","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110022858.png","hash":"72a65ae9f6804cddf75e28210865f44edf556890","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110023050.png","hash":"18e765c9cbbd339cfa5742c44ac30f873de430bb","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111110934.png","hash":"d28982efaac3333b530d49c8b75ad39963ae19b5","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111111436.png","hash":"3bf08087f7a90681bf6e3604166a67637b389dfe","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110024028.png","hash":"7decdbd07594781921962ec923057662af856635","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111113630.png","hash":"ccb65da7c94a68d15065a137109906c94feee3ae","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111111906.png","hash":"8e3476a394a2e27b74291cf2d114da7bdd318060","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111113730.png","hash":"6d0c1512a104f03b800d1c4faf7ed2b664d3eef0","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111130838.png","hash":"cb702ee9d7eda21ee43eb85a0bed177de6ca2e85","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111131147.png","hash":"69570071c753ae22d9519d7bdffe707c83025ba7","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111114554.png","hash":"0384f42fb1cb03f3bcbee1972b17f646840475e7","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111141445.png","hash":"3ada9abeb94ae6a941e43ff0b4a2fc7168492823","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111145727.png","hash":"f8db2596f6d787fb93f94f25ae03eddd981fe77d","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111152733.png","hash":"80c29b1f1f1e67b4f4d9142d7e57946fbda6a66b","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111153322.png","hash":"2151f5b028256d8e3bce98bec22d1862fe9d77f2","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111154510.png","hash":"b12d1a3173ed4e626bd74d592fe8dd20980f1d7b","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111154603.png","hash":"15465ec0b050063f2c67d3f1969db933508271a2","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111160717.png","hash":"1c87987be30858f027d9457db83889521c190595","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112103135.png","hash":"3993b4c4c16f8135a28afcc8891ee18170ed8670","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112110127.png","hash":"df400516b65b81571d7a6545a827ea4f96522e0f","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112104831.png","hash":"ba36209d8ba2108ec8e37b89adcf2d02c9612387","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112110039.png","hash":"5b530c1e577c71739eba9d3f82620e2ba1b8b883","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112110652.png","hash":"e5c91ac148e0b6850c46ba5cd6332feeb6014868","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112121821.png","hash":"f1a95593b77186130bef77f2696dd886c3639981","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112103823.png","hash":"326eda9207e875d81286830392634689075aec58","modified":1691987585120},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/ll.png","hash":"81bcf1a847bf4398d55d9f90cd4d3f9792c0ff3f","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-03-23-08-31.png","hash":"83537f72a077b91853169c0f1869a57cbff355d0","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-05-10-58-59.png","hash":"14c2568b0e3d146a4b17549801104ceb1d7f3e99","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-00-07-57.png","hash":"83b040db6773de63f86034e34826a366067d899e","modified":1691987585124},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-00-45-29.png","hash":"930ed5b78988bce87a57e4ba3090d3d03f681fa3","modified":1691987585124},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-30-10.png","hash":"f3628b2d8d4e342106146e310739f599f9c783f9","modified":1691987585132},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-33-29.png","hash":"4f8436e0fdb5e7b31971db2b336adc7f6c1f9aa9","modified":1691987585132},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-01-18.png","hash":"21242836614f38d009a7883603e1a8e025f420fa","modified":1691987585132},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-05-42.png","hash":"64de6ebde31a27da3c8e9c432f6bdee130a7b6c6","modified":1691987585136},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-03-19.png","hash":"d1ae05728699156c66a276192ef208d89b0ae210","modified":1691987585136},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-42-44.png","hash":"713db3e2bcfa953e43665d2b63eeac792a9cf552","modified":1691987585136},{"_id":"themes/hexo-theme-Chic/ChangeLogs.md","hash":"0244985e7e4797e3d0a0e173dce4e341f6aa5dd0","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/README-CN.md","hash":"af0765f26b72d49f1b29afe1a9d0c4a492912aaa","modified":1691987585192},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-44-51.png","hash":"2cfc6b8db35181cdd061f58588978bf19698d5f5","modified":1691987585140},{"_id":"themes/hexo-theme-Chic/_config.yml","hash":"b88d3928ce697a30487c0579b47d4a8e1964764c","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/package-lock.json","hash":"9e16bc907bfef5c6f0daeee6a3bd882f9cf93857","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/package.json","hash":"a2724a7037c3b109d9da3651787d5208524a21bb","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/README.md","hash":"e0bd27664e1d0b4ed1c8101d2bf69886c66c31d9","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/category.ejs","hash":"cae7483c92ff639f74f8efe67959f37c97350800","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/layout/layout.ejs","hash":"8565bbea5e904e75e8d1ff5186b3a53650a7fa70","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/layout/mathjax.ejs","hash":"c8c7eb5eb5ef422dac62809ce392cb71dfeecb9d","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/layout/page.ejs","hash":"3179c527694a789760742e1923c7ac5f94b4997c","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/scripts/imageTag.js","hash":"4b69804c1e4bf638eda7022499c440ce24e28587","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/layout/tag.ejs","hash":"d85ca78392be138b1589499cba95186b20c3a902","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/icons8-bell-curve-100.png","hash":"5da9263e418e44e01e9e2453888c9768383d2c71","modified":1691987585236},{"_id":"themes/hexo-theme-Chic/layout/_page/archive.ejs","hash":"464549286c92ea0d6cb057c6936e0f1a5d1c1dd2","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/source/mind.ico","hash":"b6349d2f37d825a909bdc4843cdbcab6e0aeb2d1","modified":1691987585236},{"_id":"themes/hexo-theme-Chic/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/_page/category.ejs","hash":"e8464e11d08a711fe815ea1cd101aa41d7310ebf","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/_page/profile.ejs","hash":"f49991a55cc08a1d90d8d6ae8d15a692163272e1","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/_page/post.ejs","hash":"6eb9cd3ee904e99ff78509298ae31a29fdbf49cf","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/_page/tag.ejs","hash":"0c20ff00532103f9a59639ca9956fc0bce4aabc2","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/_partial/footer.ejs","hash":"e1c332fab0d6cd713e36d46ccc14d0991067ba40","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/_partial/head.ejs","hash":"8c8a2d95e0858cf0be9bf60d0ddf26876e1d9d35","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/_partial/header.ejs","hash":"8f1e5272a4de96a3ed94de1db988b05b34515463","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/layout/_partial/toc.ejs","hash":"c47e8a5047ce0016f74b76028878d386af78bb7c","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/layout/_plugins/mathjax.ejs","hash":"53f088fe44d51c4d9fb61aeac4c23b3cfcc19762","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/source/css/base.styl","hash":"72aef06d738853f13f1697b091002d6d776bd56d","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/layout.styl","hash":"4d9f83b5a3bac81e7857358744858fae708320de","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/font.styl","hash":"8c1da30e223c0a3d7ef452abc9f0e4cc71dbc140","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/style.styl","hash":"a13f2c38070a89b06a2ede599f5ce5fd160e11c9","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/variable.styl","hash":"906faa95457eba70118a0705e13b8f43409e502f","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/media.styl","hash":"f96c0dbb9653667906a6dc271f637543ac5c7212","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/custom.styl","hash":"bf8dee1a094b104d87a53b43f6daa7ba43b67574","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/js/script.js","hash":"5dd8ce4fa55a7201d7e2ffe417b48c95943a906b","modified":1691987585236},{"_id":"themes/hexo-theme-Chic/source/image/cutcamera.png","hash":"ca788f98a16411af290b5cca0bc047e2ce5f3600","modified":1691987585236},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1691987585236},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/image/avatar.jpeg","hash":"5d46dc78e55390dfab0149798249bf655dd03fca","modified":1691987585236},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1691987585236},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/highlightjs.styl","hash":"65b5981dc3c57cedd1cb668c0e377230987e08d1","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_lib/looper.css","hash":"863144dc9af7c1e181670515bc85eaf768f4e287","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_lib/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/archive.styl","hash":"71ea842f068b29b4418dd09450db09d27dcf0947","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/category.styl","hash":"cead361269616b7a6ddec3090d9fa34c3c6ac722","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/profile.styl","hash":"057097e714284e72e97ab8a808a30df45555a342","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.json","hash":"eae94b803d34035008842855d0bead92d2035281","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_code.styl","hash":"06c3a3524ffd4b27e03e79489001997ea5d727d3","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_content.styl","hash":"5e3d63077549d8e2e5ff8c452e809760f5a99c17","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_header.styl","hash":"d37b032bc5edca92c84bf62070a28fa40939df55","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1691987585196},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_toc.styl","hash":"15e1ec7af93f41184f986aba21991a79923b0a0e","modified":1691987585196},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-06-59.png","hash":"9ad42bfcb3e161aad4c27c540d2d293c9e58d621","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-04-09.png","hash":"f24e852c82d8bf42954767ae4a8e9194fb49c2f0","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-05-07.png","hash":"04949a69b13b8edd592e74829a82d91e4cbf492e","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-46-27.png","hash":"d303e12767fcc212b02f5f87814bcfc2eb29c005","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-07-38.png","hash":"5c7bf5d129f4bed052a955629dbd2120f0e70cbe","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-13-22.png","hash":"c271a490b104e670510255c1c65431b64b50ee29","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-06-00.png","hash":"fbe97f8ce77f1f32c194c57748ca25ced13005fa","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-14-48.png","hash":"2721de967fbfa128cd92f109bc322170e0fa3dd5","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-15-27.png","hash":"2cd6cff76aa924d21b36cdce1b85d2d3ad5384aa","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-15-52.png","hash":"2cd6cff76aa924d21b36cdce1b85d2d3ad5384aa","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-12-52.png","hash":"f8a337c5a4319b88ef537aa3341bdd62753e9b63","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-12-22.png","hash":"bebf06d2d1ef8daf7ba5ebc91076e0d6aa7db8ae","modified":1691987585140},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-13-19-08.png","hash":"a27c9f0ad9b0417b4da765018b265b783ab78c98","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-16-59-59.png","hash":"2061f5135436240b2066f1923fab296aee46bad5","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-15-52.png","hash":"2099c58014708d7ff8f04765c93302da829fc055","modified":1691987585148},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-09-13.png","hash":"7ee3aed44e6e711a7c2957abc978f3ec30848025","modified":1691987585152},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-11-16.png","hash":"9479bfb0aa9128907ef9c45a25055c301170f8c2","modified":1691987585152},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-37-41.png","hash":"6ce570deda686b9503c94e6a2bd176a80c19d1d5","modified":1691987585156},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-15-58-21.png","hash":"ea0dba4bd9f497262fe7d342d1f616eef3173086","modified":1691987585156},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-16-02-58.png","hash":"bd1391233ded4c6b50945eca1a52e2ec21c137ae","modified":1691987585156},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-44-36.png","hash":"282fcd4604a9fbdb5cc4d45085df134c8535d4dd","modified":1691987585172},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-50-35.png","hash":"4ef82723090424e258a602423706a985455fea14","modified":1691987585172},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-42-43.png","hash":"47c147db21b92514255d36ba3c37aa7eb086f404","modified":1691987585172},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-22-52.png","hash":"2312a3d7c3285649a11330b99433b1bc2dab60dc","modified":1691987585176},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-37-56.png","hash":"3e50f94979e10448d7bc993785c7de5510d4c50a","modified":1691987585180},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-10-17-58.png","hash":"cae449907d62897cf5cc0058c37a415642e5c0a8","modified":1691987585184},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-10-20-48.png","hash":"31d02707a519a8cdf85fe0aa50b77b7cc93a0abe","modified":1691987585184},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108171541.png","hash":"89f60e718110e7dacf2a6ebbf76fa207bae6a4e0","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108172311.png","hash":"c3de5a6e406e32132b8bc10f975323ce4274bc25","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109222504.png","hash":"932d51ab9d559b70815122d20caff98d92557d77","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111115708.png","hash":"269f0395829ab3ae45fd1372cf06d244bf191d60","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111115921.png","hash":"b62576cb3fbd792fb893179e406dcb7b0ad393c1","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111141014.png","hash":"15bdf46f46bbb45af6c2545e11cf4f8bed0ce0e7","modified":1691987585116},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111143846.png","hash":"0440dce8cc0f0f86066007261d8581ff467bc5bc","modified":1691987585120},{"_id":"source/_posts/image.png","hash":"10ca02e6256777160872c98a672299afe4ea0358","modified":1691987585108},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-03-21-41-05.png","hash":"66d575375b30e3ecceb2f906d9ff3d0a747a0ddc","modified":1691987585120},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-51-32.png","hash":"d120f36643e5806546400345c78f005db2ae5e84","modified":1691987585132},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-09-57.png","hash":"230cb4ed7625bc7debf4feff7a36c0ee99a0a613","modified":1691987585136},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-13-45-32.png","hash":"49613062f9b9af014dc9c4c03c4aae4e1a294bfb","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-14-09-36.png","hash":"841b1821cd2bab5176ab28a01f7697c6887d9ce7","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-13-44-44.png","hash":"a49c3f40417e6645bcf1a05cdd6437a0dfc260dd","modified":1691987585144},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-14-02.png","hash":"604948ecf4381e66b3c0023f42ea62910f1e48df","modified":1691987585148},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-19-44.png","hash":"2e1329da61689b6d58d5a084b9b6ccad573fef8e","modified":1691987585148},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-12-24-29.png","hash":"c3c019e5b11ec36d17beba289725f4edee1e9907","modified":1691987585152},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-12-28-01.png","hash":"2919ddcc12e74996365b143ec1c61ea82b3f17a2","modified":1691987585152},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-21-32.png","hash":"10ca02e6256777160872c98a672299afe4ea0358","modified":1691987585156},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-48-57.png","hash":"4b3bfd97cda67a759bc6c52b30c3aa54f51e82d3","modified":1691987585160},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-01-18.png","hash":"6b29beed31e36084cec2de768c2f34ad904b913e","modified":1691987585164},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-37-26.png","hash":"f2df0e075121815f32b928e9021a7085620c498a","modified":1691987585168},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-32-43.png","hash":"f78f18ddf5c2ecdc88b428c0acc807f4e81a402c","modified":1691987585172},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-57-02.png","hash":"4c424e83c6988dddf3570b04c3f0c32823384c1e","modified":1691987585172},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-59-04.png","hash":"d7e56f48c6ac94fd661f355807140a7e7df690fe","modified":1691987585176},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-02-25.png","hash":"c4a018f7afc18d10f1bf0046beabe3a2a1e00cd1","modified":1691987585176},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-10-46.png","hash":"8eb6ce86eb65b1587843cc70c8fd9cde03264ef2","modified":1691987585176},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-16-19.png","hash":"dceb534775fa9c9f9db47cda8e938a1437a6cd7a","modified":1691987585176},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-36-07.png","hash":"7f92d720df2a4964e8cbba5937b206497f8e4f28","modified":1691987585180},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-12-53.png","hash":"362164e145efdf8cf83758f1cf04cb02cca6009e","modified":1691987585172},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-39-20.png","hash":"d3f00432c354f93f14e4e7885aebf2a283ea1b55","modified":1691987585180},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-41-08.png","hash":"1524302bdc950c66d1d083123042916f7e1c8af6","modified":1691987585180},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-42-41.png","hash":"ddb29731aa875390af1387005fa669240f143023","modified":1691987585180},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-42-51.png","hash":"ddb29731aa875390af1387005fa669240f143023","modified":1691987585180},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-22-00-00.png","hash":"5881aaae7e946e5fa931dad2bbe94ca722b090ee","modified":1691987585184},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-59-09.png","hash":"9dec0ae5803ac9a6698c74647f559beab18fef1c","modified":1691987585184},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-10-30-34.png","hash":"12621f7ff05e080e7d4dac4f5d29f2d3c4e3fee6","modified":1691987585184},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-12-56-01.png","hash":"abb10a953ed20f265448f9f9f4b3cedcf109913b","modified":1691987585192},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108155020.png","hash":"e6a273fa9458374071866d9e887a6bd56e4bfc86","modified":1691987585108},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108192936.png","hash":"b8c404b8e9c02f8238837570623e62732f521470","modified":1691987585112},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111143542.png","hash":"17f764ff049415edc7f31f64a2889873d2e15cfe","modified":1691987585116},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-08-04.png","hash":"087992a2d7b4a0da807954042d2d4f316778bdd4","modified":1691987585132},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-40-21.png","hash":"8f6fcf06ab174b103790d7b933494119a03654be","modified":1691987585132},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-45-07.png","hash":"647b1fac3ea94618573ced166229addbc0d77e79","modified":1691987585132},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-41-50.png","hash":"359cdddce1a0e66ba6ef889f483c45fb405938a1","modified":1691987585136},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-08-15.png","hash":"5b417feda72bb5a8c491d879a08d40739f7b02eb","modified":1691987585148},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-10-59.png","hash":"69b59f34724602e0a2275a2c28a6bea03016b8e7","modified":1691987585148},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-12-54-23.png","hash":"460e98b849c4d814fb58988f0ab1a1d5142d325c","modified":1691987585152},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-03-46.png","hash":"13115d663f02bd94ae010e98b749ebb1ec216d9d","modified":1691987585152},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-52-04.png","hash":"c18dc5844cf70dcdf785c3ca84cd77a7c698d18d","modified":1691987585160},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-49-29.png","hash":"b4d8713503cab433026947dd5f174cf63f104408","modified":1691987585160},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-53-19.png","hash":"704a4289fc49bdc6b536ce9d4556cb1601c741f0","modified":1691987585164},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-57-36.png","hash":"a28db447503e212c3dfbc0a2b1b612cb710c1904","modified":1691987585164},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-58-19.png","hash":"beb3e67a0070bf1df819396c34b310f3b29ff835","modified":1691987585164},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-02-11.png","hash":"ad7f9971b8103edc2f58f463c623968104ca6ba7","modified":1691987585164},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-04-58.png","hash":"244d87568775cfb77ee14ffdd2dab3d660f8e11e","modified":1691987585176},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-08-16.png","hash":"106ca3a55ef6b640891f5066f89374656483d646","modified":1691987585172},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-28-43.png","hash":"e809a3db1370d0971f22a4b5be6c41d4bec33824","modified":1691987585176},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108154007.png","hash":"d198c527c12ed32910401c87e3c9305df33acf23","modified":1691987585108},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108154022.png","hash":"d198c527c12ed32910401c87e3c9305df33acf23","modified":1691987585108},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109224829.png","hash":"9a47fbf7e1243af77392deb8a5943789e638a457","modified":1691987585112},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-19-53-22.png","hash":"4857c6229cc32678873236b7402725eb9f3b2462","modified":1691987585128},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-04-03.png","hash":"04441edd8387e89169262b08775a48686723ab78","modified":1691987585128},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-16-06.png","hash":"e25a379c1cd8493f0f87c2bc55788029510864c5","modified":1691987585136},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-12-41-05.png","hash":"a046042cdb74a2681ef83b1b1a3a4f9eae48eaa1","modified":1691987585152},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108154034.png","hash":"d07770a164b7b3fa82bea30ebe99e21622e9e858","modified":1691987585108},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108184550.png","hash":"598dba5629a390318080fe5e2308c250c87bfe1f","modified":1691987585112},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-14-24.png","hash":"7c675aec89c61be92399d2855349d0e3080600d4","modified":1691987585136},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-17-21.png","hash":"d159a9098c0112d1b483a7b234589328cd366620","modified":1691987585136},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-03-23.png","hash":"a348f576510d1869871d045a3acb859b5d3e92d4","modified":1691987585168},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-34-40.png","hash":"8fe913c3714cda17c507764ab9767fcff6925832","modified":1691987585180},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-19-57-04.png","hash":"8f0e347f5c0049e90603f3fc5202907781b99300","modified":1691987585128},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-39-37.png","hash":"5eb1687b197c62e78b34b3a9a818ff7cca854861","modified":1691987585168},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-41-06.png","hash":"683fc82d9de8a6a4d53e49e697c7659fe39ef0b8","modified":1691987585172},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-16-06-28.png","hash":"5206cc8241c9e244b303e81fd6d68ab4fd975dc2","modified":1691987585192},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-12-12-03.png","hash":"45e735777f9868d62c4c423050c32a4fa79cf3a0","modified":1691987585192},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-00-02-13.png","hash":"c5528555d0c5b3ec98ec5e55e0f85e42750273fa","modified":1691987585148},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-19-51-42.png","hash":"fdc1e6745c16d85bf71633d00ddbd451ed54fe8c","modified":1691987585124},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-19-53-00.png","hash":"fdc1e6745c16d85bf71633d00ddbd451ed54fe8c","modified":1691987585128},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-17-02-23.png","hash":"13e88ea2423565e9c48c189e17349bced1a15554","modified":1691987585156},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-41-10.png","hash":"19be75cc843bad513fb71529f6f7411bfbdada5d","modified":1691987585160},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-46-35.png","hash":"f675d074aafcfc6834e2fe80cf4634df0b38a5d9","modified":1691987585160},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1691987585236},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-12-11-23.png","hash":"869400bd99f3b7c39dd3a912b8f9db86685bdd83","modified":1691987585188},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-12-11-36.png","hash":"869400bd99f3b7c39dd3a912b8f9db86685bdd83","modified":1691987585192},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1691987585232},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1691987585216},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1691987585208},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1691987585232},{"_id":"public/category/index.html","hash":"e688e0cbaa460845f1ca6f7f46f2d2f052ee2c24","modified":1691987836607},{"_id":"public/tag/index.html","hash":"50037361e5a7fb89f8bf2ec69483e8b3427356b2","modified":1691987836607},{"_id":"public/posts/hello-world/index.html","hash":"653f11876a3191e863a91f7ca634c0dc17186941","modified":1691987836607},{"_id":"public/posts/萌新的自瞄系统入门指南/index.html","hash":"49985d02fe07030cc5eed509857a461c0e6d4b54","modified":1691987836607},{"_id":"public/archives/index.html","hash":"6cb51d2d2971e4efaf64ab88d22eb389379ff58f","modified":1691987836607},{"_id":"public/archives/2023/index.html","hash":"470a5be68af3ff49b0759893ae03550e4c716a81","modified":1691987836607},{"_id":"public/archives/2023/06/index.html","hash":"643f7992fb8acfb12deed44ba601353efc1a7af0","modified":1691987836607},{"_id":"public/archives/2023/07/index.html","hash":"b8b33868c20aaf2114a04ae8e912b30e2d87efda","modified":1691987836607},{"_id":"public/archives/2023/08/index.html","hash":"3d8cf2110a25fb639220fe5615daa47313b959e8","modified":1691987836607},{"_id":"public/categories/现代控制理论/index.html","hash":"1fa8566e0313eff7ac98af1eb81c5fd61e66e2ee","modified":1691987836607},{"_id":"public/categories/git与github/index.html","hash":"0f213a5cbfb1d95d522d0eb86edde6c21c3bae50","modified":1691987836607},{"_id":"public/index.html","hash":"5c2d5bc5f50c877ecdf342dd0bc424a0d83e2ec3","modified":1691987836607},{"_id":"public/tags/状态观测器/index.html","hash":"7c5aba1901878576c548876fe936c7f9484b7ba9","modified":1691987836607},{"_id":"public/tags/git与github/index.html","hash":"69044838b42a25eea305f48f93f42cab2cd264a0","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index.html","hash":"cfec9cbcc76d65870249c16634fc27157243b318","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index.html","hash":"ed39438d8bbfdcb5d3e70b9f94516f89203ae790","modified":1691987836607},{"_id":"public/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1691987836607},{"_id":"public/mind.ico","hash":"b6349d2f37d825a909bdc4843cdbcab6e0aeb2d1","modified":1691987836607},{"_id":"public/icons8-bell-curve-100.png","hash":"5da9263e418e44e01e9e2453888c9768383d2c71","modified":1691987836607},{"_id":"public/image/avatar.jpeg","hash":"5d46dc78e55390dfab0149798249bf655dd03fca","modified":1691987836607},{"_id":"public/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1691987836607},{"_id":"public/image/cutcamera.png","hash":"ca788f98a16411af290b5cca0bc047e2ce5f3600","modified":1691987836607},{"_id":"public/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1691987836607},{"_id":"public/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1691987836607},{"_id":"public/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1691987836607},{"_id":"public/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108161212.png","hash":"73bf51329a21e5f2cb839bf0cd62c1bdf20a5207","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108161823.png","hash":"540d0d63960e8feeac577e31fcf1c5fd844bcae8","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108170338.png","hash":"3f110d2eac4b9464fcea0d824e1d58bc045145d9","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108170817.png","hash":"75d7dc7911a7f63168bc6a2d37bbc16cbecc209a","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108173559.png","hash":"a6b05dc425758fe230cb4e36953260ed6a21f3e5","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108174304.png","hash":"c331b8f83303b1b15d89c415aea080e6852b85fa","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108174540.png","hash":"4582a662ee65aec7286c125574fbd463f94d112c","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108175411.png","hash":"4d0e50a603a1b4aec5c258ccf951b58cedfd98c3","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108175455.png","hash":"4d0e50a603a1b4aec5c258ccf951b58cedfd98c3","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108180141.png","hash":"03dc408d2f66a6be7f5c53e8482a50039736f31d","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108200143.png","hash":"db4e8c58e9ca61605d5f8c8301eb4c91c75de852","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108200147.png","hash":"db4e8c58e9ca61605d5f8c8301eb4c91c75de852","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109103344.png","hash":"2e837885a80114077629998091bfa65c68f644d9","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109104234.png","hash":"2e837885a80114077629998091bfa65c68f644d9","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109105000.png","hash":"eba0134d1c3857de479465f2170ae66dc78ddd84","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109134209.png","hash":"cb44162aff1ae68a380ba5a1fa27b164a73bff02","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109135140.png","hash":"01ae194cd43d6a90efd14a4cbe381e4095c1d792","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109140809.png","hash":"ce8ea28da46ba65ba0af0ad1f4a2e43591eae296","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109142504.png","hash":"5bce61bd1a71325e92347999f2f8b37273c23abc","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109142637.png","hash":"04fbbe9ce9907d4992bcb939ee6a836d755d3209","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109161325.png","hash":"16c637290ee3120db976d10d1ad1269f5ce422c5","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109161402.png","hash":"16c637290ee3120db976d10d1ad1269f5ce422c5","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109192900.png","hash":"3ad6abf05f96b1a4175e891ae38464fba300336a","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109205107.png","hash":"f88b47a295b6275eb53f5026d272698be485d65f","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109205237.png","hash":"c3cda16c55cbf59f0743383af6a44bd20226cd2e","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109221302.png","hash":"874b22c281805cb69285c026f7cc559b0e473a5f","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109222813.png","hash":"f257a3e1163cf831fe09ab59a165b5bc042bfefd","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109225734.png","hash":"1954f078699462364c78d0f180f1dbbd37468da3","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109225958.png","hash":"64f26c6b241551de2a73239c2cb8e741950e01cf","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109232734.png","hash":"c6ab31e876bfad31c31352dbe61a8b4ec279fa17","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109232852.png","hash":"06394b231512d6469a84741f4573f716dd8fe395","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109234457.png","hash":"71a8aaa09e3f3e0b123c3eda38bea0116134d3c1","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109234602.png","hash":"3889fd576a74ae043e3a9f4788d96ffb42bfaac8","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110000421.png","hash":"0f4327d68d4d86964bf76fc4fb01c839c0afbc34","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109234638.png","hash":"d997385beaa2722f71cbbbabe0e0894458d205c2","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110000834.png","hash":"6876f94e1aff0fe6158c065946296debc03f65e4","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110003415.png","hash":"f0d582b5deea9d9bc3b8501c69245a74479767f5","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110011546.png","hash":"ca558c8f13293a388c0d8c994bf128847cc225f6","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110011600.png","hash":"f0ef53410ff4e638d9c69f8f070d273f173d52b0","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110012117.png","hash":"c476e4c60aa17bf62d00f729e4248e5efceccb96","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110012215.png","hash":"e0db82078a71b8f78ff392966cfdbb6dba0c9968","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110012240.png","hash":"b182d24cc035459d4c179b6da1f97e88f63debb6","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110015019.png","hash":"ec3a7646335e57130b574a1563833fdb645e5c27","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110022858.png","hash":"72a65ae9f6804cddf75e28210865f44edf556890","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110023050.png","hash":"18e765c9cbbd339cfa5742c44ac30f873de430bb","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230110024028.png","hash":"7decdbd07594781921962ec923057662af856635","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111110934.png","hash":"d28982efaac3333b530d49c8b75ad39963ae19b5","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111111436.png","hash":"3bf08087f7a90681bf6e3604166a67637b389dfe","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111111906.png","hash":"8e3476a394a2e27b74291cf2d114da7bdd318060","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111113630.png","hash":"ccb65da7c94a68d15065a137109906c94feee3ae","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111113730.png","hash":"6d0c1512a104f03b800d1c4faf7ed2b664d3eef0","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111114554.png","hash":"0384f42fb1cb03f3bcbee1972b17f646840475e7","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111130838.png","hash":"cb702ee9d7eda21ee43eb85a0bed177de6ca2e85","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111131147.png","hash":"69570071c753ae22d9519d7bdffe707c83025ba7","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111141445.png","hash":"3ada9abeb94ae6a941e43ff0b4a2fc7168492823","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111145727.png","hash":"f8db2596f6d787fb93f94f25ae03eddd981fe77d","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111152733.png","hash":"80c29b1f1f1e67b4f4d9142d7e57946fbda6a66b","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111153322.png","hash":"2151f5b028256d8e3bce98bec22d1862fe9d77f2","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111154510.png","hash":"b12d1a3173ed4e626bd74d592fe8dd20980f1d7b","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111154603.png","hash":"15465ec0b050063f2c67d3f1969db933508271a2","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111160717.png","hash":"1c87987be30858f027d9457db83889521c190595","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230112103135.png","hash":"3993b4c4c16f8135a28afcc8891ee18170ed8670","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230112103823.png","hash":"326eda9207e875d81286830392634689075aec58","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230112104831.png","hash":"ba36209d8ba2108ec8e37b89adcf2d02c9612387","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230112110039.png","hash":"5b530c1e577c71739eba9d3f82620e2ba1b8b883","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230112110127.png","hash":"df400516b65b81571d7a6545a827ea4f96522e0f","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230112110652.png","hash":"e5c91ac148e0b6850c46ba5cd6332feeb6014868","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230112121821.png","hash":"f1a95593b77186130bef77f2696dd886c3639981","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/ll.png","hash":"81bcf1a847bf4398d55d9f90cd4d3f9792c0ff3f","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-03-21-21-37.png","hash":"7308c43fc81a1d51484187bd5501ce4ef02ef08b","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-03-21-25-06.png","hash":"c4a665fd43ee65fa184e1a3985ffdbe32188ced6","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-03-21-59-34.png","hash":"a86c2c713a33ecc92a76b4c12de9e8d0797968de","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-05-11-19-44.png","hash":"b760abd770fc35ea8792ab3d24d1273c7ef5f260","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-05-11-20-44.png","hash":"b1377045ed26c768a2b101da82a4df05b2bf2b00","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-05-23-40-57.png","hash":"242e96a3984e155442eba7bf59ecd1864fbf0de9","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-06-00-13-32.png","hash":"856e181f653e94fe145a93c05d9750503cc2e384","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-06-00-47-55.png","hash":"d909f15ae8f83d294d17456a9c05db1d57d9f85e","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-09-55-23.png","hash":"8e53fc546542499be61b0efe9d26ae008dd590be","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-09-59-31.png","hash":"0cec49a9de4208b43d6d55627f2870a5ed85ab18","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-40-37.png","hash":"cc4c418593b150ea12de70893395d28a0324eb54","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-02-16.png","hash":"087e621f75eb9c22bb602c5ebeff80bb1fbaf0af","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-14-01.png","hash":"f280c9d3f696747d12bb19c6d965b7ad72cd9ec6","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-12-08-03.png","hash":"e8e74d78a1e4518af210aa0f6118197829b12f7b","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-14-33-31.png","hash":"fd889a118fe56f1f1f5ac8eb615af9ce389f0c75","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-14-36-39.png","hash":"14e2d53873032f955386948b69940f310aa13d38","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-15-41-59.png","hash":"8858500a44a4f2e35670bba36c12b52e6f44ae29","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-15-46-24.png","hash":"96facfca08d455871223a490d6303c882c0b21d9","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-16-07-24.png","hash":"7aa75fc3586a1b7ca58b438f1bdfbeec75a6bb7b","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-16-50-38.png","hash":"3e2b511ccd57723055fe9555c4931e19298c89d0","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-17-02-20.png","hash":"fc11a81c00de0bb7e5e33d3b43ca03a50b125b8d","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-11-25-27.png","hash":"f4df43d5e9daa7f93e8eea5e72dae1cf652afc64","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-13-19-23.png","hash":"878d17ab3cb5103f16307f28986d553585106d14","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-15-59-43.png","hash":"ae59811eb9ecdf17c1ad73d2c96e135d335548e9","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-16-57-04.png","hash":"78c50d9a3bd801757b1379ed822d87e4a67081b7","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-17-04-34.png","hash":"a607547288f32e38b06bfffa72c5ac213c2b7397","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108171541.png","hash":"89f60e718110e7dacf2a6ebbf76fa207bae6a4e0","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108172311.png","hash":"c3de5a6e406e32132b8bc10f975323ce4274bc25","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109222504.png","hash":"932d51ab9d559b70815122d20caff98d92557d77","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111115708.png","hash":"269f0395829ab3ae45fd1372cf06d244bf191d60","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111115921.png","hash":"b62576cb3fbd792fb893179e406dcb7b0ad393c1","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111141014.png","hash":"15bdf46f46bbb45af6c2545e11cf4f8bed0ce0e7","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111143846.png","hash":"0440dce8cc0f0f86066007261d8581ff467bc5bc","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-03-23-08-31.png","hash":"83537f72a077b91853169c0f1869a57cbff355d0","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-05-10-58-59.png","hash":"14c2568b0e3d146a4b17549801104ceb1d7f3e99","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-06-00-07-57.png","hash":"83b040db6773de63f86034e34826a366067d899e","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-06-00-45-29.png","hash":"930ed5b78988bce87a57e4ba3090d3d03f681fa3","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-09-30-10.png","hash":"f3628b2d8d4e342106146e310739f599f9c783f9","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-09-33-29.png","hash":"4f8436e0fdb5e7b31971db2b336adc7f6c1f9aa9","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-01-18.png","hash":"21242836614f38d009a7883603e1a8e025f420fa","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-03-19.png","hash":"d1ae05728699156c66a276192ef208d89b0ae210","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-05-42.png","hash":"64de6ebde31a27da3c8e9c432f6bdee130a7b6c6","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-42-44.png","hash":"713db3e2bcfa953e43665d2b63eeac792a9cf552","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-44-51.png","hash":"2cfc6b8db35181cdd061f58588978bf19698d5f5","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-46-27.png","hash":"d303e12767fcc212b02f5f87814bcfc2eb29c005","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-04-09.png","hash":"f24e852c82d8bf42954767ae4a8e9194fb49c2f0","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-05-07.png","hash":"04949a69b13b8edd592e74829a82d91e4cbf492e","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-06-00.png","hash":"fbe97f8ce77f1f32c194c57748ca25ced13005fa","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-06-59.png","hash":"9ad42bfcb3e161aad4c27c540d2d293c9e58d621","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-07-38.png","hash":"5c7bf5d129f4bed052a955629dbd2120f0e70cbe","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-12-22.png","hash":"bebf06d2d1ef8daf7ba5ebc91076e0d6aa7db8ae","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-12-52.png","hash":"f8a337c5a4319b88ef537aa3341bdd62753e9b63","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-13-22.png","hash":"c271a490b104e670510255c1c65431b64b50ee29","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-14-48.png","hash":"2721de967fbfa128cd92f109bc322170e0fa3dd5","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-15-27.png","hash":"2cd6cff76aa924d21b36cdce1b85d2d3ad5384aa","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-11-15-52.png","hash":"2cd6cff76aa924d21b36cdce1b85d2d3ad5384aa","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-13-19-08.png","hash":"a27c9f0ad9b0417b4da765018b265b783ab78c98","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-16-59-59.png","hash":"2061f5135436240b2066f1923fab296aee46bad5","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-11-15-52.png","hash":"2099c58014708d7ff8f04765c93302da829fc055","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-13-09-13.png","hash":"7ee3aed44e6e711a7c2957abc978f3ec30848025","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-13-11-16.png","hash":"9479bfb0aa9128907ef9c45a25055c301170f8c2","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-13-37-41.png","hash":"6ce570deda686b9503c94e6a2bd176a80c19d1d5","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-15-58-21.png","hash":"ea0dba4bd9f497262fe7d342d1f616eef3173086","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-16-02-58.png","hash":"bd1391233ded4c6b50945eca1a52e2ec21c137ae","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-19-44-36.png","hash":"282fcd4604a9fbdb5cc4d45085df134c8535d4dd","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-19-50-35.png","hash":"4ef82723090424e258a602423706a985455fea14","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-20-42-43.png","hash":"47c147db21b92514255d36ba3c37aa7eb086f404","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-22-52.png","hash":"2312a3d7c3285649a11330b99433b1bc2dab60dc","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-37-56.png","hash":"3e50f94979e10448d7bc993785c7de5510d4c50a","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-09-10-17-58.png","hash":"cae449907d62897cf5cc0058c37a415642e5c0a8","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-09-10-20-48.png","hash":"31d02707a519a8cdf85fe0aa50b77b7cc93a0abe","modified":1691987836607},{"_id":"public/css/base.css","hash":"2fce73a3c2df8f93edeb5e34a53b7d83e5191d85","modified":1691987836607},{"_id":"public/css/font.css","hash":"87059edd1f2bfc4296f5599e73208893f2b06458","modified":1691987836607},{"_id":"public/css/layout.css","hash":"9b81d7e5146871ae2d1010f3a10089bbb43e81e3","modified":1691987836607},{"_id":"public/css/custom.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1691987836607},{"_id":"public/css/media.css","hash":"5023ee404900a47d61ca0591b2d4e9eace0fe88e","modified":1691987836607},{"_id":"public/css/normalize.css","hash":"2d4b663b6a4c68295b6ba240fa2dd9fb3863093c","modified":1691987836607},{"_id":"public/css/variable.css","hash":"cb4180b3bbad471e30cf52ebb40e998d58a30d7d","modified":1691987836607},{"_id":"public/js/script.js","hash":"5dd8ce4fa55a7201d7e2ffe417b48c95943a906b","modified":1691987836607},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1691987836607},{"_id":"public/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1691987836607},{"_id":"public/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1691987836607},{"_id":"public/fonts/iconfont/iconfont.json","hash":"3123aa840109e385d58a75d34e88a2d621e1ada8","modified":1691987836607},{"_id":"public/css/style.css","hash":"9681f8537e77efdd10f5bf08cc924fd0c9a9b58b","modified":1691987836607},{"_id":"public/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1691987836607},{"_id":"public/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1691987836607},{"_id":"public/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108155020.png","hash":"e6a273fa9458374071866d9e887a6bd56e4bfc86","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108192936.png","hash":"b8c404b8e9c02f8238837570623e62732f521470","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230111143542.png","hash":"17f764ff049415edc7f31f64a2889873d2e15cfe","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-03-21-41-05.png","hash":"66d575375b30e3ecceb2f906d9ff3d0a747a0ddc","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-09-51-32.png","hash":"d120f36643e5806546400345c78f005db2ae5e84","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-09-57.png","hash":"230cb4ed7625bc7debf4feff7a36c0ee99a0a613","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-13-44-44.png","hash":"a49c3f40417e6645bcf1a05cdd6437a0dfc260dd","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-13-45-32.png","hash":"49613062f9b9af014dc9c4c03c4aae4e1a294bfb","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-14-09-36.png","hash":"841b1821cd2bab5176ab28a01f7697c6887d9ce7","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-11-14-02.png","hash":"604948ecf4381e66b3c0023f42ea62910f1e48df","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-11-19-44.png","hash":"2e1329da61689b6d58d5a084b9b6ccad573fef8e","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-12-24-29.png","hash":"c3c019e5b11ec36d17beba289725f4edee1e9907","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-12-28-01.png","hash":"2919ddcc12e74996365b143ec1c61ea82b3f17a2","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-13-21-32.png","hash":"10ca02e6256777160872c98a672299afe4ea0358","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-18-48-57.png","hash":"4b3bfd97cda67a759bc6c52b30c3aa54f51e82d3","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-19-01-18.png","hash":"6b29beed31e36084cec2de768c2f34ad904b913e","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-19-37-26.png","hash":"f2df0e075121815f32b928e9021a7085620c498a","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-20-12-53.png","hash":"362164e145efdf8cf83758f1cf04cb02cca6009e","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-20-32-43.png","hash":"f78f18ddf5c2ecdc88b428c0acc807f4e81a402c","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-20-57-02.png","hash":"4c424e83c6988dddf3570b04c3f0c32823384c1e","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-20-59-04.png","hash":"d7e56f48c6ac94fd661f355807140a7e7df690fe","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-02-25.png","hash":"c4a018f7afc18d10f1bf0046beabe3a2a1e00cd1","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-10-46.png","hash":"8eb6ce86eb65b1587843cc70c8fd9cde03264ef2","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-16-19.png","hash":"dceb534775fa9c9f9db47cda8e938a1437a6cd7a","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-36-07.png","hash":"7f92d720df2a4964e8cbba5937b206497f8e4f28","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-39-20.png","hash":"d3f00432c354f93f14e4e7885aebf2a283ea1b55","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-41-08.png","hash":"1524302bdc950c66d1d083123042916f7e1c8af6","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-42-41.png","hash":"ddb29731aa875390af1387005fa669240f143023","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-42-51.png","hash":"ddb29731aa875390af1387005fa669240f143023","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-59-09.png","hash":"9dec0ae5803ac9a6698c74647f559beab18fef1c","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-22-00-00.png","hash":"5881aaae7e946e5fa931dad2bbe94ca722b090ee","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-09-10-30-34.png","hash":"12621f7ff05e080e7d4dac4f5d29f2d3c4e3fee6","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-09-12-56-01.png","hash":"abb10a953ed20f265448f9f9f4b3cedcf109913b","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108154007.png","hash":"d198c527c12ed32910401c87e3c9305df33acf23","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108154022.png","hash":"d198c527c12ed32910401c87e3c9305df33acf23","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230109224829.png","hash":"9a47fbf7e1243af77392deb8a5943789e638a457","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-09-08-04.png","hash":"087992a2d7b4a0da807954042d2d4f316778bdd4","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-09-40-21.png","hash":"8f6fcf06ab174b103790d7b933494119a03654be","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-09-45-07.png","hash":"647b1fac3ea94618573ced166229addbc0d77e79","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-41-50.png","hash":"359cdddce1a0e66ba6ef889f483c45fb405938a1","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-11-08-15.png","hash":"5b417feda72bb5a8c491d879a08d40739f7b02eb","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-11-10-59.png","hash":"69b59f34724602e0a2275a2c28a6bea03016b8e7","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-12-54-23.png","hash":"460e98b849c4d814fb58988f0ab1a1d5142d325c","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-13-03-46.png","hash":"13115d663f02bd94ae010e98b749ebb1ec216d9d","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-18-49-29.png","hash":"b4d8713503cab433026947dd5f174cf63f104408","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-18-52-04.png","hash":"c18dc5844cf70dcdf785c3ca84cd77a7c698d18d","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-18-53-19.png","hash":"704a4289fc49bdc6b536ce9d4556cb1601c741f0","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-18-57-36.png","hash":"a28db447503e212c3dfbc0a2b1b612cb710c1904","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-18-58-19.png","hash":"beb3e67a0070bf1df819396c34b310f3b29ff835","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-19-02-11.png","hash":"ad7f9971b8103edc2f58f463c623968104ca6ba7","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-20-08-16.png","hash":"106ca3a55ef6b640891f5066f89374656483d646","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-04-58.png","hash":"244d87568775cfb77ee14ffdd2dab3d660f8e11e","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-28-43.png","hash":"e809a3db1370d0971f22a4b5be6c41d4bec33824","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108154034.png","hash":"d07770a164b7b3fa82bea30ebe99e21622e9e858","modified":1691987836607},{"_id":"public/posts/kalman-filter-的个人理解/index/attachment/Pasted image 20230108184550.png","hash":"598dba5629a390318080fe5e2308c250c87bfe1f","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-06-19-53-22.png","hash":"4857c6229cc32678873236b7402725eb9f3b2462","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-09-04-03.png","hash":"04441edd8387e89169262b08775a48686723ab78","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-16-06.png","hash":"e25a379c1cd8493f0f87c2bc55788029510864c5","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-12-41-05.png","hash":"a046042cdb74a2681ef83b1b1a3a4f9eae48eaa1","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-14-24.png","hash":"7c675aec89c61be92399d2855349d0e3080600d4","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-07-10-17-21.png","hash":"d159a9098c0112d1b483a7b234589328cd366620","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-19-03-23.png","hash":"a348f576510d1869871d045a3acb859b5d3e92d4","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-21-34-40.png","hash":"8fe913c3714cda17c507764ab9767fcff6925832","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-06-19-57-04.png","hash":"8f0e347f5c0049e90603f3fc5202907781b99300","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-19-39-37.png","hash":"5eb1687b197c62e78b34b3a9a818ff7cca854861","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-19-41-06.png","hash":"683fc82d9de8a6a4d53e49e697c7659fe39ef0b8","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-09-12-12-03.png","hash":"45e735777f9868d62c4c423050c32a4fa79cf3a0","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-09-16-06-28.png","hash":"5206cc8241c9e244b303e81fd6d68ab4fd975dc2","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-00-02-13.png","hash":"c5528555d0c5b3ec98ec5e55e0f85e42750273fa","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-06-19-51-42.png","hash":"fdc1e6745c16d85bf71633d00ddbd451ed54fe8c","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-06-19-53-00.png","hash":"fdc1e6745c16d85bf71633d00ddbd451ed54fe8c","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-18-41-10.png","hash":"19be75cc843bad513fb71529f6f7411bfbdada5d","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-17-02-23.png","hash":"13e88ea2423565e9c48c189e17349bced1a15554","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-08-18-46-35.png","hash":"f675d074aafcfc6834e2fe80cf4634df0b38a5d9","modified":1691987836607},{"_id":"public/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-09-12-11-23.png","hash":"869400bd99f3b7c39dd3a912b8f9db86685bdd83","modified":1691987836607},{"_id":"public/posts/开发者小白的git入门指南/index/2023-07-09-12-11-36.png","hash":"869400bd99f3b7c39dd3a912b8f9db86685bdd83","modified":1691987836607},{"_id":"public/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1691987836607},{"_id":"public/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1691987836607},{"_id":"public/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1691987836607},{"_id":"public/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1691987836607}],"Category":[{"name":"现代控制理论","_id":"clladvehg000457i0f25ydo5c"},{"name":"git与github","_id":"clladvehj000a57i0e80n1acq"}],"Data":[],"Page":[{"title":"catagory","layout":"category","_content":"\n","source":"category/index.md","raw":"---\ntitle: catagory\nlayout: category\n---\n\n","date":"2023-08-14T04:33:05.192Z","updated":"2023-08-14T04:33:05.192Z","path":"category/index.html","comments":1,"_id":"clladvehb000057i0fd41871q","content":"\n","site":{"data":{}},"excerpt":"","more":"\n"},{"title":"Tag","layout":"tag","_content":"<!-- ---\ntitle: tag\ndate: 2023-06-28 20:40:08\n--- -->","source":"tag/index.md","raw":"---\ntitle: Tag\nlayout: tag\n---\n<!-- ---\ntitle: tag\ndate: 2023-06-28 20:40:08\n--- -->","date":"2023-08-14T04:33:05.192Z","updated":"2023-08-14T04:33:05.192Z","path":"tag/index.html","comments":1,"_id":"clladvehf000257i0gkgm6zjy","content":"<!-- ---\ntitle: tag\ndate: 2023-06-28 20:40:08\n--- -->\n","site":{"data":{}},"excerpt":"","more":"<!-- ---\ntitle: tag\ndate: 2023-06-28 20:40:08\n--- -->\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ chexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ chexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-08-14T04:33:05.104Z","updated":"2023-08-14T04:33:05.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clladvehd000157i09qah7htu","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\">Quick Start</h2>\n<h3 id=\"create-a-new-post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\">Quick Start</h2>\n<h3 id=\"create-a-new-post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"kalman filter 卡尔曼滤波的个人理解","date":"2023-06-28T05:32:50.000Z","mathjax":true,"_content":">**该文档归山东理工大学齐奇战队所有**\n>本文作者为原落尘，邮箱为<yuanluochen@foxmail.com>，笔者能力有限，如有问题，请您指出.\n\n## 什么是滤波\n\n**卡尔曼滤波**，看起来十分高大尚的一个算法，但是当我们把卡尔曼这个修饰语去掉就变成了**滤波**。这一刻就突然间有一种灵光一闪的感觉，这时我们突然发现，“哦，它是一种滤波啊，就这？”\n\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108154034.png)\n\n但是，之前的我作为一名小白，我甚至连滤波到底是什么我都不知道。我第一提出这个问题“什么是滤波，它有什么用”,我记得是我在阅读大疆robotMaster官方代码时提出了这个问题我记得当时的代码是这样的  \n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108155020.png)  \n当时的我就提出了这个疑问，“滤波到底有什么用，为什么要将设置的数值经过滤波处理一下，如果没有滤波处理它会变成什么样子”，后来的我理解了，我也悟了。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109225734.png)\n\n在真实世界中，当我们想通过一个传感器测量一个数据，但是传感器测量的数值总有一些误差，比如我们想通过一个可以测量距离的传感器测量当前位置与墙之间的距离![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112121821.png)恰巧我们有两个传感器，一个精度极高，价格极贵；一个精度还可以，但价格十分亲民，这时候，我们使用这两个传感器测量距离，我们将测量的结果绘制一张图纸。\n\n在最理想的状态下，我们希望图纸是如下状态，他是一个稳定的直线\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108161212.png)  \n\n但是在计算机世界总是有一点差强人意，它是这样一个状态，是由一个个小点点构成的  \n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108161823.png)  \n这是因为什么呢，因为在计算机的世界中，一切都是离散的，不是连续的，不管是计算机还是传感器它们计算数据都是在时钟周期的影响下驱动的，时钟每运行一次，程序就会运行一次，它并非想理想状态下是一个由一条线构成的连续的状态，而是由一个又一个小点构成的离散状态。\n\n但是想上图这样的图纸是真实的吗？结论是还不够真实，真实的状态比这还要难受，它更加的混乱。 如下面两张图所示\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108174540.png)\n我们看到这张图已经感觉十分混乱了，但是还有更混乱的，如下图  \n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108172311.png)  \n当我们看到者两张图纸，不知道你有没有一个疑问，为什么是混乱的。这个问题答案很简单，**我们的传感器不咋地**\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108174304.png)  \n原因就这么简单，没什么其他的原因，精度比较高的传感器还好，数据混乱度还可以接受，但是传感器精度不高，哎，不想说什么了，一言难尽。\n\n但是我们发现，不管数据再怎么混乱，它们都有一个共同的特点，数据点的分布都以一个统一的数值为中心。当我们看到了共同点，我们再看看不同点，相比于第一个，第二个明显更加混乱，我们用更加专业的语言来分析这个问题，这时我们引入**高斯分布**的概念，可能有一些人不理解高斯分布，那么那我们说一个更加通俗易懂的，**正态分布**，这个名词我们高中就学过，可能有些人听到这个词语有一点陌生，但是我把下面这一张图拿出来应该立刻就想起来了  \n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108173559.png)  \n当我看到这张图时，我脑中立刻回忆起高中的痛苦岁月，真难忘。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109225958.png)\n\n现在我们引入了高斯分布，或者说正态分布，这时我们在分析上面的两个混乱的图像，明显第二张图像比第一张方差更大。精度更高的传感器，方差小，精度低的，方差大，数据一言难尽。\n\n### 开始讲滤波器了\n\n我们如何解决数据分散，方差大的问题呢？这时我们就要用到滤波器了，哎，这么长时间了，终于开始讲什么是滤波器了。\n\n那么什么是滤波器呢？拿这几张图为例  \n![图一](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108175411.png)\n![图二](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108172311.png)  ![图三](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108161823.png)  \n简单来讲，**滤波器就是让图一图二逆天改命为图三的神器**，滤波器能将传感器得到的真实数据进行处理，让数据更加符合要求，更加平滑，这就相当于对数据进行淬体，化凡为仙，心动了吧。\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108180141.png)\n\n这就是滤波器，回到我之前的那个问题，大疆官方的代码为什么要对数据进行滤波处理，答案一目了然，为了让数据更加平稳，更加平滑，更加符合我们开发者的需求。而卡尔曼滤波作为滤波的佼佼者，它的能力更加强大，它能降低方差，融合传感器的数据，让数据更加集中，能让数据更加贴近真实。\n\n## State Observer 状态观测器\n\n### 卡尔曼滤波是一种状态观测器\n\n卡尔曼滤波器是可以实现最优估计的状态观测器。刚看到这句话可能有一点复杂。但是不要着急。我们先从状态观测器开始讲起，然后我们在开始讲解卡尔曼滤波\n\n### 什么是状态观测器\n\n在讲解相对复杂的卡尔曼滤波之前，我们先从初级关卡入手，理解一下什么是状态观测器。讲一个比较有趣的例子\n\n假如你喜欢一个女孩，但是你不知道对方到底对你是否有那方面想法，作为一名理工男，你渴望能够通过一种传感器来直接判断对方的想法，但是没有啊，这个时候你十分的苦恼  \n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108184550.png)  \n那光苦恼可不行，那这个问题该怎么解决呢？这时我们想到了我们突然间想到了状态观测器。“有办法了”，为确定对方是否喜欢你，这个**估计值**，你要通过对对方施加一些**激励**，或者说是与对方说几句话，通过观察对方的反映或者**响应**来判断对方的想法将反映与自己的预期进行对比，得出结论对方到底喜不喜欢你。![1](./kalman-filter-的个人理解/attachment/ll.png)\n\n没想到吧，这么符合逻辑。不愧是理工男，现在我们回顾一下上面那个例子，反思一下什么是状态观测器，状态观测器是什么，**状态观测器是一个可以通过测量一个间接值来估计需求值的一种神器。**\n\n### 状态观测器到底是怎么工作的\n\n现在我们开始正经的讲解一下状态观测器吧，还是以一个例子启头，作为一名理工男，不研究火箭对得起自己吗，现在我们开始研究一下火箭![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108192936.png)作为一名未来的火箭工程师，我们要研究控制火箭尾部火焰温度，学过一点控制相关的东西的同学都知道，如果想要控制一个量，我们就必须要测量这个量，但是火箭啊这个东西温度太高了，如果你用一个温度计，放到火焰里来测量火焰的温度，这显然是不现实，温度计必被烤化，为了解决这个问题我们该如何处理呢，这时我们想到了状态观测器，利用状态观测器来估计火焰温度。\n\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108200147.png)当我们看到这张图纸，（这是我自己画的，画的可能有一点抽象，但是我感觉可以接受）这是一个火箭尾部的简化图纸，外面为一个外壳，火焰从内部喷射而出，我们要测量火焰温度，实际就是测量上图的内层温度，但是内层温度无法直接测量，所以可以利用状态观测器通过测量外层温度，估计内层温度，但是这是怎么实现的呢？\n\n我们分析这个系统我们发现，火箭尾焰的温度，是受燃料控制，燃料作为尾焰这个系统输出的输入，而我们要估计的量尾焰温度被称为这个系统的状态量，如下图所示。  ![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109103344.png)\n\n那么如何估计尾焰温度这个数值呢？如果你是一名优秀的理工人，你可以对这个系统进行建模，构建其数学模型，我们将系统输入，即燃料作用于你构建的数学模型，然后数学模型输出的状态量就是你估计的尾焰温度![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109134209.png)\n\n现在问题来了这样就计算出来了尾焰温度，那么系统输出，即你要测量的外层温度有什么用吗？那根本没用啊，怎么可能，你真的觉得你是一个数学天才吗，你自己推导的数学模型真的是符合真实系统的吗？怎么可能，真实系统怎么可能那么美好，系统中存在许多外界因素干扰着你的系统，你构建的数学模型与真实系统还是有些许差异，所以我们该如何处理这个问题呢？这时候测量的外界温度的作用就出来了，我们可以通过使外界温度与估计的外界温度，数值相等，来使估计的尾焰温度与实际尾焰温度相近。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109135140.png)\n\n>先提一个概念，$x$为状态，我们在$x$头上加一个^，即$\\hat{x}$，我们称之其为估计状态\n\n即让$y = \\hat{y}$相等实现$x=\\hat{x}$，这样就实现了测量内部温度的目标，那么如何实现这个目标呢？如何让系统输出与估计的系统输出相同呢？方法很简单，利用反馈控制，通过反馈控制来实现误差的缩小![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109161402.png)\n当误差$e = error = y -\\hat{y}$数值趋近与零这时估计的状态量十分接近真实的状态值。\n\n### 状态观测器公式推导\n\n口说无凭，毫无依据不符合理工男的原则，我们要对上述结论进行公式推导。在推导公式前，我们先要讲一讲状态方程与观测方程。\n\n#### 浅讲状态方程和观测方程\n\n>什么是状态方程，什么是观测方程？这个问题我也很难解答，以下的讲解可能有大量的问题。如果有问题请提出\n\n现在我来浅说一下这两个方程，不废话上方程，先上一个连续系统的状态方程和观测方程\n\n> 我先说一下连续和离散的概念，浅说一下，连续系统可以理解为由一条一条线构成的![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109142504.png)\n> 而离散系统可以理解为由一个又一个点构成的![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109142637.png)计算机内都是离散系统，但是为了推导公式方便，我们在连续系统内推导公式\n\n状态方程  \n$$\nx' = A x + B  u\n$$\n观测方程\n$$\ny = C x\n$$\n但我们刚看到公式可能不知道如何下手，请听我慢慢道来，不用考虑太多你可以把状态方程当成描述系统状态随时间的变化与当前状态和系统输入之间的线性关系，观测方程就是描述系统输出与当前状态之间的关系的数学表达式。那么如何构建一个状态方程和观测方程呢？说实话，在下能力有限，很难将其讲清楚，所以请见谅![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109192900.png)\n但是这不影响我们验证状态观测器的任务。\n\n#### 正式开始推导公式的正确性了\n\n现在假设我们可以对系统构建其状态方程以及其观测方程了，现在我们的图就变成了这样![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109205237.png)\n这样是不是更符合理工男的形象了，都是数学公式，NB吧。\n\n回到我们最初的目的，我们要验证随着$e = y - \\hat{y}$趋近于零，$\\hat{x}$ 趋近于$x$。那么我们该如何验证该结论呢？  \n首先，如果想验证$\\hat{x}$ 趋近于x，我们就可以验证$e_{obs} = x - \\hat{x}$趋近于零，这样我们可以通过验证$e_{obs} = x - \\hat{x}$趋近于零来进而验证$\\hat{x}$趋近于$x$。这时我们拿出真实系统的方程与我们自己构建的系统方程  \n真实系统的方程\n$$ x' = Ax + Bu$$\n$$y = Cx $$\n自己构建的数学模型\n$$\\hat{x}' = A\\hat{x} + Bu + K(y - \\hat{y})$$\n$$\\hat{y} = C \\hat{x}$$\n我们要求解$x - \\hat{x}$的数据，我们将真实系统方程与自己构建的数学模型对应相减\n\n$$\ne_{obs} = x - \\hat{x}\n$$\n$$x'- \\hat{x}' = A(x - \\hat{x}) + Bu - Bu - K(y - \\hat{y})$$\n$$\ny - \\hat{y} = C(x - \\hat{x})\n$$\n将方程化简\n$$\ne_{obs}' = Ae_{obs} - KCe_{obs}\n$$\n再化简一下\n$$\ne_{obs}' = (A-KC)e_{obs}\n$$\n再对方程求积分求出$e_{obs}$的数值\n$$\ne_{obs} = e^{（A - KC）t}e_{obs}(0)\n$$\n这时我们就解出了$e_{obs}$，即随时间变化估价值$\\hat{x}$与真实值之间的关系$\\hat{x}$。我们发现$e_{obs}$与时间的关系是一个指数关系，这就意味着，如果$A -KC < 0$,$e_{obs}$与时间的关系如下图。\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109221302.png)\n它会随时间不断趋近于零。\n\n#### 增益K到底有个什么用\n\n但是当我们看到这个结论。我有一个好奇就产生了，**反馈真的有用吗？** 当我第一次推导出上述公式时我就产生了这个好奇，如果没有K项，没有反馈，如下图![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109222504.png)更改一下公式。\n$$\ne_{obs} = e^{At} e_{obs}(0)\n$$\n此时没有反馈控制，如如果$A < 0$依旧图像为![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109222813.png)那现在问题来了，我们反馈控制的意义在那里。我之前可能没有提过，系统状态方程，观测方程的系数$A$ $B$ $C$并非为真实系统的数值，而是我们人为规定的数值，它自身是存在误差的，公式$e_{obs} = e^{(A -KC)t}e_{obs}(0)$的A的数值并非真实数值，之前的推导，是根据状态方程观测方程完全正确的情况考虑的，我们无法通过一个非真实的系数$A$来控制$e_{obs}$的衰减率，所以我们要外加一个增益来控制$e_{obs}$衰减率，实现估计值与真实值趋近。\n\n但是现在问题又来了，我们如何调整增益$K$的数值呢？这时候卡尔曼滤波器就登场了。卡尔曼滤波可以自动调整增益K的数值，实现最优估计。\n\n## 卡尔曼滤波，可以实现最优估计的状态观测器\n\n现在咱们终于开始讲解卡尔曼滤波了。朋友们恭喜你，终于到了这一步。你离解放不远了![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109234638.png)\n\n之前我们讲解了状态观测器。我们提到了如何调增益K，我们回想起我们调参的经历。哎，不堪回首。但是卡尔曼滤波帮助我们在一定程度上解决了这个问题。它能帮助我们调整增益K，已实现最优估计。但是如何实现呢？请听我细细道来。\n\n我们还是从一个例子开始，假设某一个地方举行了一场汽车自动驾驶的比赛。这场比赛的规则是这样的：你可以通过各种传感器测量汽车当前的状态，如利用GPS测量当前位置，利用IMC测量加速度，利用汽车自带的里程计测量汽车的相对移动位置。通过这些传感器来让自动驾驶的汽车在不同地形的路面行使1km，最后我们测量汽车自动行使的相对距离。计算每支队伍的平均距离，平均距离最接近1km的，相对距离的方差最小的，队伍获胜\n\n有三名选手参数，我们将其结果绘制到下图中。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109232852.png)一目了然选手C赢了。他相较与选手A与选手C方差实现了位置在均值处并且方差极小。作为一名未来的工程师，我们也想像选手C一样获得比赛的胜利，那么为什么选手C更胜一筹呢，如果仅使用GPS，IMU或里程计不对数据进行滤波操作，数据可能会随时间积累变得越来越虚假。简单来讲，就拿汽车自带的里程计为例，假如里程计通过计算汽车轮毂转动的圈数来计算汽车的相对运动距离，但是我们的路面不够平稳，它是如下图这个状态。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110024028.png)当我们看到这张图纸，我们就明白了，在这种路面下汽车里程计是会有偏差的，而且随时间的积累，误差会越来越大，不管是汽车里程计、GPS还是IMC都有这种类似的问题。我们把这些影响各种各样的影响因素称之为**噪声 Noise**，那么我们如何降低噪声，让自动驾驶的汽车最终结果实现均值在1km并且方差极小呢？这时候卡尔曼滤波的作用就出来了。下面请听我细细道来\n\n### 卡尔曼滤波的详解\n\n现在我们分析汽车系统，系统如下![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110000834.png)\n\n#### $x_k$、$x_{k-1}$和$y_k$是什么，浅讲一下离散系统下的状态方程和观测方程\n\n**先不考虑$w_k$和$v_k$**，可能有的同学看到$x_k$或$y_k$有一点陌生，该状态方程为在离散系统下的构建的状态方程和观测方程。$x_k$表示在当前时间下的状态，$x_{k-1}$为上一个时间下的状态。同理，$y_k$表示当前时间下的系统输出，$u_k$表示当前状态下的系统输入。\n\n之前在连续系统下，我们的状态方程为$x'= Ax + bu$而现在系统的状态方程为$x_k = Ax_{k-1} + Bx_k$，我们发现他们之间有一点不同，连续系统下，状态方程表示状态的微分与状态和系统输入之间的线性关系，而离散系统下，则为当前时间状态与上一个时间步的状态和系统当前时间下的输入之间的线性关系。这感觉有一点不太对劲儿。在离散系统下为什么不像连续系统下为当前状态的微分与系统输入和当前状态之间的线性关系呢？![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110003415.png)\n\n原因很简单，在离散系统下没有微分的概念，在线性系统下状态方程以一阶微分方程的形式呈现，而在离散系统下则以一阶差分方程的形式呈现。\n\n那么什么是一阶差分方程呢？简单来讲就是含上一个时间步数值减去当前时间数值的方程。\n$$ x_{当前时间} - x_{上一个时间}$$\n这个在离散系统下就相当于微分，这是一阶的差分，二阶差分就是$x_{当前时间} - x_{上上一个时间}$。在离散系统下，就通过差分方程代替线性系统下的微分方程来分析系统构建状态方程和观测方程。\n\n现在我们分析一下离散系统下的状态方程和观测方程，方程如下\n$$\nx_k = A x_{k-1} + Bu_k\n$$\n$$\ny_k = Cx_k\n$$\n这个方程描述的很直观，先看状态方程，状态方程表示我们可以利用上一时间的状态和当前时间的输出来预测当前时间的状态。而观测方程表示，可以通过当前时间布的状态来计算当前时间的输出。很直观吧。\n\n##### 噪声后的世界\n\n之前我们提到了噪声Noise的概念。现在我们将噪声加入到我们的方程中让我们的方程更加趋近真实。\n\n在我们是难以通过数学公式去测量一个噪声，所以我们统一假设一切噪声都符合零均值的高斯分布或正态分布。\n$$\nNoise \\sim N(0, Q)\n$$\n我们将噪声加入我们的状态方程中，我们的状态方程就变成了这个样子\n$$\nx_k = A x_{k-1} + Bu_k + w_k\n$$\n$$\ny_k = Cx_k  + u_k\n$$\n我们在状态方程中加入了**过程噪声** $w_k$，该噪声是由一些外界因素影响产生的，例如地面不平。在观测方程中加入**观测噪声**$u_k$，该噪声是由观测器自身引起的，例如GPS精度低，性能差。这两种噪声都符合零均值高斯分布。\n$$\nw_k \\sim N(0, Q)\n$$\n$$\nu_k \\sim N(0,R)\n$$\n过程噪声为$w_k$为零均值方差为Q的高斯分布，观测噪声$u_K$为零均值方差为R的高斯分布。\n\n>方差 Q 和方差 R 是由你自己规定的，在工程中这就是你未来要调的参数。类似于PID的P参数、I参数和D参数，我们如何调整这两个参数，最后我会进行讲解\n\n当我们加入了噪声，我们发现我们的系统变得更加的混乱。从一个相对稳定的一条线，变为混乱的世界。\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110012215.png)\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110012240.png)\n此时我应该意识到一点，在噪声的影响下，我们测量的数据是无法反映真实数据的。但是如果我们知道汽车模型，对其构建数学模型![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110015019.png)我们将系统输入作用于我们构建的数学模型中，虽然利用数学模型得出的估计值肯定与真实值相差甚远，但是我们可以利用卡尔曼滤波将真实系统的测量值和数学模型得出的估计状态值相融合，得出最优估计值。\n\n##### 直观描述卡尔曼滤波是如何得到最优估计值\n\n当我们的系统中带有均值为0，方差为R的过程噪声，以及均值为0,方差为Q的观测噪声。此时上一个时间的状态呈现为均值为$\\hat{x}_{k -1}$的高斯分布。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111110934.png)该图纵轴为该状态出现的概率，横轴为状态。当我们拥有了上一个时间的估计状态，我们可以吧上一个时间的状态代入状态方程$\\hat{x_k} = \\hat{x_{k -1}} + Bu_k + w_k$得出当前时刻的估计状态。由于误差是会随时间累积，这就代表着当时时间的高斯分布的方差会更加大。如下图。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111111436.png)这时我们将传感器的数值，即，观测值$y_k$加入到这张图中，它也是符合高斯分布，如下图![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111111906.png)\n\n###### 数据融合的本质\n\n当我们看到上面那张图。我们有了利用上一个时间的估计值代入状态方程得到的当前时间的估计值，以及通过传感器得到的当前时刻的观测值。这时我们可以通过将两个数据进行**数据融合**，得到当前时间的最优估计值。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111113730.png)从图中我们可以直观的感受到最优估计值方程更加的小，更加符合我们的需求。\n\n但是数据融合是如何实现的？很简单，如果你学过《概率论》你会知道一点**两个事件发生的概率相乘=两件事同时发生的概率**![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111115708.png)\n\n这就是数据融合的本质。就是把多个数据的概率函数相乘，计算其同时发生的概率。数据融合后的结果如上图。方差小，更加符合真实。我们如果有更多的传感器，而且传感器的测量值与你要估计的状态之间存在**线性关系**,如我们的输出方程一样。\n$$\ny_k = Cx_k + u_k\n$$\n\n>线性关系是什么，在我看来就是数学方程中仅存在一次方项或零次方项的方程，如\n>$$y = kx + b$$\n\n我们就可以对其进行数据融合，进一步降低其方差进一步提升数据的精准度，让数据更加符合我们的需求。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111115921.png)\n\n这就是卡尔曼滤波能够实现最优估计的原因，这种滤波NB吧。它能通过融合传感器的数据，降低数据的方差，提升数据的精准度，让我们比较便宜的传感器的的能力不逊于一个价格比较高的传感器。\n\n#### 解析卡尔曼滤波方程，探讨卡尔曼滤波如何实现\n\n当我们对卡尔曼滤波已经有了一点的了解。这时候我们就要上方程了。卡尔曼滤波的方程如下\n$$\n\\hat{x_k} = A\\hat{x_{k -1}} + Bu_k + K_k(y_k - C(Ax_{k-1} + Bu_k))\n$$\n\n但我们看到这个方程的时候可能有一点蒙，但是我们回想起我之前提到的一个观点，**卡尔曼滤波是一种状态观测器**。现在我们把状态观测器的方程拿出来\n$$\n\\hat{x_{k+1}} = A\\hat{x_k} + Bu_k + K(y_k- \\hat{y_k})\n$$\n$$\n\\hat{y_k} = C\\hat{x_k}\n$$\n即\n$$\n\\hat{x_{k+1}} = A\\hat{x_k} + Bu_k + K(y_k- C\\hat{x_k})\n$$\n\n当我们对比两个方程，我们发现其有很多相似之处。卡尔曼滤波在功能上可以像原始的状态观测器一样，通过观测一个值来估计当前时刻的状态，但它是更强的状态观测器，它可以估计当前时刻的最优值，实现最优估计的目标，但是它是怎样实现这一点的？\n\n之前我们在状态观测器中提及过一个问题，状态观测器的增益$K$到底该如何调整实现最优的增益。在状态观测器上我们只能像调整PID参数时，那样一次一次的尝试，但是卡尔曼滤波为我们解决了这个问题，**它可以为我们动态调整增益$K$，最终找到最优的增益实现最优估价**。这种增益我们称其为**卡尔曼增益**。\n\n先不讨论卡尔曼增益如何实现，我们回到卡尔曼滤波方程\n\n$$\n\\hat{x_k} = A\\hat{x_{k -1}} + Bu_k + K_k(y_k - C(Ax_{k-1} + Bu_k))\n$$\n\n我们回顾之前的讲解，再仔细分析卡尔曼滤波方程，我们可以把卡尔曼滤波方程分为两部分一部分为**预测**，一部分为**更新**。\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111131147.png)\n前一部$A\\hat{x_{k-1}} + Bu_K$得出预测值${\\hat{x_{k-1}}}^-$将预测值代入更新$K_k(y_k -C(Ax_{k-1} + Bu_K))$，对得出的数据进行修正。卡尔曼增益自动调整，最终实现最优估计。\n\n现在我们对这两个过程进行一下详细的分析，并代入实现卡尔曼增益动态调整的方程，方程如下。\n\n- 预测部分$$\\hat{x}_{k}^{-}=A \\hat{x}_{k-1}+B u_{k}   $$$$P_{k}^{-}=A P_{k-1} A^{T}+Q$$\n- 更新部分$$K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}+R}$$$$\\hat{x}_{k}=\\hat{x}_{k}^{-}+K_{k}\\left(y_{k}-C \\hat{x}_{k}^{-}\\right)$$$$P_{k}=\\left(I-K_{k} C\\right) P_{k}^{-}$$\n\n>这里的P表示状态的方差，之前再讲解状态高斯分布一直在一维空间考虑，但是在工程中我们往往在多维空间下考虑。所以这时候就要用**协方差矩阵**来代替方差。\n\n现在我们相较于最初版本的卡尔曼滤波方程加入了三个关于动态调整卡尔曼增益的方程程，即预测部分的$P_{k}^{-}=A P_{k-1} A^{T}+Q$，以及更新部分的$K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}+R}$和$P_{k}=\\left(I-K_{k} C\\right) {P_{k}}^-$，我们看到这三个方程可能有一点蒙，说实话我也没完全理解透彻，所以为了不误人子弟。我就不对其进行细讲，只讲一下每个方程的用途。![1](attachment/Pasted%20image%2020230111141014.png)\n\n现在我们对整体进行分析，先讲一下每一个方程的作用，然后对整体进行分析，理解卡尔曼滤波的降低方差，优化估计的实现。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111143846.png)在预测部分我们利用上一个时间的估价状态和上一个时间的协方差矩阵，计算出当前时刻的估计状态和当前时刻的协方差矩阵。将计算得到的当前时刻的协方差代入更新部分来更新卡尔曼增益数值，然后将调整的卡尔曼增益数值，代入卡尔曼滤波方程预测部分，来调整预测值，以得到最优估计值。最后更新当前时刻的协方差矩阵。这就是卡尔曼滤波的工作原理。\n\n### 调参开始了\n\n现在当我们理解了卡尔曼滤波的工作原理。我们来到了痛苦的调参环节。我们要调两个参数过程噪声协方差矩阵$R$和观测噪声协方差矩阵$Q$，\n\n现在我们来讲一下这两个参数到底代表着什么。卡尔曼滤波优化传感器数值，其内部思想可以认为是，我们开发者不信任传感器数值，也不信任通过数学模型得出的估计值，我们要对两者进行数据融合，得到更加真实的结果，这就是卡尔曼滤波。实际上在我们调参时，也根据这个思想，调整参数$R$和$Q$实际上就是调整我们开发者，是更相信状态方程预测的数值，还是更相信传感器的数值，下面我们来相信讲一下这一点。\n\n我们拿出之间我们列出的方程![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111145727.png)\n极端一点，我们现在让过程噪声的协方差矩阵R趋近于零。此时我们将这个数值代入方程中，经历一次计算。卡尔曼增益变为$$K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}}$$化简一下，变为$$K_{k}=\\frac{1}{C }$$这时我们将卡尔曼增益代入代入卡尔曼滤波的更新部分，此时其变为$$\\hat{x}_{k}=\\hat{x}_{k}^{-}+\\frac{1}{C }\\left(y_{k}-C \\hat{x}_{k}^{-}\\right)$$化简一下由于变为$$\\hat{x_k} = \\frac{y_k}{C}$$这时我们的估计值完全取决与观测值。此时代表着我们开发者完全传感器。相反，如果观测噪声的协方差矩阵Q趋近于0，此时代表我们开发完全信任预测值。简单来讲，**R越小Q越大，越信任观测值；R越大Q越小，越信任预测值**\n\n那么调整过程噪声协方差矩阵$R$和观测噪声协方差矩阵$Q$会对我们的估计状态$x$造成怎样的影响呢？如果我们调整好$Q$与$R$，会使我们的估计状态$\\hat{x}$更快到达最优估计状态。如下图![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111154510.png)\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111154603.png)对比这两张图，我们明显可以感受到下面的图比上面更快到达最优估价状态，数值相较与上图更加的贴进真实。所以，作为一名开发人员，我建议你们一定要给我调好参数，不要半途而废。\n\n## 卡尔曼滤波实战（针对电控组）\n\n### 为什么电控组要用卡尔曼滤波\n\n我刚学卡尔曼滤波时，我一直有一个问题，“为什么电控组要用卡尔曼滤波？”，可能你们对我提出这个问题感觉有一点莫名其妙，为什么我会提出这么稀奇古怪的问题。请听我细细道来。首先卡尔曼滤波在之前一直应用于自动瞄准。我们先说说自动瞄准大体是怎么实现的。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112103135.png)大体是，视觉组识别到敌方装甲板，经过一系列计算，得出云台要转动的pitch轴和yaw轴的角度增量，将这个角度增量发给电控组，电控组再对视觉组发来的数据进行一次kalman滤波，将滤波后得出的数据实施在云台上。\n\n但是我一直都有一个疑问，为什么电控需要作卡尔曼滤波处理视觉的数据，我感觉没必要啊，视觉组已经给我那么好的数据了，电控组为啥要处理呢？不会乱处理让数据失真吗，没必要啊，是不是。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112103823.png)\n但是后来我悟了，真有必要，原因是什么呢，视觉与电控的通信频率小于电控组自身运行频率。有点不说人话了是不是。我详说一下，假如视觉的mini PC与电控开发板之间的通信间隔时间为$2ms$，而电控开发板运行的时钟间隔为$1ms$，在视觉的同学看来，数据是这个样子的。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112110039.png)\n但是在电控组开发看来却不是这样的。它是这样的![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112110127.png)\n由于视觉与电控通信频率小于，电控自身时钟频率，所以在视觉与电控通信一次之后它会有一段时间，是没有数据的数据为上一次通信的数据。这时它会出现一个阶梯状的状态。如果是这么一个状态的数据直接应用到电控层面，那么夸张一点，我们的云台会一抖一抖的，所以这个时候滤波的作用就出来了。它能让阶梯变为。一条相对平滑的曲线，![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112110652.png)\n这就是卡尔曼滤波在电控层面应用的重要性。\n\n### 那么如何使用卡尔曼滤波在电控层面\n\n>我们现在只讲解一下在一维层面如何应用卡尔曼滤波。二维以上的由于需要用到矩阵，但原理差不多。如果想了解，可以自行查找资料。\n\n设置一个场景，我们电控组要求视觉组的同学通过摄像机测量我方机器人与对方机器人装甲板的相对距离。视觉的同学实现了这个功能，将数据发送给了电控，那么作为一名电控我们应该如何利用卡尔曼滤波处理这个数据呢？分为以下几步。\n\n- 选择观测值y和状态值x\n- 建立方程\n- 代入数据进行计算\n\n那么应用在上述场景该如何实现。我们要估计相对距离，相对距离就是我们的估计值，视觉的同学已经给我们发了相对距离，我们可以把视觉发来的相对位置直接作为观测值，我们的估计值与观测值相同符合线性关系\n$$\ny = x\n$$\n现在我们开始构建方程，现在我们拿出状态方程和观测方程作为模板套参数\n$$x_k= Ax_{k -1} + Bu_K$$$$y_k = Cx_k$$\nC的值已经确定了为1，现在我们确定A的数值由于系统并没有任何输入所以状态方程可以变为$$x_k = Ax_{k -1}$$这时我直接认为A的数值就是1就可以了，为什么是这样我也没想通。但是确实都是1，等我哪天想通了我再告诉你们为什么。\n\n当我们拥有了视觉的同学发来的数据以及状态方程输出方程A和C的数值。我们直接代入到卡尔曼滤波的方程。Q和R的数值你要自己定，怎么定看你自己。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111145727.png)，最后计算就完事了。\n\n>这就是卡尔曼滤波的所有内容，笔者能力有限，肯定有很多谬误，有问题请指出。  \n>\n>参考资料\n>[什么是卡尔曼滤波器 (Kalman Filters) ？](https://www.bilibili.com/video/BV1V5411V72J?p=1&vd_source=fb54463fa9160b349a7111ad9b7afbf8)  \n>[RM电控组培训视频](https://www.bilibili.com/video/BV1cJ411K7Na?p=11&vd_source=fb54463fa9160b349a7111ad9b7afbf8)\n>[B站讲的最好的卡尔曼滤波器-目标追踪课程](https://www.bilibili.com/video/BV1Ux4y1G7j6/?spm_id_from=333.337.search-card.all.click&vd_source=fb54463fa9160b349a7111ad9b7afbf8)\n","source":"_posts/kalman-filter-的个人理解.md","raw":"---\ntitle: kalman filter 卡尔曼滤波的个人理解\ndate: 2023-06-28 13:32:50\ntags: 状态观测器\ncategories: 现代控制理论\nmathjax: true\n---\n>**该文档归山东理工大学齐奇战队所有**\n>本文作者为原落尘，邮箱为<yuanluochen@foxmail.com>，笔者能力有限，如有问题，请您指出.\n\n## 什么是滤波\n\n**卡尔曼滤波**，看起来十分高大尚的一个算法，但是当我们把卡尔曼这个修饰语去掉就变成了**滤波**。这一刻就突然间有一种灵光一闪的感觉，这时我们突然发现，“哦，它是一种滤波啊，就这？”\n\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108154034.png)\n\n但是，之前的我作为一名小白，我甚至连滤波到底是什么我都不知道。我第一提出这个问题“什么是滤波，它有什么用”,我记得是我在阅读大疆robotMaster官方代码时提出了这个问题我记得当时的代码是这样的  \n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108155020.png)  \n当时的我就提出了这个疑问，“滤波到底有什么用，为什么要将设置的数值经过滤波处理一下，如果没有滤波处理它会变成什么样子”，后来的我理解了，我也悟了。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109225734.png)\n\n在真实世界中，当我们想通过一个传感器测量一个数据，但是传感器测量的数值总有一些误差，比如我们想通过一个可以测量距离的传感器测量当前位置与墙之间的距离![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112121821.png)恰巧我们有两个传感器，一个精度极高，价格极贵；一个精度还可以，但价格十分亲民，这时候，我们使用这两个传感器测量距离，我们将测量的结果绘制一张图纸。\n\n在最理想的状态下，我们希望图纸是如下状态，他是一个稳定的直线\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108161212.png)  \n\n但是在计算机世界总是有一点差强人意，它是这样一个状态，是由一个个小点点构成的  \n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108161823.png)  \n这是因为什么呢，因为在计算机的世界中，一切都是离散的，不是连续的，不管是计算机还是传感器它们计算数据都是在时钟周期的影响下驱动的，时钟每运行一次，程序就会运行一次，它并非想理想状态下是一个由一条线构成的连续的状态，而是由一个又一个小点构成的离散状态。\n\n但是想上图这样的图纸是真实的吗？结论是还不够真实，真实的状态比这还要难受，它更加的混乱。 如下面两张图所示\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108174540.png)\n我们看到这张图已经感觉十分混乱了，但是还有更混乱的，如下图  \n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108172311.png)  \n当我们看到者两张图纸，不知道你有没有一个疑问，为什么是混乱的。这个问题答案很简单，**我们的传感器不咋地**\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108174304.png)  \n原因就这么简单，没什么其他的原因，精度比较高的传感器还好，数据混乱度还可以接受，但是传感器精度不高，哎，不想说什么了，一言难尽。\n\n但是我们发现，不管数据再怎么混乱，它们都有一个共同的特点，数据点的分布都以一个统一的数值为中心。当我们看到了共同点，我们再看看不同点，相比于第一个，第二个明显更加混乱，我们用更加专业的语言来分析这个问题，这时我们引入**高斯分布**的概念，可能有一些人不理解高斯分布，那么那我们说一个更加通俗易懂的，**正态分布**，这个名词我们高中就学过，可能有些人听到这个词语有一点陌生，但是我把下面这一张图拿出来应该立刻就想起来了  \n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108173559.png)  \n当我看到这张图时，我脑中立刻回忆起高中的痛苦岁月，真难忘。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109225958.png)\n\n现在我们引入了高斯分布，或者说正态分布，这时我们在分析上面的两个混乱的图像，明显第二张图像比第一张方差更大。精度更高的传感器，方差小，精度低的，方差大，数据一言难尽。\n\n### 开始讲滤波器了\n\n我们如何解决数据分散，方差大的问题呢？这时我们就要用到滤波器了，哎，这么长时间了，终于开始讲什么是滤波器了。\n\n那么什么是滤波器呢？拿这几张图为例  \n![图一](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108175411.png)\n![图二](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108172311.png)  ![图三](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108161823.png)  \n简单来讲，**滤波器就是让图一图二逆天改命为图三的神器**，滤波器能将传感器得到的真实数据进行处理，让数据更加符合要求，更加平滑，这就相当于对数据进行淬体，化凡为仙，心动了吧。\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108180141.png)\n\n这就是滤波器，回到我之前的那个问题，大疆官方的代码为什么要对数据进行滤波处理，答案一目了然，为了让数据更加平稳，更加平滑，更加符合我们开发者的需求。而卡尔曼滤波作为滤波的佼佼者，它的能力更加强大，它能降低方差，融合传感器的数据，让数据更加集中，能让数据更加贴近真实。\n\n## State Observer 状态观测器\n\n### 卡尔曼滤波是一种状态观测器\n\n卡尔曼滤波器是可以实现最优估计的状态观测器。刚看到这句话可能有一点复杂。但是不要着急。我们先从状态观测器开始讲起，然后我们在开始讲解卡尔曼滤波\n\n### 什么是状态观测器\n\n在讲解相对复杂的卡尔曼滤波之前，我们先从初级关卡入手，理解一下什么是状态观测器。讲一个比较有趣的例子\n\n假如你喜欢一个女孩，但是你不知道对方到底对你是否有那方面想法，作为一名理工男，你渴望能够通过一种传感器来直接判断对方的想法，但是没有啊，这个时候你十分的苦恼  \n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108184550.png)  \n那光苦恼可不行，那这个问题该怎么解决呢？这时我们想到了我们突然间想到了状态观测器。“有办法了”，为确定对方是否喜欢你，这个**估计值**，你要通过对对方施加一些**激励**，或者说是与对方说几句话，通过观察对方的反映或者**响应**来判断对方的想法将反映与自己的预期进行对比，得出结论对方到底喜不喜欢你。![1](./kalman-filter-的个人理解/attachment/ll.png)\n\n没想到吧，这么符合逻辑。不愧是理工男，现在我们回顾一下上面那个例子，反思一下什么是状态观测器，状态观测器是什么，**状态观测器是一个可以通过测量一个间接值来估计需求值的一种神器。**\n\n### 状态观测器到底是怎么工作的\n\n现在我们开始正经的讲解一下状态观测器吧，还是以一个例子启头，作为一名理工男，不研究火箭对得起自己吗，现在我们开始研究一下火箭![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108192936.png)作为一名未来的火箭工程师，我们要研究控制火箭尾部火焰温度，学过一点控制相关的东西的同学都知道，如果想要控制一个量，我们就必须要测量这个量，但是火箭啊这个东西温度太高了，如果你用一个温度计，放到火焰里来测量火焰的温度，这显然是不现实，温度计必被烤化，为了解决这个问题我们该如何处理呢，这时我们想到了状态观测器，利用状态观测器来估计火焰温度。\n\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230108200147.png)当我们看到这张图纸，（这是我自己画的，画的可能有一点抽象，但是我感觉可以接受）这是一个火箭尾部的简化图纸，外面为一个外壳，火焰从内部喷射而出，我们要测量火焰温度，实际就是测量上图的内层温度，但是内层温度无法直接测量，所以可以利用状态观测器通过测量外层温度，估计内层温度，但是这是怎么实现的呢？\n\n我们分析这个系统我们发现，火箭尾焰的温度，是受燃料控制，燃料作为尾焰这个系统输出的输入，而我们要估计的量尾焰温度被称为这个系统的状态量，如下图所示。  ![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109103344.png)\n\n那么如何估计尾焰温度这个数值呢？如果你是一名优秀的理工人，你可以对这个系统进行建模，构建其数学模型，我们将系统输入，即燃料作用于你构建的数学模型，然后数学模型输出的状态量就是你估计的尾焰温度![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109134209.png)\n\n现在问题来了这样就计算出来了尾焰温度，那么系统输出，即你要测量的外层温度有什么用吗？那根本没用啊，怎么可能，你真的觉得你是一个数学天才吗，你自己推导的数学模型真的是符合真实系统的吗？怎么可能，真实系统怎么可能那么美好，系统中存在许多外界因素干扰着你的系统，你构建的数学模型与真实系统还是有些许差异，所以我们该如何处理这个问题呢？这时候测量的外界温度的作用就出来了，我们可以通过使外界温度与估计的外界温度，数值相等，来使估计的尾焰温度与实际尾焰温度相近。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109135140.png)\n\n>先提一个概念，$x$为状态，我们在$x$头上加一个^，即$\\hat{x}$，我们称之其为估计状态\n\n即让$y = \\hat{y}$相等实现$x=\\hat{x}$，这样就实现了测量内部温度的目标，那么如何实现这个目标呢？如何让系统输出与估计的系统输出相同呢？方法很简单，利用反馈控制，通过反馈控制来实现误差的缩小![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109161402.png)\n当误差$e = error = y -\\hat{y}$数值趋近与零这时估计的状态量十分接近真实的状态值。\n\n### 状态观测器公式推导\n\n口说无凭，毫无依据不符合理工男的原则，我们要对上述结论进行公式推导。在推导公式前，我们先要讲一讲状态方程与观测方程。\n\n#### 浅讲状态方程和观测方程\n\n>什么是状态方程，什么是观测方程？这个问题我也很难解答，以下的讲解可能有大量的问题。如果有问题请提出\n\n现在我来浅说一下这两个方程，不废话上方程，先上一个连续系统的状态方程和观测方程\n\n> 我先说一下连续和离散的概念，浅说一下，连续系统可以理解为由一条一条线构成的![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109142504.png)\n> 而离散系统可以理解为由一个又一个点构成的![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109142637.png)计算机内都是离散系统，但是为了推导公式方便，我们在连续系统内推导公式\n\n状态方程  \n$$\nx' = A x + B  u\n$$\n观测方程\n$$\ny = C x\n$$\n但我们刚看到公式可能不知道如何下手，请听我慢慢道来，不用考虑太多你可以把状态方程当成描述系统状态随时间的变化与当前状态和系统输入之间的线性关系，观测方程就是描述系统输出与当前状态之间的关系的数学表达式。那么如何构建一个状态方程和观测方程呢？说实话，在下能力有限，很难将其讲清楚，所以请见谅![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109192900.png)\n但是这不影响我们验证状态观测器的任务。\n\n#### 正式开始推导公式的正确性了\n\n现在假设我们可以对系统构建其状态方程以及其观测方程了，现在我们的图就变成了这样![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109205237.png)\n这样是不是更符合理工男的形象了，都是数学公式，NB吧。\n\n回到我们最初的目的，我们要验证随着$e = y - \\hat{y}$趋近于零，$\\hat{x}$ 趋近于$x$。那么我们该如何验证该结论呢？  \n首先，如果想验证$\\hat{x}$ 趋近于x，我们就可以验证$e_{obs} = x - \\hat{x}$趋近于零，这样我们可以通过验证$e_{obs} = x - \\hat{x}$趋近于零来进而验证$\\hat{x}$趋近于$x$。这时我们拿出真实系统的方程与我们自己构建的系统方程  \n真实系统的方程\n$$ x' = Ax + Bu$$\n$$y = Cx $$\n自己构建的数学模型\n$$\\hat{x}' = A\\hat{x} + Bu + K(y - \\hat{y})$$\n$$\\hat{y} = C \\hat{x}$$\n我们要求解$x - \\hat{x}$的数据，我们将真实系统方程与自己构建的数学模型对应相减\n\n$$\ne_{obs} = x - \\hat{x}\n$$\n$$x'- \\hat{x}' = A(x - \\hat{x}) + Bu - Bu - K(y - \\hat{y})$$\n$$\ny - \\hat{y} = C(x - \\hat{x})\n$$\n将方程化简\n$$\ne_{obs}' = Ae_{obs} - KCe_{obs}\n$$\n再化简一下\n$$\ne_{obs}' = (A-KC)e_{obs}\n$$\n再对方程求积分求出$e_{obs}$的数值\n$$\ne_{obs} = e^{（A - KC）t}e_{obs}(0)\n$$\n这时我们就解出了$e_{obs}$，即随时间变化估价值$\\hat{x}$与真实值之间的关系$\\hat{x}$。我们发现$e_{obs}$与时间的关系是一个指数关系，这就意味着，如果$A -KC < 0$,$e_{obs}$与时间的关系如下图。\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109221302.png)\n它会随时间不断趋近于零。\n\n#### 增益K到底有个什么用\n\n但是当我们看到这个结论。我有一个好奇就产生了，**反馈真的有用吗？** 当我第一次推导出上述公式时我就产生了这个好奇，如果没有K项，没有反馈，如下图![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109222504.png)更改一下公式。\n$$\ne_{obs} = e^{At} e_{obs}(0)\n$$\n此时没有反馈控制，如如果$A < 0$依旧图像为![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109222813.png)那现在问题来了，我们反馈控制的意义在那里。我之前可能没有提过，系统状态方程，观测方程的系数$A$ $B$ $C$并非为真实系统的数值，而是我们人为规定的数值，它自身是存在误差的，公式$e_{obs} = e^{(A -KC)t}e_{obs}(0)$的A的数值并非真实数值，之前的推导，是根据状态方程观测方程完全正确的情况考虑的，我们无法通过一个非真实的系数$A$来控制$e_{obs}$的衰减率，所以我们要外加一个增益来控制$e_{obs}$衰减率，实现估计值与真实值趋近。\n\n但是现在问题又来了，我们如何调整增益$K$的数值呢？这时候卡尔曼滤波器就登场了。卡尔曼滤波可以自动调整增益K的数值，实现最优估计。\n\n## 卡尔曼滤波，可以实现最优估计的状态观测器\n\n现在咱们终于开始讲解卡尔曼滤波了。朋友们恭喜你，终于到了这一步。你离解放不远了![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109234638.png)\n\n之前我们讲解了状态观测器。我们提到了如何调增益K，我们回想起我们调参的经历。哎，不堪回首。但是卡尔曼滤波帮助我们在一定程度上解决了这个问题。它能帮助我们调整增益K，已实现最优估计。但是如何实现呢？请听我细细道来。\n\n我们还是从一个例子开始，假设某一个地方举行了一场汽车自动驾驶的比赛。这场比赛的规则是这样的：你可以通过各种传感器测量汽车当前的状态，如利用GPS测量当前位置，利用IMC测量加速度，利用汽车自带的里程计测量汽车的相对移动位置。通过这些传感器来让自动驾驶的汽车在不同地形的路面行使1km，最后我们测量汽车自动行使的相对距离。计算每支队伍的平均距离，平均距离最接近1km的，相对距离的方差最小的，队伍获胜\n\n有三名选手参数，我们将其结果绘制到下图中。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230109232852.png)一目了然选手C赢了。他相较与选手A与选手C方差实现了位置在均值处并且方差极小。作为一名未来的工程师，我们也想像选手C一样获得比赛的胜利，那么为什么选手C更胜一筹呢，如果仅使用GPS，IMU或里程计不对数据进行滤波操作，数据可能会随时间积累变得越来越虚假。简单来讲，就拿汽车自带的里程计为例，假如里程计通过计算汽车轮毂转动的圈数来计算汽车的相对运动距离，但是我们的路面不够平稳，它是如下图这个状态。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110024028.png)当我们看到这张图纸，我们就明白了，在这种路面下汽车里程计是会有偏差的，而且随时间的积累，误差会越来越大，不管是汽车里程计、GPS还是IMC都有这种类似的问题。我们把这些影响各种各样的影响因素称之为**噪声 Noise**，那么我们如何降低噪声，让自动驾驶的汽车最终结果实现均值在1km并且方差极小呢？这时候卡尔曼滤波的作用就出来了。下面请听我细细道来\n\n### 卡尔曼滤波的详解\n\n现在我们分析汽车系统，系统如下![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110000834.png)\n\n#### $x_k$、$x_{k-1}$和$y_k$是什么，浅讲一下离散系统下的状态方程和观测方程\n\n**先不考虑$w_k$和$v_k$**，可能有的同学看到$x_k$或$y_k$有一点陌生，该状态方程为在离散系统下的构建的状态方程和观测方程。$x_k$表示在当前时间下的状态，$x_{k-1}$为上一个时间下的状态。同理，$y_k$表示当前时间下的系统输出，$u_k$表示当前状态下的系统输入。\n\n之前在连续系统下，我们的状态方程为$x'= Ax + bu$而现在系统的状态方程为$x_k = Ax_{k-1} + Bx_k$，我们发现他们之间有一点不同，连续系统下，状态方程表示状态的微分与状态和系统输入之间的线性关系，而离散系统下，则为当前时间状态与上一个时间步的状态和系统当前时间下的输入之间的线性关系。这感觉有一点不太对劲儿。在离散系统下为什么不像连续系统下为当前状态的微分与系统输入和当前状态之间的线性关系呢？![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110003415.png)\n\n原因很简单，在离散系统下没有微分的概念，在线性系统下状态方程以一阶微分方程的形式呈现，而在离散系统下则以一阶差分方程的形式呈现。\n\n那么什么是一阶差分方程呢？简单来讲就是含上一个时间步数值减去当前时间数值的方程。\n$$ x_{当前时间} - x_{上一个时间}$$\n这个在离散系统下就相当于微分，这是一阶的差分，二阶差分就是$x_{当前时间} - x_{上上一个时间}$。在离散系统下，就通过差分方程代替线性系统下的微分方程来分析系统构建状态方程和观测方程。\n\n现在我们分析一下离散系统下的状态方程和观测方程，方程如下\n$$\nx_k = A x_{k-1} + Bu_k\n$$\n$$\ny_k = Cx_k\n$$\n这个方程描述的很直观，先看状态方程，状态方程表示我们可以利用上一时间的状态和当前时间的输出来预测当前时间的状态。而观测方程表示，可以通过当前时间布的状态来计算当前时间的输出。很直观吧。\n\n##### 噪声后的世界\n\n之前我们提到了噪声Noise的概念。现在我们将噪声加入到我们的方程中让我们的方程更加趋近真实。\n\n在我们是难以通过数学公式去测量一个噪声，所以我们统一假设一切噪声都符合零均值的高斯分布或正态分布。\n$$\nNoise \\sim N(0, Q)\n$$\n我们将噪声加入我们的状态方程中，我们的状态方程就变成了这个样子\n$$\nx_k = A x_{k-1} + Bu_k + w_k\n$$\n$$\ny_k = Cx_k  + u_k\n$$\n我们在状态方程中加入了**过程噪声** $w_k$，该噪声是由一些外界因素影响产生的，例如地面不平。在观测方程中加入**观测噪声**$u_k$，该噪声是由观测器自身引起的，例如GPS精度低，性能差。这两种噪声都符合零均值高斯分布。\n$$\nw_k \\sim N(0, Q)\n$$\n$$\nu_k \\sim N(0,R)\n$$\n过程噪声为$w_k$为零均值方差为Q的高斯分布，观测噪声$u_K$为零均值方差为R的高斯分布。\n\n>方差 Q 和方差 R 是由你自己规定的，在工程中这就是你未来要调的参数。类似于PID的P参数、I参数和D参数，我们如何调整这两个参数，最后我会进行讲解\n\n当我们加入了噪声，我们发现我们的系统变得更加的混乱。从一个相对稳定的一条线，变为混乱的世界。\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110012215.png)\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110012240.png)\n此时我应该意识到一点，在噪声的影响下，我们测量的数据是无法反映真实数据的。但是如果我们知道汽车模型，对其构建数学模型![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230110015019.png)我们将系统输入作用于我们构建的数学模型中，虽然利用数学模型得出的估计值肯定与真实值相差甚远，但是我们可以利用卡尔曼滤波将真实系统的测量值和数学模型得出的估计状态值相融合，得出最优估计值。\n\n##### 直观描述卡尔曼滤波是如何得到最优估计值\n\n当我们的系统中带有均值为0，方差为R的过程噪声，以及均值为0,方差为Q的观测噪声。此时上一个时间的状态呈现为均值为$\\hat{x}_{k -1}$的高斯分布。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111110934.png)该图纵轴为该状态出现的概率，横轴为状态。当我们拥有了上一个时间的估计状态，我们可以吧上一个时间的状态代入状态方程$\\hat{x_k} = \\hat{x_{k -1}} + Bu_k + w_k$得出当前时刻的估计状态。由于误差是会随时间累积，这就代表着当时时间的高斯分布的方差会更加大。如下图。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111111436.png)这时我们将传感器的数值，即，观测值$y_k$加入到这张图中，它也是符合高斯分布，如下图![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111111906.png)\n\n###### 数据融合的本质\n\n当我们看到上面那张图。我们有了利用上一个时间的估计值代入状态方程得到的当前时间的估计值，以及通过传感器得到的当前时刻的观测值。这时我们可以通过将两个数据进行**数据融合**，得到当前时间的最优估计值。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111113730.png)从图中我们可以直观的感受到最优估计值方程更加的小，更加符合我们的需求。\n\n但是数据融合是如何实现的？很简单，如果你学过《概率论》你会知道一点**两个事件发生的概率相乘=两件事同时发生的概率**![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111115708.png)\n\n这就是数据融合的本质。就是把多个数据的概率函数相乘，计算其同时发生的概率。数据融合后的结果如上图。方差小，更加符合真实。我们如果有更多的传感器，而且传感器的测量值与你要估计的状态之间存在**线性关系**,如我们的输出方程一样。\n$$\ny_k = Cx_k + u_k\n$$\n\n>线性关系是什么，在我看来就是数学方程中仅存在一次方项或零次方项的方程，如\n>$$y = kx + b$$\n\n我们就可以对其进行数据融合，进一步降低其方差进一步提升数据的精准度，让数据更加符合我们的需求。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111115921.png)\n\n这就是卡尔曼滤波能够实现最优估计的原因，这种滤波NB吧。它能通过融合传感器的数据，降低数据的方差，提升数据的精准度，让我们比较便宜的传感器的的能力不逊于一个价格比较高的传感器。\n\n#### 解析卡尔曼滤波方程，探讨卡尔曼滤波如何实现\n\n当我们对卡尔曼滤波已经有了一点的了解。这时候我们就要上方程了。卡尔曼滤波的方程如下\n$$\n\\hat{x_k} = A\\hat{x_{k -1}} + Bu_k + K_k(y_k - C(Ax_{k-1} + Bu_k))\n$$\n\n但我们看到这个方程的时候可能有一点蒙，但是我们回想起我之前提到的一个观点，**卡尔曼滤波是一种状态观测器**。现在我们把状态观测器的方程拿出来\n$$\n\\hat{x_{k+1}} = A\\hat{x_k} + Bu_k + K(y_k- \\hat{y_k})\n$$\n$$\n\\hat{y_k} = C\\hat{x_k}\n$$\n即\n$$\n\\hat{x_{k+1}} = A\\hat{x_k} + Bu_k + K(y_k- C\\hat{x_k})\n$$\n\n当我们对比两个方程，我们发现其有很多相似之处。卡尔曼滤波在功能上可以像原始的状态观测器一样，通过观测一个值来估计当前时刻的状态，但它是更强的状态观测器，它可以估计当前时刻的最优值，实现最优估计的目标，但是它是怎样实现这一点的？\n\n之前我们在状态观测器中提及过一个问题，状态观测器的增益$K$到底该如何调整实现最优的增益。在状态观测器上我们只能像调整PID参数时，那样一次一次的尝试，但是卡尔曼滤波为我们解决了这个问题，**它可以为我们动态调整增益$K$，最终找到最优的增益实现最优估价**。这种增益我们称其为**卡尔曼增益**。\n\n先不讨论卡尔曼增益如何实现，我们回到卡尔曼滤波方程\n\n$$\n\\hat{x_k} = A\\hat{x_{k -1}} + Bu_k + K_k(y_k - C(Ax_{k-1} + Bu_k))\n$$\n\n我们回顾之前的讲解，再仔细分析卡尔曼滤波方程，我们可以把卡尔曼滤波方程分为两部分一部分为**预测**，一部分为**更新**。\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111131147.png)\n前一部$A\\hat{x_{k-1}} + Bu_K$得出预测值${\\hat{x_{k-1}}}^-$将预测值代入更新$K_k(y_k -C(Ax_{k-1} + Bu_K))$，对得出的数据进行修正。卡尔曼增益自动调整，最终实现最优估计。\n\n现在我们对这两个过程进行一下详细的分析，并代入实现卡尔曼增益动态调整的方程，方程如下。\n\n- 预测部分$$\\hat{x}_{k}^{-}=A \\hat{x}_{k-1}+B u_{k}   $$$$P_{k}^{-}=A P_{k-1} A^{T}+Q$$\n- 更新部分$$K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}+R}$$$$\\hat{x}_{k}=\\hat{x}_{k}^{-}+K_{k}\\left(y_{k}-C \\hat{x}_{k}^{-}\\right)$$$$P_{k}=\\left(I-K_{k} C\\right) P_{k}^{-}$$\n\n>这里的P表示状态的方差，之前再讲解状态高斯分布一直在一维空间考虑，但是在工程中我们往往在多维空间下考虑。所以这时候就要用**协方差矩阵**来代替方差。\n\n现在我们相较于最初版本的卡尔曼滤波方程加入了三个关于动态调整卡尔曼增益的方程程，即预测部分的$P_{k}^{-}=A P_{k-1} A^{T}+Q$，以及更新部分的$K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}+R}$和$P_{k}=\\left(I-K_{k} C\\right) {P_{k}}^-$，我们看到这三个方程可能有一点蒙，说实话我也没完全理解透彻，所以为了不误人子弟。我就不对其进行细讲，只讲一下每个方程的用途。![1](attachment/Pasted%20image%2020230111141014.png)\n\n现在我们对整体进行分析，先讲一下每一个方程的作用，然后对整体进行分析，理解卡尔曼滤波的降低方差，优化估计的实现。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111143846.png)在预测部分我们利用上一个时间的估价状态和上一个时间的协方差矩阵，计算出当前时刻的估计状态和当前时刻的协方差矩阵。将计算得到的当前时刻的协方差代入更新部分来更新卡尔曼增益数值，然后将调整的卡尔曼增益数值，代入卡尔曼滤波方程预测部分，来调整预测值，以得到最优估计值。最后更新当前时刻的协方差矩阵。这就是卡尔曼滤波的工作原理。\n\n### 调参开始了\n\n现在当我们理解了卡尔曼滤波的工作原理。我们来到了痛苦的调参环节。我们要调两个参数过程噪声协方差矩阵$R$和观测噪声协方差矩阵$Q$，\n\n现在我们来讲一下这两个参数到底代表着什么。卡尔曼滤波优化传感器数值，其内部思想可以认为是，我们开发者不信任传感器数值，也不信任通过数学模型得出的估计值，我们要对两者进行数据融合，得到更加真实的结果，这就是卡尔曼滤波。实际上在我们调参时，也根据这个思想，调整参数$R$和$Q$实际上就是调整我们开发者，是更相信状态方程预测的数值，还是更相信传感器的数值，下面我们来相信讲一下这一点。\n\n我们拿出之间我们列出的方程![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111145727.png)\n极端一点，我们现在让过程噪声的协方差矩阵R趋近于零。此时我们将这个数值代入方程中，经历一次计算。卡尔曼增益变为$$K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}}$$化简一下，变为$$K_{k}=\\frac{1}{C }$$这时我们将卡尔曼增益代入代入卡尔曼滤波的更新部分，此时其变为$$\\hat{x}_{k}=\\hat{x}_{k}^{-}+\\frac{1}{C }\\left(y_{k}-C \\hat{x}_{k}^{-}\\right)$$化简一下由于变为$$\\hat{x_k} = \\frac{y_k}{C}$$这时我们的估计值完全取决与观测值。此时代表着我们开发者完全传感器。相反，如果观测噪声的协方差矩阵Q趋近于0，此时代表我们开发完全信任预测值。简单来讲，**R越小Q越大，越信任观测值；R越大Q越小，越信任预测值**\n\n那么调整过程噪声协方差矩阵$R$和观测噪声协方差矩阵$Q$会对我们的估计状态$x$造成怎样的影响呢？如果我们调整好$Q$与$R$，会使我们的估计状态$\\hat{x}$更快到达最优估计状态。如下图![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111154510.png)\n![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111154603.png)对比这两张图，我们明显可以感受到下面的图比上面更快到达最优估价状态，数值相较与上图更加的贴进真实。所以，作为一名开发人员，我建议你们一定要给我调好参数，不要半途而废。\n\n## 卡尔曼滤波实战（针对电控组）\n\n### 为什么电控组要用卡尔曼滤波\n\n我刚学卡尔曼滤波时，我一直有一个问题，“为什么电控组要用卡尔曼滤波？”，可能你们对我提出这个问题感觉有一点莫名其妙，为什么我会提出这么稀奇古怪的问题。请听我细细道来。首先卡尔曼滤波在之前一直应用于自动瞄准。我们先说说自动瞄准大体是怎么实现的。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112103135.png)大体是，视觉组识别到敌方装甲板，经过一系列计算，得出云台要转动的pitch轴和yaw轴的角度增量，将这个角度增量发给电控组，电控组再对视觉组发来的数据进行一次kalman滤波，将滤波后得出的数据实施在云台上。\n\n但是我一直都有一个疑问，为什么电控需要作卡尔曼滤波处理视觉的数据，我感觉没必要啊，视觉组已经给我那么好的数据了，电控组为啥要处理呢？不会乱处理让数据失真吗，没必要啊，是不是。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112103823.png)\n但是后来我悟了，真有必要，原因是什么呢，视觉与电控的通信频率小于电控组自身运行频率。有点不说人话了是不是。我详说一下，假如视觉的mini PC与电控开发板之间的通信间隔时间为$2ms$，而电控开发板运行的时钟间隔为$1ms$，在视觉的同学看来，数据是这个样子的。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112110039.png)\n但是在电控组开发看来却不是这样的。它是这样的![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112110127.png)\n由于视觉与电控通信频率小于，电控自身时钟频率，所以在视觉与电控通信一次之后它会有一段时间，是没有数据的数据为上一次通信的数据。这时它会出现一个阶梯状的状态。如果是这么一个状态的数据直接应用到电控层面，那么夸张一点，我们的云台会一抖一抖的，所以这个时候滤波的作用就出来了。它能让阶梯变为。一条相对平滑的曲线，![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230112110652.png)\n这就是卡尔曼滤波在电控层面应用的重要性。\n\n### 那么如何使用卡尔曼滤波在电控层面\n\n>我们现在只讲解一下在一维层面如何应用卡尔曼滤波。二维以上的由于需要用到矩阵，但原理差不多。如果想了解，可以自行查找资料。\n\n设置一个场景，我们电控组要求视觉组的同学通过摄像机测量我方机器人与对方机器人装甲板的相对距离。视觉的同学实现了这个功能，将数据发送给了电控，那么作为一名电控我们应该如何利用卡尔曼滤波处理这个数据呢？分为以下几步。\n\n- 选择观测值y和状态值x\n- 建立方程\n- 代入数据进行计算\n\n那么应用在上述场景该如何实现。我们要估计相对距离，相对距离就是我们的估计值，视觉的同学已经给我们发了相对距离，我们可以把视觉发来的相对位置直接作为观测值，我们的估计值与观测值相同符合线性关系\n$$\ny = x\n$$\n现在我们开始构建方程，现在我们拿出状态方程和观测方程作为模板套参数\n$$x_k= Ax_{k -1} + Bu_K$$$$y_k = Cx_k$$\nC的值已经确定了为1，现在我们确定A的数值由于系统并没有任何输入所以状态方程可以变为$$x_k = Ax_{k -1}$$这时我直接认为A的数值就是1就可以了，为什么是这样我也没想通。但是确实都是1，等我哪天想通了我再告诉你们为什么。\n\n当我们拥有了视觉的同学发来的数据以及状态方程输出方程A和C的数值。我们直接代入到卡尔曼滤波的方程。Q和R的数值你要自己定，怎么定看你自己。![1](./kalman-filter-的个人理解/attachment/Pasted%20image%2020230111145727.png)，最后计算就完事了。\n\n>这就是卡尔曼滤波的所有内容，笔者能力有限，肯定有很多谬误，有问题请指出。  \n>\n>参考资料\n>[什么是卡尔曼滤波器 (Kalman Filters) ？](https://www.bilibili.com/video/BV1V5411V72J?p=1&vd_source=fb54463fa9160b349a7111ad9b7afbf8)  \n>[RM电控组培训视频](https://www.bilibili.com/video/BV1cJ411K7Na?p=11&vd_source=fb54463fa9160b349a7111ad9b7afbf8)\n>[B站讲的最好的卡尔曼滤波器-目标追踪课程](https://www.bilibili.com/video/BV1Ux4y1G7j6/?spm_id_from=333.337.search-card.all.click&vd_source=fb54463fa9160b349a7111ad9b7afbf8)\n","slug":"kalman-filter-的个人理解","published":1,"updated":"2023-08-14T04:33:05.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clladvehf000357i0ge54g051","content":"<blockquote>\n<p><strong>该文档归山东理工大学齐奇战队所有</strong> 本文作者为原落尘，邮箱为<a href=\"mailto:yuanluochen@foxmail.com\" class=\"email\">yuanluochen@foxmail.com</a>，笔者能力有限，如有问题，请您指出.</p>\n</blockquote>\n<h2 id=\"什么是滤波\">什么是滤波</h2>\n<p><strong>卡尔曼滤波</strong>，看起来十分高大尚的一个算法，但是当我们把卡尔曼这个修饰语去掉就变成了<strong>滤波</strong>。这一刻就突然间有一种灵光一闪的感觉，这时我们突然发现，“哦，它是一种滤波啊，就这？”</p>\n<figure>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108154034.png\" alt><figcaption>1</figcaption>\n</figure>\n<p>但是，之前的我作为一名小白，我甚至连滤波到底是什么我都不知道。我第一提出这个问题“什么是滤波，它有什么用”,我记得是我在阅读大疆robotMaster官方代码时提出了这个问题我记得当时的代码是这样的<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108155020.png\" alt=\"1\"><br>\n当时的我就提出了这个疑问，“滤波到底有什么用，为什么要将设置的数值经过滤波处理一下，如果没有滤波处理它会变成什么样子”，后来的我理解了，我也悟了。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109225734.png\" alt=\"1\"></p>\n<p>在真实世界中，当我们想通过一个传感器测量一个数据，但是传感器测量的数值总有一些误差，比如我们想通过一个可以测量距离的传感器测量当前位置与墙之间的距离<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112121821.png\" alt=\"1\">恰巧我们有两个传感器，一个精度极高，价格极贵；一个精度还可以，但价格十分亲民，这时候，我们使用这两个传感器测量距离，我们将测量的结果绘制一张图纸。</p>\n<p>在最理想的状态下，我们希望图纸是如下状态，他是一个稳定的直线 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108161212.png\" alt=\"1\"></p>\n<p>但是在计算机世界总是有一点差强人意，它是这样一个状态，是由一个个小点点构成的<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108161823.png\" alt=\"1\"><br>\n这是因为什么呢，因为在计算机的世界中，一切都是离散的，不是连续的，不管是计算机还是传感器它们计算数据都是在时钟周期的影响下驱动的，时钟每运行一次，程序就会运行一次，它并非想理想状态下是一个由一条线构成的连续的状态，而是由一个又一个小点构成的离散状态。</p>\n<p>但是想上图这样的图纸是真实的吗？结论是还不够真实，真实的状态比这还要难受，它更加的混乱。 如下面两张图所示 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108174540.png\" alt=\"1\"> 我们看到这张图已经感觉十分混乱了，但是还有更混乱的，如下图<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108172311.png\" alt=\"1\"><br>\n当我们看到者两张图纸，不知道你有没有一个疑问，为什么是混乱的。这个问题答案很简单，<strong>我们的传感器不咋地</strong> <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108174304.png\" alt=\"1\"><br>\n原因就这么简单，没什么其他的原因，精度比较高的传感器还好，数据混乱度还可以接受，但是传感器精度不高，哎，不想说什么了，一言难尽。</p>\n<p>但是我们发现，不管数据再怎么混乱，它们都有一个共同的特点，数据点的分布都以一个统一的数值为中心。当我们看到了共同点，我们再看看不同点，相比于第一个，第二个明显更加混乱，我们用更加专业的语言来分析这个问题，这时我们引入<strong>高斯分布</strong>的概念，可能有一些人不理解高斯分布，那么那我们说一个更加通俗易懂的，<strong>正态分布</strong>，这个名词我们高中就学过，可能有些人听到这个词语有一点陌生，但是我把下面这一张图拿出来应该立刻就想起来了<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108173559.png\" alt=\"1\"><br>\n当我看到这张图时，我脑中立刻回忆起高中的痛苦岁月，真难忘。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109225958.png\" alt=\"1\"></p>\n<p>现在我们引入了高斯分布，或者说正态分布，这时我们在分析上面的两个混乱的图像，明显第二张图像比第一张方差更大。精度更高的传感器，方差小，精度低的，方差大，数据一言难尽。</p>\n<h3 id=\"开始讲滤波器了\">开始讲滤波器了</h3>\n<p>我们如何解决数据分散，方差大的问题呢？这时我们就要用到滤波器了，哎，这么长时间了，终于开始讲什么是滤波器了。</p>\n<p>那么什么是滤波器呢？拿这几张图为例<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108175411.png\" alt=\"图一\"> <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108172311.png\" alt=\"图二\"> <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108161823.png\" alt=\"图三\"><br>\n简单来讲，<strong>滤波器就是让图一图二逆天改命为图三的神器</strong>，滤波器能将传感器得到的真实数据进行处理，让数据更加符合要求，更加平滑，这就相当于对数据进行淬体，化凡为仙，心动了吧。 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108180141.png\" alt=\"1\"></p>\n<p>这就是滤波器，回到我之前的那个问题，大疆官方的代码为什么要对数据进行滤波处理，答案一目了然，为了让数据更加平稳，更加平滑，更加符合我们开发者的需求。而卡尔曼滤波作为滤波的佼佼者，它的能力更加强大，它能降低方差，融合传感器的数据，让数据更加集中，能让数据更加贴近真实。</p>\n<h2 id=\"state-observer-状态观测器\">State Observer 状态观测器</h2>\n<h3 id=\"卡尔曼滤波是一种状态观测器\">卡尔曼滤波是一种状态观测器</h3>\n<p>卡尔曼滤波器是可以实现最优估计的状态观测器。刚看到这句话可能有一点复杂。但是不要着急。我们先从状态观测器开始讲起，然后我们在开始讲解卡尔曼滤波</p>\n<h3 id=\"什么是状态观测器\">什么是状态观测器</h3>\n<p>在讲解相对复杂的卡尔曼滤波之前，我们先从初级关卡入手，理解一下什么是状态观测器。讲一个比较有趣的例子</p>\n<p>假如你喜欢一个女孩，但是你不知道对方到底对你是否有那方面想法，作为一名理工男，你渴望能够通过一种传感器来直接判断对方的想法，但是没有啊，这个时候你十分的苦恼<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108184550.png\" alt=\"1\"><br>\n那光苦恼可不行，那这个问题该怎么解决呢？这时我们想到了我们突然间想到了状态观测器。“有办法了”，为确定对方是否喜欢你，这个<strong>估计值</strong>，你要通过对对方施加一些<strong>激励</strong>，或者说是与对方说几句话，通过观察对方的反映或者<strong>响应</strong>来判断对方的想法将反映与自己的预期进行对比，得出结论对方到底喜不喜欢你。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/ll.png\" alt=\"1\"></p>\n<p>没想到吧，这么符合逻辑。不愧是理工男，现在我们回顾一下上面那个例子，反思一下什么是状态观测器，状态观测器是什么，<strong>状态观测器是一个可以通过测量一个间接值来估计需求值的一种神器。</strong></p>\n<h3 id=\"状态观测器到底是怎么工作的\">状态观测器到底是怎么工作的</h3>\n<p>现在我们开始正经的讲解一下状态观测器吧，还是以一个例子启头，作为一名理工男，不研究火箭对得起自己吗，现在我们开始研究一下火箭<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108192936.png\" alt=\"1\">作为一名未来的火箭工程师，我们要研究控制火箭尾部火焰温度，学过一点控制相关的东西的同学都知道，如果想要控制一个量，我们就必须要测量这个量，但是火箭啊这个东西温度太高了，如果你用一个温度计，放到火焰里来测量火焰的温度，这显然是不现实，温度计必被烤化，为了解决这个问题我们该如何处理呢，这时我们想到了状态观测器，利用状态观测器来估计火焰温度。</p>\n<p><img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108200147.png\" alt=\"1\">当我们看到这张图纸，（这是我自己画的，画的可能有一点抽象，但是我感觉可以接受）这是一个火箭尾部的简化图纸，外面为一个外壳，火焰从内部喷射而出，我们要测量火焰温度，实际就是测量上图的内层温度，但是内层温度无法直接测量，所以可以利用状态观测器通过测量外层温度，估计内层温度，但是这是怎么实现的呢？</p>\n<p>我们分析这个系统我们发现，火箭尾焰的温度，是受燃料控制，燃料作为尾焰这个系统输出的输入，而我们要估计的量尾焰温度被称为这个系统的状态量，如下图所示。 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109103344.png\" alt=\"1\"></p>\n<p>那么如何估计尾焰温度这个数值呢？如果你是一名优秀的理工人，你可以对这个系统进行建模，构建其数学模型，我们将系统输入，即燃料作用于你构建的数学模型，然后数学模型输出的状态量就是你估计的尾焰温度<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109134209.png\" alt=\"1\"></p>\n<p>现在问题来了这样就计算出来了尾焰温度，那么系统输出，即你要测量的外层温度有什么用吗？那根本没用啊，怎么可能，你真的觉得你是一个数学天才吗，你自己推导的数学模型真的是符合真实系统的吗？怎么可能，真实系统怎么可能那么美好，系统中存在许多外界因素干扰着你的系统，你构建的数学模型与真实系统还是有些许差异，所以我们该如何处理这个问题呢？这时候测量的外界温度的作用就出来了，我们可以通过使外界温度与估计的外界温度，数值相等，来使估计的尾焰温度与实际尾焰温度相近。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109135140.png\" alt=\"1\"></p>\n<blockquote>\n<p>先提一个概念，<span class=\"math inline\">\\(x\\)</span>为状态，我们在<span class=\"math inline\">\\(x\\)</span>头上加一个^，即<span class=\"math inline\">\\(\\hat{x}\\)</span>，我们称之其为估计状态</p>\n</blockquote>\n<p>即让<span class=\"math inline\">\\(y = \\hat{y}\\)</span>相等实现<span class=\"math inline\">\\(x=\\hat{x}\\)</span>，这样就实现了测量内部温度的目标，那么如何实现这个目标呢？如何让系统输出与估计的系统输出相同呢？方法很简单，利用反馈控制，通过反馈控制来实现误差的缩小<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109161402.png\" alt=\"1\"> 当误差<span class=\"math inline\">\\(e = error = y -\\hat{y}\\)</span>数值趋近与零这时估计的状态量十分接近真实的状态值。</p>\n<h3 id=\"状态观测器公式推导\">状态观测器公式推导</h3>\n<p>口说无凭，毫无依据不符合理工男的原则，我们要对上述结论进行公式推导。在推导公式前，我们先要讲一讲状态方程与观测方程。</p>\n<h4 id=\"浅讲状态方程和观测方程\">浅讲状态方程和观测方程</h4>\n<blockquote>\n<p>什么是状态方程，什么是观测方程？这个问题我也很难解答，以下的讲解可能有大量的问题。如果有问题请提出</p>\n</blockquote>\n<p>现在我来浅说一下这两个方程，不废话上方程，先上一个连续系统的状态方程和观测方程</p>\n<blockquote>\n<p>我先说一下连续和离散的概念，浅说一下，连续系统可以理解为由一条一条线构成的<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109142504.png\" alt=\"1\"> 而离散系统可以理解为由一个又一个点构成的<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109142637.png\" alt=\"1\">计算机内都是离散系统，但是为了推导公式方便，我们在连续系统内推导公式</p>\n</blockquote>\n<p>状态方程<br>\n<span class=\"math display\">\\[\nx&#39; = A x + B  u\n\\]</span> 观测方程 <span class=\"math display\">\\[\ny = C x\n\\]</span> 但我们刚看到公式可能不知道如何下手，请听我慢慢道来，不用考虑太多你可以把状态方程当成描述系统状态随时间的变化与当前状态和系统输入之间的线性关系，观测方程就是描述系统输出与当前状态之间的关系的数学表达式。那么如何构建一个状态方程和观测方程呢？说实话，在下能力有限，很难将其讲清楚，所以请见谅<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109192900.png\" alt=\"1\"> 但是这不影响我们验证状态观测器的任务。</p>\n<h4 id=\"正式开始推导公式的正确性了\">正式开始推导公式的正确性了</h4>\n<p>现在假设我们可以对系统构建其状态方程以及其观测方程了，现在我们的图就变成了这样<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109205237.png\" alt=\"1\"> 这样是不是更符合理工男的形象了，都是数学公式，NB吧。</p>\n<p>回到我们最初的目的，我们要验证随着<span class=\"math inline\">\\(e = y - \\hat{y}\\)</span>趋近于零，<span class=\"math inline\">\\(\\hat{x}\\)</span> 趋近于<span class=\"math inline\">\\(x\\)</span>。那么我们该如何验证该结论呢？<br>\n首先，如果想验证<span class=\"math inline\">\\(\\hat{x}\\)</span> 趋近于x，我们就可以验证<span class=\"math inline\">\\(e_{obs} = x - \\hat{x}\\)</span>趋近于零，这样我们可以通过验证<span class=\"math inline\">\\(e_{obs} = x - \\hat{x}\\)</span>趋近于零来进而验证<span class=\"math inline\">\\(\\hat{x}\\)</span>趋近于<span class=\"math inline\">\\(x\\)</span>。这时我们拿出真实系统的方程与我们自己构建的系统方程<br>\n真实系统的方程 <span class=\"math display\">\\[ x&#39; = Ax + Bu\\]</span> <span class=\"math display\">\\[y = Cx \\]</span> 自己构建的数学模型 <span class=\"math display\">\\[\\hat{x}&#39; = A\\hat{x} + Bu + K(y - \\hat{y})\\]</span> <span class=\"math display\">\\[\\hat{y} = C \\hat{x}\\]</span> 我们要求解<span class=\"math inline\">\\(x - \\hat{x}\\)</span>的数据，我们将真实系统方程与自己构建的数学模型对应相减</p>\n<p><span class=\"math display\">\\[\ne_{obs} = x - \\hat{x}\n\\]</span> <span class=\"math display\">\\[x&#39;- \\hat{x}&#39; = A(x - \\hat{x}) + Bu - Bu - K(y - \\hat{y})\\]</span> <span class=\"math display\">\\[\ny - \\hat{y} = C(x - \\hat{x})\n\\]</span> 将方程化简 <span class=\"math display\">\\[\ne_{obs}&#39; = Ae_{obs} - KCe_{obs}\n\\]</span> 再化简一下 <span class=\"math display\">\\[\ne_{obs}&#39; = (A-KC)e_{obs}\n\\]</span> 再对方程求积分求出<span class=\"math inline\">\\(e_{obs}\\)</span>的数值 <span class=\"math display\">\\[\ne_{obs} = e^{（A - KC）t}e_{obs}(0)\n\\]</span> 这时我们就解出了<span class=\"math inline\">\\(e_{obs}\\)</span>，即随时间变化估价值<span class=\"math inline\">\\(\\hat{x}\\)</span>与真实值之间的关系<span class=\"math inline\">\\(\\hat{x}\\)</span>。我们发现<span class=\"math inline\">\\(e_{obs}\\)</span>与时间的关系是一个指数关系，这就意味着，如果<span class=\"math inline\">\\(A -KC &lt; 0\\)</span>,<span class=\"math inline\">\\(e_{obs}\\)</span>与时间的关系如下图。 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109221302.png\" alt=\"1\"> 它会随时间不断趋近于零。</p>\n<h4 id=\"增益k到底有个什么用\">增益K到底有个什么用</h4>\n<p>但是当我们看到这个结论。我有一个好奇就产生了，<strong>反馈真的有用吗？</strong> 当我第一次推导出上述公式时我就产生了这个好奇，如果没有K项，没有反馈，如下图<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109222504.png\" alt=\"1\">更改一下公式。 <span class=\"math display\">\\[\ne_{obs} = e^{At} e_{obs}(0)\n\\]</span> 此时没有反馈控制，如如果<span class=\"math inline\">\\(A &lt; 0\\)</span>依旧图像为<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109222813.png\" alt=\"1\">那现在问题来了，我们反馈控制的意义在那里。我之前可能没有提过，系统状态方程，观测方程的系数<span class=\"math inline\">\\(A\\)</span> <span class=\"math inline\">\\(B\\)</span> <span class=\"math inline\">\\(C\\)</span>并非为真实系统的数值，而是我们人为规定的数值，它自身是存在误差的，公式<span class=\"math inline\">\\(e_{obs} = e^{(A -KC)t}e_{obs}(0)\\)</span>的A的数值并非真实数值，之前的推导，是根据状态方程观测方程完全正确的情况考虑的，我们无法通过一个非真实的系数<span class=\"math inline\">\\(A\\)</span>来控制<span class=\"math inline\">\\(e_{obs}\\)</span>的衰减率，所以我们要外加一个增益来控制<span class=\"math inline\">\\(e_{obs}\\)</span>衰减率，实现估计值与真实值趋近。</p>\n<p>但是现在问题又来了，我们如何调整增益<span class=\"math inline\">\\(K\\)</span>的数值呢？这时候卡尔曼滤波器就登场了。卡尔曼滤波可以自动调整增益K的数值，实现最优估计。</p>\n<h2 id=\"卡尔曼滤波可以实现最优估计的状态观测器\">卡尔曼滤波，可以实现最优估计的状态观测器</h2>\n<p>现在咱们终于开始讲解卡尔曼滤波了。朋友们恭喜你，终于到了这一步。你离解放不远了<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109234638.png\" alt=\"1\"></p>\n<p>之前我们讲解了状态观测器。我们提到了如何调增益K，我们回想起我们调参的经历。哎，不堪回首。但是卡尔曼滤波帮助我们在一定程度上解决了这个问题。它能帮助我们调整增益K，已实现最优估计。但是如何实现呢？请听我细细道来。</p>\n<p>我们还是从一个例子开始，假设某一个地方举行了一场汽车自动驾驶的比赛。这场比赛的规则是这样的：你可以通过各种传感器测量汽车当前的状态，如利用GPS测量当前位置，利用IMC测量加速度，利用汽车自带的里程计测量汽车的相对移动位置。通过这些传感器来让自动驾驶的汽车在不同地形的路面行使1km，最后我们测量汽车自动行使的相对距离。计算每支队伍的平均距离，平均距离最接近1km的，相对距离的方差最小的，队伍获胜</p>\n<p>有三名选手参数，我们将其结果绘制到下图中。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109232852.png\" alt=\"1\">一目了然选手C赢了。他相较与选手A与选手C方差实现了位置在均值处并且方差极小。作为一名未来的工程师，我们也想像选手C一样获得比赛的胜利，那么为什么选手C更胜一筹呢，如果仅使用GPS，IMU或里程计不对数据进行滤波操作，数据可能会随时间积累变得越来越虚假。简单来讲，就拿汽车自带的里程计为例，假如里程计通过计算汽车轮毂转动的圈数来计算汽车的相对运动距离，但是我们的路面不够平稳，它是如下图这个状态。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110024028.png\" alt=\"1\">当我们看到这张图纸，我们就明白了，在这种路面下汽车里程计是会有偏差的，而且随时间的积累，误差会越来越大，不管是汽车里程计、GPS还是IMC都有这种类似的问题。我们把这些影响各种各样的影响因素称之为<strong>噪声 Noise</strong>，那么我们如何降低噪声，让自动驾驶的汽车最终结果实现均值在1km并且方差极小呢？这时候卡尔曼滤波的作用就出来了。下面请听我细细道来</p>\n<h3 id=\"卡尔曼滤波的详解\">卡尔曼滤波的详解</h3>\n<p>现在我们分析汽车系统，系统如下<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110000834.png\" alt=\"1\"></p>\n<h4 id=\"x_kx_k-1和y_k是什么浅讲一下离散系统下的状态方程和观测方程\"><span class=\"math inline\">\\(x_k\\)</span>、<span class=\"math inline\">\\(x_{k-1}\\)</span>和<span class=\"math inline\">\\(y_k\\)</span>是什么，浅讲一下离散系统下的状态方程和观测方程</h4>\n<p><strong>先不考虑<span class=\"math inline\">\\(w_k\\)</span>和<span class=\"math inline\">\\(v_k\\)</span></strong>，可能有的同学看到<span class=\"math inline\">\\(x_k\\)</span>或<span class=\"math inline\">\\(y_k\\)</span>有一点陌生，该状态方程为在离散系统下的构建的状态方程和观测方程。<span class=\"math inline\">\\(x_k\\)</span>表示在当前时间下的状态，<span class=\"math inline\">\\(x_{k-1}\\)</span>为上一个时间下的状态。同理，<span class=\"math inline\">\\(y_k\\)</span>表示当前时间下的系统输出，<span class=\"math inline\">\\(u_k\\)</span>表示当前状态下的系统输入。</p>\n<p>之前在连续系统下，我们的状态方程为<span class=\"math inline\">\\(x&#39;= Ax + bu\\)</span>而现在系统的状态方程为<span class=\"math inline\">\\(x_k = Ax_{k-1} + Bx_k\\)</span>，我们发现他们之间有一点不同，连续系统下，状态方程表示状态的微分与状态和系统输入之间的线性关系，而离散系统下，则为当前时间状态与上一个时间步的状态和系统当前时间下的输入之间的线性关系。这感觉有一点不太对劲儿。在离散系统下为什么不像连续系统下为当前状态的微分与系统输入和当前状态之间的线性关系呢？<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110003415.png\" alt=\"1\"></p>\n<p>原因很简单，在离散系统下没有微分的概念，在线性系统下状态方程以一阶微分方程的形式呈现，而在离散系统下则以一阶差分方程的形式呈现。</p>\n<p>那么什么是一阶差分方程呢？简单来讲就是含上一个时间步数值减去当前时间数值的方程。 <span class=\"math display\">\\[ x_{当前时间} - x_{上一个时间}\\]</span> 这个在离散系统下就相当于微分，这是一阶的差分，二阶差分就是<span class=\"math inline\">\\(x_{当前时间} - x_{上上一个时间}\\)</span>。在离散系统下，就通过差分方程代替线性系统下的微分方程来分析系统构建状态方程和观测方程。</p>\n<p>现在我们分析一下离散系统下的状态方程和观测方程，方程如下 <span class=\"math display\">\\[\nx_k = A x_{k-1} + Bu_k\n\\]</span> <span class=\"math display\">\\[\ny_k = Cx_k\n\\]</span> 这个方程描述的很直观，先看状态方程，状态方程表示我们可以利用上一时间的状态和当前时间的输出来预测当前时间的状态。而观测方程表示，可以通过当前时间布的状态来计算当前时间的输出。很直观吧。</p>\n<h5 id=\"噪声后的世界\">噪声后的世界</h5>\n<p>之前我们提到了噪声Noise的概念。现在我们将噪声加入到我们的方程中让我们的方程更加趋近真实。</p>\n<p>在我们是难以通过数学公式去测量一个噪声，所以我们统一假设一切噪声都符合零均值的高斯分布或正态分布。 <span class=\"math display\">\\[\nNoise \\sim N(0, Q)\n\\]</span> 我们将噪声加入我们的状态方程中，我们的状态方程就变成了这个样子 <span class=\"math display\">\\[\nx_k = A x_{k-1} + Bu_k + w_k\n\\]</span> <span class=\"math display\">\\[\ny_k = Cx_k  + u_k\n\\]</span> 我们在状态方程中加入了<strong>过程噪声</strong> <span class=\"math inline\">\\(w_k\\)</span>，该噪声是由一些外界因素影响产生的，例如地面不平。在观测方程中加入<strong>观测噪声</strong><span class=\"math inline\">\\(u_k\\)</span>，该噪声是由观测器自身引起的，例如GPS精度低，性能差。这两种噪声都符合零均值高斯分布。 <span class=\"math display\">\\[\nw_k \\sim N(0, Q)\n\\]</span> <span class=\"math display\">\\[\nu_k \\sim N(0,R)\n\\]</span> 过程噪声为<span class=\"math inline\">\\(w_k\\)</span>为零均值方差为Q的高斯分布，观测噪声<span class=\"math inline\">\\(u_K\\)</span>为零均值方差为R的高斯分布。</p>\n<blockquote>\n<p>方差 Q 和方差 R 是由你自己规定的，在工程中这就是你未来要调的参数。类似于PID的P参数、I参数和D参数，我们如何调整这两个参数，最后我会进行讲解</p>\n</blockquote>\n<p>当我们加入了噪声，我们发现我们的系统变得更加的混乱。从一个相对稳定的一条线，变为混乱的世界。 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110012215.png\" alt=\"1\"> <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110012240.png\" alt=\"1\"> 此时我应该意识到一点，在噪声的影响下，我们测量的数据是无法反映真实数据的。但是如果我们知道汽车模型，对其构建数学模型<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110015019.png\" alt=\"1\">我们将系统输入作用于我们构建的数学模型中，虽然利用数学模型得出的估计值肯定与真实值相差甚远，但是我们可以利用卡尔曼滤波将真实系统的测量值和数学模型得出的估计状态值相融合，得出最优估计值。</p>\n<h5 id=\"直观描述卡尔曼滤波是如何得到最优估计值\">直观描述卡尔曼滤波是如何得到最优估计值</h5>\n<p>当我们的系统中带有均值为0，方差为R的过程噪声，以及均值为0,方差为Q的观测噪声。此时上一个时间的状态呈现为均值为<span class=\"math inline\">\\(\\hat{x}_{k -1}\\)</span>的高斯分布。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111110934.png\" alt=\"1\">该图纵轴为该状态出现的概率，横轴为状态。当我们拥有了上一个时间的估计状态，我们可以吧上一个时间的状态代入状态方程<span class=\"math inline\">\\(\\hat{x_k} = \\hat{x_{k -1}} + Bu_k + w_k\\)</span>得出当前时刻的估计状态。由于误差是会随时间累积，这就代表着当时时间的高斯分布的方差会更加大。如下图。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111111436.png\" alt=\"1\">这时我们将传感器的数值，即，观测值<span class=\"math inline\">\\(y_k\\)</span>加入到这张图中，它也是符合高斯分布，如下图<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111111906.png\" alt=\"1\"></p>\n<h6 id=\"数据融合的本质\">数据融合的本质</h6>\n<p>当我们看到上面那张图。我们有了利用上一个时间的估计值代入状态方程得到的当前时间的估计值，以及通过传感器得到的当前时刻的观测值。这时我们可以通过将两个数据进行<strong>数据融合</strong>，得到当前时间的最优估计值。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111113730.png\" alt=\"1\">从图中我们可以直观的感受到最优估计值方程更加的小，更加符合我们的需求。</p>\n<p>但是数据融合是如何实现的？很简单，如果你学过《概率论》你会知道一点<strong>两个事件发生的概率相乘=两件事同时发生的概率</strong><img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111115708.png\" alt=\"1\"></p>\n<p>这就是数据融合的本质。就是把多个数据的概率函数相乘，计算其同时发生的概率。数据融合后的结果如上图。方差小，更加符合真实。我们如果有更多的传感器，而且传感器的测量值与你要估计的状态之间存在<strong>线性关系</strong>,如我们的输出方程一样。 <span class=\"math display\">\\[\ny_k = Cx_k + u_k\n\\]</span></p>\n<blockquote>\n<p>线性关系是什么，在我看来就是数学方程中仅存在一次方项或零次方项的方程，如 <span class=\"math display\">\\[y = kx + b\\]</span></p>\n</blockquote>\n<p>我们就可以对其进行数据融合，进一步降低其方差进一步提升数据的精准度，让数据更加符合我们的需求。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111115921.png\" alt=\"1\"></p>\n<p>这就是卡尔曼滤波能够实现最优估计的原因，这种滤波NB吧。它能通过融合传感器的数据，降低数据的方差，提升数据的精准度，让我们比较便宜的传感器的的能力不逊于一个价格比较高的传感器。</p>\n<h4 id=\"解析卡尔曼滤波方程探讨卡尔曼滤波如何实现\">解析卡尔曼滤波方程，探讨卡尔曼滤波如何实现</h4>\n<p>当我们对卡尔曼滤波已经有了一点的了解。这时候我们就要上方程了。卡尔曼滤波的方程如下 <span class=\"math display\">\\[\n\\hat{x_k} = A\\hat{x_{k -1}} + Bu_k + K_k(y_k - C(Ax_{k-1} + Bu_k))\n\\]</span></p>\n<p>但我们看到这个方程的时候可能有一点蒙，但是我们回想起我之前提到的一个观点，<strong>卡尔曼滤波是一种状态观测器</strong>。现在我们把状态观测器的方程拿出来 <span class=\"math display\">\\[\n\\hat{x_{k+1}} = A\\hat{x_k} + Bu_k + K(y_k- \\hat{y_k})\n\\]</span> <span class=\"math display\">\\[\n\\hat{y_k} = C\\hat{x_k}\n\\]</span> 即 <span class=\"math display\">\\[\n\\hat{x_{k+1}} = A\\hat{x_k} + Bu_k + K(y_k- C\\hat{x_k})\n\\]</span></p>\n<p>当我们对比两个方程，我们发现其有很多相似之处。卡尔曼滤波在功能上可以像原始的状态观测器一样，通过观测一个值来估计当前时刻的状态，但它是更强的状态观测器，它可以估计当前时刻的最优值，实现最优估计的目标，但是它是怎样实现这一点的？</p>\n<p>之前我们在状态观测器中提及过一个问题，状态观测器的增益<span class=\"math inline\">\\(K\\)</span>到底该如何调整实现最优的增益。在状态观测器上我们只能像调整PID参数时，那样一次一次的尝试，但是卡尔曼滤波为我们解决了这个问题，<strong>它可以为我们动态调整增益<span class=\"math inline\">\\(K\\)</span>，最终找到最优的增益实现最优估价</strong>。这种增益我们称其为<strong>卡尔曼增益</strong>。</p>\n<p>先不讨论卡尔曼增益如何实现，我们回到卡尔曼滤波方程</p>\n<p><span class=\"math display\">\\[\n\\hat{x_k} = A\\hat{x_{k -1}} + Bu_k + K_k(y_k - C(Ax_{k-1} + Bu_k))\n\\]</span></p>\n<p>我们回顾之前的讲解，再仔细分析卡尔曼滤波方程，我们可以把卡尔曼滤波方程分为两部分一部分为<strong>预测</strong>，一部分为<strong>更新</strong>。 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111131147.png\" alt=\"1\"> 前一部<span class=\"math inline\">\\(A\\hat{x_{k-1}} + Bu_K\\)</span>得出预测值<span class=\"math inline\">\\({\\hat{x_{k-1}}}^-\\)</span>将预测值代入更新<span class=\"math inline\">\\(K_k(y_k -C(Ax_{k-1} + Bu_K))\\)</span>，对得出的数据进行修正。卡尔曼增益自动调整，最终实现最优估计。</p>\n<p>现在我们对这两个过程进行一下详细的分析，并代入实现卡尔曼增益动态调整的方程，方程如下。</p>\n<ul>\n<li>预测部分<span class=\"math display\">\\[\\hat{x}_{k}^{-}=A \\hat{x}_{k-1}+B u_{k}   \\]</span><span class=\"math display\">\\[P_{k}^{-}=A P_{k-1} A^{T}+Q\\]</span></li>\n<li>更新部分<span class=\"math display\">\\[K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}+R}\\]</span><span class=\"math display\">\\[\\hat{x}_{k}=\\hat{x}_{k}^{-}+K_{k}\\left(y_{k}-C \\hat{x}_{k}^{-}\\right)\\]</span><span class=\"math display\">\\[P_{k}=\\left(I-K_{k} C\\right) P_{k}^{-}\\]</span></li>\n</ul>\n<blockquote>\n<p>这里的P表示状态的方差，之前再讲解状态高斯分布一直在一维空间考虑，但是在工程中我们往往在多维空间下考虑。所以这时候就要用<strong>协方差矩阵</strong>来代替方差。</p>\n</blockquote>\n<p>现在我们相较于最初版本的卡尔曼滤波方程加入了三个关于动态调整卡尔曼增益的方程程，即预测部分的<span class=\"math inline\">\\(P_{k}^{-}=A P_{k-1} A^{T}+Q\\)</span>，以及更新部分的<span class=\"math inline\">\\(K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}+R}\\)</span>和<span class=\"math inline\">\\(P_{k}=\\left(I-K_{k} C\\right) {P_{k}}^-\\)</span>，我们看到这三个方程可能有一点蒙，说实话我也没完全理解透彻，所以为了不误人子弟。我就不对其进行细讲，只讲一下每个方程的用途。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/Pasted%20image%2020230111141014.png\" alt=\"1\"></p>\n<p>现在我们对整体进行分析，先讲一下每一个方程的作用，然后对整体进行分析，理解卡尔曼滤波的降低方差，优化估计的实现。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111143846.png\" alt=\"1\">在预测部分我们利用上一个时间的估价状态和上一个时间的协方差矩阵，计算出当前时刻的估计状态和当前时刻的协方差矩阵。将计算得到的当前时刻的协方差代入更新部分来更新卡尔曼增益数值，然后将调整的卡尔曼增益数值，代入卡尔曼滤波方程预测部分，来调整预测值，以得到最优估计值。最后更新当前时刻的协方差矩阵。这就是卡尔曼滤波的工作原理。</p>\n<h3 id=\"调参开始了\">调参开始了</h3>\n<p>现在当我们理解了卡尔曼滤波的工作原理。我们来到了痛苦的调参环节。我们要调两个参数过程噪声协方差矩阵<span class=\"math inline\">\\(R\\)</span>和观测噪声协方差矩阵<span class=\"math inline\">\\(Q\\)</span>，</p>\n<p>现在我们来讲一下这两个参数到底代表着什么。卡尔曼滤波优化传感器数值，其内部思想可以认为是，我们开发者不信任传感器数值，也不信任通过数学模型得出的估计值，我们要对两者进行数据融合，得到更加真实的结果，这就是卡尔曼滤波。实际上在我们调参时，也根据这个思想，调整参数<span class=\"math inline\">\\(R\\)</span>和<span class=\"math inline\">\\(Q\\)</span>实际上就是调整我们开发者，是更相信状态方程预测的数值，还是更相信传感器的数值，下面我们来相信讲一下这一点。</p>\n<p>我们拿出之间我们列出的方程<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111145727.png\" alt=\"1\"> 极端一点，我们现在让过程噪声的协方差矩阵R趋近于零。此时我们将这个数值代入方程中，经历一次计算。卡尔曼增益变为<span class=\"math display\">\\[K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}}\\]</span>化简一下，变为<span class=\"math display\">\\[K_{k}=\\frac{1}{C }\\]</span>这时我们将卡尔曼增益代入代入卡尔曼滤波的更新部分，此时其变为<span class=\"math display\">\\[\\hat{x}_{k}=\\hat{x}_{k}^{-}+\\frac{1}{C }\\left(y_{k}-C \\hat{x}_{k}^{-}\\right)\\]</span>化简一下由于变为<span class=\"math display\">\\[\\hat{x_k} = \\frac{y_k}{C}\\]</span>这时我们的估计值完全取决与观测值。此时代表着我们开发者完全传感器。相反，如果观测噪声的协方差矩阵Q趋近于0，此时代表我们开发完全信任预测值。简单来讲，<strong>R越小Q越大，越信任观测值；R越大Q越小，越信任预测值</strong></p>\n<p>那么调整过程噪声协方差矩阵<span class=\"math inline\">\\(R\\)</span>和观测噪声协方差矩阵<span class=\"math inline\">\\(Q\\)</span>会对我们的估计状态<span class=\"math inline\">\\(x\\)</span>造成怎样的影响呢？如果我们调整好<span class=\"math inline\">\\(Q\\)</span>与<span class=\"math inline\">\\(R\\)</span>，会使我们的估计状态<span class=\"math inline\">\\(\\hat{x}\\)</span>更快到达最优估计状态。如下图<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111154510.png\" alt=\"1\"> <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111154603.png\" alt=\"1\">对比这两张图，我们明显可以感受到下面的图比上面更快到达最优估价状态，数值相较与上图更加的贴进真实。所以，作为一名开发人员，我建议你们一定要给我调好参数，不要半途而废。</p>\n<h2 id=\"卡尔曼滤波实战针对电控组\">卡尔曼滤波实战（针对电控组）</h2>\n<h3 id=\"为什么电控组要用卡尔曼滤波\">为什么电控组要用卡尔曼滤波</h3>\n<p>我刚学卡尔曼滤波时，我一直有一个问题，“为什么电控组要用卡尔曼滤波？”，可能你们对我提出这个问题感觉有一点莫名其妙，为什么我会提出这么稀奇古怪的问题。请听我细细道来。首先卡尔曼滤波在之前一直应用于自动瞄准。我们先说说自动瞄准大体是怎么实现的。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112103135.png\" alt=\"1\">大体是，视觉组识别到敌方装甲板，经过一系列计算，得出云台要转动的pitch轴和yaw轴的角度增量，将这个角度增量发给电控组，电控组再对视觉组发来的数据进行一次kalman滤波，将滤波后得出的数据实施在云台上。</p>\n<p>但是我一直都有一个疑问，为什么电控需要作卡尔曼滤波处理视觉的数据，我感觉没必要啊，视觉组已经给我那么好的数据了，电控组为啥要处理呢？不会乱处理让数据失真吗，没必要啊，是不是。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112103823.png\" alt=\"1\"> 但是后来我悟了，真有必要，原因是什么呢，视觉与电控的通信频率小于电控组自身运行频率。有点不说人话了是不是。我详说一下，假如视觉的mini PC与电控开发板之间的通信间隔时间为<span class=\"math inline\">\\(2ms\\)</span>，而电控开发板运行的时钟间隔为<span class=\"math inline\">\\(1ms\\)</span>，在视觉的同学看来，数据是这个样子的。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112110039.png\" alt=\"1\"> 但是在电控组开发看来却不是这样的。它是这样的<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112110127.png\" alt=\"1\"> 由于视觉与电控通信频率小于，电控自身时钟频率，所以在视觉与电控通信一次之后它会有一段时间，是没有数据的数据为上一次通信的数据。这时它会出现一个阶梯状的状态。如果是这么一个状态的数据直接应用到电控层面，那么夸张一点，我们的云台会一抖一抖的，所以这个时候滤波的作用就出来了。它能让阶梯变为。一条相对平滑的曲线，<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112110652.png\" alt=\"1\"> 这就是卡尔曼滤波在电控层面应用的重要性。</p>\n<h3 id=\"那么如何使用卡尔曼滤波在电控层面\">那么如何使用卡尔曼滤波在电控层面</h3>\n<blockquote>\n<p>我们现在只讲解一下在一维层面如何应用卡尔曼滤波。二维以上的由于需要用到矩阵，但原理差不多。如果想了解，可以自行查找资料。</p>\n</blockquote>\n<p>设置一个场景，我们电控组要求视觉组的同学通过摄像机测量我方机器人与对方机器人装甲板的相对距离。视觉的同学实现了这个功能，将数据发送给了电控，那么作为一名电控我们应该如何利用卡尔曼滤波处理这个数据呢？分为以下几步。</p>\n<ul>\n<li>选择观测值y和状态值x</li>\n<li>建立方程</li>\n<li>代入数据进行计算</li>\n</ul>\n<p>那么应用在上述场景该如何实现。我们要估计相对距离，相对距离就是我们的估计值，视觉的同学已经给我们发了相对距离，我们可以把视觉发来的相对位置直接作为观测值，我们的估计值与观测值相同符合线性关系 <span class=\"math display\">\\[\ny = x\n\\]</span> 现在我们开始构建方程，现在我们拿出状态方程和观测方程作为模板套参数 <span class=\"math display\">\\[x_k= Ax_{k -1} + Bu_K\\]</span><span class=\"math display\">\\[y_k = Cx_k\\]</span> C的值已经确定了为1，现在我们确定A的数值由于系统并没有任何输入所以状态方程可以变为<span class=\"math display\">\\[x_k = Ax_{k -1}\\]</span>这时我直接认为A的数值就是1就可以了，为什么是这样我也没想通。但是确实都是1，等我哪天想通了我再告诉你们为什么。</p>\n<p>当我们拥有了视觉的同学发来的数据以及状态方程输出方程A和C的数值。我们直接代入到卡尔曼滤波的方程。Q和R的数值你要自己定，怎么定看你自己。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111145727.png\" alt=\"1\">，最后计算就完事了。</p>\n<blockquote>\n<p>这就是卡尔曼滤波的所有内容，笔者能力有限，肯定有很多谬误，有问题请指出。</p>\n<p>参考资料 <a href=\"https://www.bilibili.com/video/BV1V5411V72J?p=1&amp;vd_source=fb54463fa9160b349a7111ad9b7afbf8\">什么是卡尔曼滤波器 (Kalman Filters) ？</a><br>\n<a href=\"https://www.bilibili.com/video/BV1cJ411K7Na?p=11&amp;vd_source=fb54463fa9160b349a7111ad9b7afbf8\">RM电控组培训视频</a> <a href=\"https://www.bilibili.com/video/BV1Ux4y1G7j6/?spm_id_from=333.337.search-card.all.click&amp;vd_source=fb54463fa9160b349a7111ad9b7afbf8\">B站讲的最好的卡尔曼滤波器-目标追踪课程</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>该文档归山东理工大学齐奇战队所有</strong> 本文作者为原落尘，邮箱为<a href=\"mailto:yuanluochen@foxmail.com\" class=\"email\">yuanluochen@foxmail.com</a>，笔者能力有限，如有问题，请您指出.</p>\n</blockquote>\n<h2 id=\"什么是滤波\">什么是滤波</h2>\n<p><strong>卡尔曼滤波</strong>，看起来十分高大尚的一个算法，但是当我们把卡尔曼这个修饰语去掉就变成了<strong>滤波</strong>。这一刻就突然间有一种灵光一闪的感觉，这时我们突然发现，“哦，它是一种滤波啊，就这？”</p>\n<figure>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108154034.png\" alt><figcaption>1</figcaption>\n</figure>\n<p>但是，之前的我作为一名小白，我甚至连滤波到底是什么我都不知道。我第一提出这个问题“什么是滤波，它有什么用”,我记得是我在阅读大疆robotMaster官方代码时提出了这个问题我记得当时的代码是这样的<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108155020.png\" alt=\"1\"><br>\n当时的我就提出了这个疑问，“滤波到底有什么用，为什么要将设置的数值经过滤波处理一下，如果没有滤波处理它会变成什么样子”，后来的我理解了，我也悟了。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109225734.png\" alt=\"1\"></p>\n<p>在真实世界中，当我们想通过一个传感器测量一个数据，但是传感器测量的数值总有一些误差，比如我们想通过一个可以测量距离的传感器测量当前位置与墙之间的距离<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112121821.png\" alt=\"1\">恰巧我们有两个传感器，一个精度极高，价格极贵；一个精度还可以，但价格十分亲民，这时候，我们使用这两个传感器测量距离，我们将测量的结果绘制一张图纸。</p>\n<p>在最理想的状态下，我们希望图纸是如下状态，他是一个稳定的直线 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108161212.png\" alt=\"1\"></p>\n<p>但是在计算机世界总是有一点差强人意，它是这样一个状态，是由一个个小点点构成的<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108161823.png\" alt=\"1\"><br>\n这是因为什么呢，因为在计算机的世界中，一切都是离散的，不是连续的，不管是计算机还是传感器它们计算数据都是在时钟周期的影响下驱动的，时钟每运行一次，程序就会运行一次，它并非想理想状态下是一个由一条线构成的连续的状态，而是由一个又一个小点构成的离散状态。</p>\n<p>但是想上图这样的图纸是真实的吗？结论是还不够真实，真实的状态比这还要难受，它更加的混乱。 如下面两张图所示 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108174540.png\" alt=\"1\"> 我们看到这张图已经感觉十分混乱了，但是还有更混乱的，如下图<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108172311.png\" alt=\"1\"><br>\n当我们看到者两张图纸，不知道你有没有一个疑问，为什么是混乱的。这个问题答案很简单，<strong>我们的传感器不咋地</strong> <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108174304.png\" alt=\"1\"><br>\n原因就这么简单，没什么其他的原因，精度比较高的传感器还好，数据混乱度还可以接受，但是传感器精度不高，哎，不想说什么了，一言难尽。</p>\n<p>但是我们发现，不管数据再怎么混乱，它们都有一个共同的特点，数据点的分布都以一个统一的数值为中心。当我们看到了共同点，我们再看看不同点，相比于第一个，第二个明显更加混乱，我们用更加专业的语言来分析这个问题，这时我们引入<strong>高斯分布</strong>的概念，可能有一些人不理解高斯分布，那么那我们说一个更加通俗易懂的，<strong>正态分布</strong>，这个名词我们高中就学过，可能有些人听到这个词语有一点陌生，但是我把下面这一张图拿出来应该立刻就想起来了<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108173559.png\" alt=\"1\"><br>\n当我看到这张图时，我脑中立刻回忆起高中的痛苦岁月，真难忘。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109225958.png\" alt=\"1\"></p>\n<p>现在我们引入了高斯分布，或者说正态分布，这时我们在分析上面的两个混乱的图像，明显第二张图像比第一张方差更大。精度更高的传感器，方差小，精度低的，方差大，数据一言难尽。</p>\n<h3 id=\"开始讲滤波器了\">开始讲滤波器了</h3>\n<p>我们如何解决数据分散，方差大的问题呢？这时我们就要用到滤波器了，哎，这么长时间了，终于开始讲什么是滤波器了。</p>\n<p>那么什么是滤波器呢？拿这几张图为例<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108175411.png\" alt=\"图一\"> <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108172311.png\" alt=\"图二\"> <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108161823.png\" alt=\"图三\"><br>\n简单来讲，<strong>滤波器就是让图一图二逆天改命为图三的神器</strong>，滤波器能将传感器得到的真实数据进行处理，让数据更加符合要求，更加平滑，这就相当于对数据进行淬体，化凡为仙，心动了吧。 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108180141.png\" alt=\"1\"></p>\n<p>这就是滤波器，回到我之前的那个问题，大疆官方的代码为什么要对数据进行滤波处理，答案一目了然，为了让数据更加平稳，更加平滑，更加符合我们开发者的需求。而卡尔曼滤波作为滤波的佼佼者，它的能力更加强大，它能降低方差，融合传感器的数据，让数据更加集中，能让数据更加贴近真实。</p>\n<h2 id=\"state-observer-状态观测器\">State Observer 状态观测器</h2>\n<h3 id=\"卡尔曼滤波是一种状态观测器\">卡尔曼滤波是一种状态观测器</h3>\n<p>卡尔曼滤波器是可以实现最优估计的状态观测器。刚看到这句话可能有一点复杂。但是不要着急。我们先从状态观测器开始讲起，然后我们在开始讲解卡尔曼滤波</p>\n<h3 id=\"什么是状态观测器\">什么是状态观测器</h3>\n<p>在讲解相对复杂的卡尔曼滤波之前，我们先从初级关卡入手，理解一下什么是状态观测器。讲一个比较有趣的例子</p>\n<p>假如你喜欢一个女孩，但是你不知道对方到底对你是否有那方面想法，作为一名理工男，你渴望能够通过一种传感器来直接判断对方的想法，但是没有啊，这个时候你十分的苦恼<br>\n<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108184550.png\" alt=\"1\"><br>\n那光苦恼可不行，那这个问题该怎么解决呢？这时我们想到了我们突然间想到了状态观测器。“有办法了”，为确定对方是否喜欢你，这个<strong>估计值</strong>，你要通过对对方施加一些<strong>激励</strong>，或者说是与对方说几句话，通过观察对方的反映或者<strong>响应</strong>来判断对方的想法将反映与自己的预期进行对比，得出结论对方到底喜不喜欢你。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/ll.png\" alt=\"1\"></p>\n<p>没想到吧，这么符合逻辑。不愧是理工男，现在我们回顾一下上面那个例子，反思一下什么是状态观测器，状态观测器是什么，<strong>状态观测器是一个可以通过测量一个间接值来估计需求值的一种神器。</strong></p>\n<h3 id=\"状态观测器到底是怎么工作的\">状态观测器到底是怎么工作的</h3>\n<p>现在我们开始正经的讲解一下状态观测器吧，还是以一个例子启头，作为一名理工男，不研究火箭对得起自己吗，现在我们开始研究一下火箭<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108192936.png\" alt=\"1\">作为一名未来的火箭工程师，我们要研究控制火箭尾部火焰温度，学过一点控制相关的东西的同学都知道，如果想要控制一个量，我们就必须要测量这个量，但是火箭啊这个东西温度太高了，如果你用一个温度计，放到火焰里来测量火焰的温度，这显然是不现实，温度计必被烤化，为了解决这个问题我们该如何处理呢，这时我们想到了状态观测器，利用状态观测器来估计火焰温度。</p>\n<p><img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230108200147.png\" alt=\"1\">当我们看到这张图纸，（这是我自己画的，画的可能有一点抽象，但是我感觉可以接受）这是一个火箭尾部的简化图纸，外面为一个外壳，火焰从内部喷射而出，我们要测量火焰温度，实际就是测量上图的内层温度，但是内层温度无法直接测量，所以可以利用状态观测器通过测量外层温度，估计内层温度，但是这是怎么实现的呢？</p>\n<p>我们分析这个系统我们发现，火箭尾焰的温度，是受燃料控制，燃料作为尾焰这个系统输出的输入，而我们要估计的量尾焰温度被称为这个系统的状态量，如下图所示。 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109103344.png\" alt=\"1\"></p>\n<p>那么如何估计尾焰温度这个数值呢？如果你是一名优秀的理工人，你可以对这个系统进行建模，构建其数学模型，我们将系统输入，即燃料作用于你构建的数学模型，然后数学模型输出的状态量就是你估计的尾焰温度<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109134209.png\" alt=\"1\"></p>\n<p>现在问题来了这样就计算出来了尾焰温度，那么系统输出，即你要测量的外层温度有什么用吗？那根本没用啊，怎么可能，你真的觉得你是一个数学天才吗，你自己推导的数学模型真的是符合真实系统的吗？怎么可能，真实系统怎么可能那么美好，系统中存在许多外界因素干扰着你的系统，你构建的数学模型与真实系统还是有些许差异，所以我们该如何处理这个问题呢？这时候测量的外界温度的作用就出来了，我们可以通过使外界温度与估计的外界温度，数值相等，来使估计的尾焰温度与实际尾焰温度相近。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109135140.png\" alt=\"1\"></p>\n<blockquote>\n<p>先提一个概念，<span class=\"math inline\">\\(x\\)</span>为状态，我们在<span class=\"math inline\">\\(x\\)</span>头上加一个^，即<span class=\"math inline\">\\(\\hat{x}\\)</span>，我们称之其为估计状态</p>\n</blockquote>\n<p>即让<span class=\"math inline\">\\(y = \\hat{y}\\)</span>相等实现<span class=\"math inline\">\\(x=\\hat{x}\\)</span>，这样就实现了测量内部温度的目标，那么如何实现这个目标呢？如何让系统输出与估计的系统输出相同呢？方法很简单，利用反馈控制，通过反馈控制来实现误差的缩小<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109161402.png\" alt=\"1\"> 当误差<span class=\"math inline\">\\(e = error = y -\\hat{y}\\)</span>数值趋近与零这时估计的状态量十分接近真实的状态值。</p>\n<h3 id=\"状态观测器公式推导\">状态观测器公式推导</h3>\n<p>口说无凭，毫无依据不符合理工男的原则，我们要对上述结论进行公式推导。在推导公式前，我们先要讲一讲状态方程与观测方程。</p>\n<h4 id=\"浅讲状态方程和观测方程\">浅讲状态方程和观测方程</h4>\n<blockquote>\n<p>什么是状态方程，什么是观测方程？这个问题我也很难解答，以下的讲解可能有大量的问题。如果有问题请提出</p>\n</blockquote>\n<p>现在我来浅说一下这两个方程，不废话上方程，先上一个连续系统的状态方程和观测方程</p>\n<blockquote>\n<p>我先说一下连续和离散的概念，浅说一下，连续系统可以理解为由一条一条线构成的<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109142504.png\" alt=\"1\"> 而离散系统可以理解为由一个又一个点构成的<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109142637.png\" alt=\"1\">计算机内都是离散系统，但是为了推导公式方便，我们在连续系统内推导公式</p>\n</blockquote>\n<p>状态方程<br>\n<span class=\"math display\">\\[\nx&#39; = A x + B  u\n\\]</span> 观测方程 <span class=\"math display\">\\[\ny = C x\n\\]</span> 但我们刚看到公式可能不知道如何下手，请听我慢慢道来，不用考虑太多你可以把状态方程当成描述系统状态随时间的变化与当前状态和系统输入之间的线性关系，观测方程就是描述系统输出与当前状态之间的关系的数学表达式。那么如何构建一个状态方程和观测方程呢？说实话，在下能力有限，很难将其讲清楚，所以请见谅<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109192900.png\" alt=\"1\"> 但是这不影响我们验证状态观测器的任务。</p>\n<h4 id=\"正式开始推导公式的正确性了\">正式开始推导公式的正确性了</h4>\n<p>现在假设我们可以对系统构建其状态方程以及其观测方程了，现在我们的图就变成了这样<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109205237.png\" alt=\"1\"> 这样是不是更符合理工男的形象了，都是数学公式，NB吧。</p>\n<p>回到我们最初的目的，我们要验证随着<span class=\"math inline\">\\(e = y - \\hat{y}\\)</span>趋近于零，<span class=\"math inline\">\\(\\hat{x}\\)</span> 趋近于<span class=\"math inline\">\\(x\\)</span>。那么我们该如何验证该结论呢？<br>\n首先，如果想验证<span class=\"math inline\">\\(\\hat{x}\\)</span> 趋近于x，我们就可以验证<span class=\"math inline\">\\(e_{obs} = x - \\hat{x}\\)</span>趋近于零，这样我们可以通过验证<span class=\"math inline\">\\(e_{obs} = x - \\hat{x}\\)</span>趋近于零来进而验证<span class=\"math inline\">\\(\\hat{x}\\)</span>趋近于<span class=\"math inline\">\\(x\\)</span>。这时我们拿出真实系统的方程与我们自己构建的系统方程<br>\n真实系统的方程 <span class=\"math display\">\\[ x&#39; = Ax + Bu\\]</span> <span class=\"math display\">\\[y = Cx \\]</span> 自己构建的数学模型 <span class=\"math display\">\\[\\hat{x}&#39; = A\\hat{x} + Bu + K(y - \\hat{y})\\]</span> <span class=\"math display\">\\[\\hat{y} = C \\hat{x}\\]</span> 我们要求解<span class=\"math inline\">\\(x - \\hat{x}\\)</span>的数据，我们将真实系统方程与自己构建的数学模型对应相减</p>\n<p><span class=\"math display\">\\[\ne_{obs} = x - \\hat{x}\n\\]</span> <span class=\"math display\">\\[x&#39;- \\hat{x}&#39; = A(x - \\hat{x}) + Bu - Bu - K(y - \\hat{y})\\]</span> <span class=\"math display\">\\[\ny - \\hat{y} = C(x - \\hat{x})\n\\]</span> 将方程化简 <span class=\"math display\">\\[\ne_{obs}&#39; = Ae_{obs} - KCe_{obs}\n\\]</span> 再化简一下 <span class=\"math display\">\\[\ne_{obs}&#39; = (A-KC)e_{obs}\n\\]</span> 再对方程求积分求出<span class=\"math inline\">\\(e_{obs}\\)</span>的数值 <span class=\"math display\">\\[\ne_{obs} = e^{（A - KC）t}e_{obs}(0)\n\\]</span> 这时我们就解出了<span class=\"math inline\">\\(e_{obs}\\)</span>，即随时间变化估价值<span class=\"math inline\">\\(\\hat{x}\\)</span>与真实值之间的关系<span class=\"math inline\">\\(\\hat{x}\\)</span>。我们发现<span class=\"math inline\">\\(e_{obs}\\)</span>与时间的关系是一个指数关系，这就意味着，如果<span class=\"math inline\">\\(A -KC &lt; 0\\)</span>,<span class=\"math inline\">\\(e_{obs}\\)</span>与时间的关系如下图。 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109221302.png\" alt=\"1\"> 它会随时间不断趋近于零。</p>\n<h4 id=\"增益k到底有个什么用\">增益K到底有个什么用</h4>\n<p>但是当我们看到这个结论。我有一个好奇就产生了，<strong>反馈真的有用吗？</strong> 当我第一次推导出上述公式时我就产生了这个好奇，如果没有K项，没有反馈，如下图<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109222504.png\" alt=\"1\">更改一下公式。 <span class=\"math display\">\\[\ne_{obs} = e^{At} e_{obs}(0)\n\\]</span> 此时没有反馈控制，如如果<span class=\"math inline\">\\(A &lt; 0\\)</span>依旧图像为<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109222813.png\" alt=\"1\">那现在问题来了，我们反馈控制的意义在那里。我之前可能没有提过，系统状态方程，观测方程的系数<span class=\"math inline\">\\(A\\)</span> <span class=\"math inline\">\\(B\\)</span> <span class=\"math inline\">\\(C\\)</span>并非为真实系统的数值，而是我们人为规定的数值，它自身是存在误差的，公式<span class=\"math inline\">\\(e_{obs} = e^{(A -KC)t}e_{obs}(0)\\)</span>的A的数值并非真实数值，之前的推导，是根据状态方程观测方程完全正确的情况考虑的，我们无法通过一个非真实的系数<span class=\"math inline\">\\(A\\)</span>来控制<span class=\"math inline\">\\(e_{obs}\\)</span>的衰减率，所以我们要外加一个增益来控制<span class=\"math inline\">\\(e_{obs}\\)</span>衰减率，实现估计值与真实值趋近。</p>\n<p>但是现在问题又来了，我们如何调整增益<span class=\"math inline\">\\(K\\)</span>的数值呢？这时候卡尔曼滤波器就登场了。卡尔曼滤波可以自动调整增益K的数值，实现最优估计。</p>\n<h2 id=\"卡尔曼滤波可以实现最优估计的状态观测器\">卡尔曼滤波，可以实现最优估计的状态观测器</h2>\n<p>现在咱们终于开始讲解卡尔曼滤波了。朋友们恭喜你，终于到了这一步。你离解放不远了<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109234638.png\" alt=\"1\"></p>\n<p>之前我们讲解了状态观测器。我们提到了如何调增益K，我们回想起我们调参的经历。哎，不堪回首。但是卡尔曼滤波帮助我们在一定程度上解决了这个问题。它能帮助我们调整增益K，已实现最优估计。但是如何实现呢？请听我细细道来。</p>\n<p>我们还是从一个例子开始，假设某一个地方举行了一场汽车自动驾驶的比赛。这场比赛的规则是这样的：你可以通过各种传感器测量汽车当前的状态，如利用GPS测量当前位置，利用IMC测量加速度，利用汽车自带的里程计测量汽车的相对移动位置。通过这些传感器来让自动驾驶的汽车在不同地形的路面行使1km，最后我们测量汽车自动行使的相对距离。计算每支队伍的平均距离，平均距离最接近1km的，相对距离的方差最小的，队伍获胜</p>\n<p>有三名选手参数，我们将其结果绘制到下图中。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230109232852.png\" alt=\"1\">一目了然选手C赢了。他相较与选手A与选手C方差实现了位置在均值处并且方差极小。作为一名未来的工程师，我们也想像选手C一样获得比赛的胜利，那么为什么选手C更胜一筹呢，如果仅使用GPS，IMU或里程计不对数据进行滤波操作，数据可能会随时间积累变得越来越虚假。简单来讲，就拿汽车自带的里程计为例，假如里程计通过计算汽车轮毂转动的圈数来计算汽车的相对运动距离，但是我们的路面不够平稳，它是如下图这个状态。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110024028.png\" alt=\"1\">当我们看到这张图纸，我们就明白了，在这种路面下汽车里程计是会有偏差的，而且随时间的积累，误差会越来越大，不管是汽车里程计、GPS还是IMC都有这种类似的问题。我们把这些影响各种各样的影响因素称之为<strong>噪声 Noise</strong>，那么我们如何降低噪声，让自动驾驶的汽车最终结果实现均值在1km并且方差极小呢？这时候卡尔曼滤波的作用就出来了。下面请听我细细道来</p>\n<h3 id=\"卡尔曼滤波的详解\">卡尔曼滤波的详解</h3>\n<p>现在我们分析汽车系统，系统如下<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110000834.png\" alt=\"1\"></p>\n<h4 id=\"x_kx_k-1和y_k是什么浅讲一下离散系统下的状态方程和观测方程\"><span class=\"math inline\">\\(x_k\\)</span>、<span class=\"math inline\">\\(x_{k-1}\\)</span>和<span class=\"math inline\">\\(y_k\\)</span>是什么，浅讲一下离散系统下的状态方程和观测方程</h4>\n<p><strong>先不考虑<span class=\"math inline\">\\(w_k\\)</span>和<span class=\"math inline\">\\(v_k\\)</span></strong>，可能有的同学看到<span class=\"math inline\">\\(x_k\\)</span>或<span class=\"math inline\">\\(y_k\\)</span>有一点陌生，该状态方程为在离散系统下的构建的状态方程和观测方程。<span class=\"math inline\">\\(x_k\\)</span>表示在当前时间下的状态，<span class=\"math inline\">\\(x_{k-1}\\)</span>为上一个时间下的状态。同理，<span class=\"math inline\">\\(y_k\\)</span>表示当前时间下的系统输出，<span class=\"math inline\">\\(u_k\\)</span>表示当前状态下的系统输入。</p>\n<p>之前在连续系统下，我们的状态方程为<span class=\"math inline\">\\(x&#39;= Ax + bu\\)</span>而现在系统的状态方程为<span class=\"math inline\">\\(x_k = Ax_{k-1} + Bx_k\\)</span>，我们发现他们之间有一点不同，连续系统下，状态方程表示状态的微分与状态和系统输入之间的线性关系，而离散系统下，则为当前时间状态与上一个时间步的状态和系统当前时间下的输入之间的线性关系。这感觉有一点不太对劲儿。在离散系统下为什么不像连续系统下为当前状态的微分与系统输入和当前状态之间的线性关系呢？<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110003415.png\" alt=\"1\"></p>\n<p>原因很简单，在离散系统下没有微分的概念，在线性系统下状态方程以一阶微分方程的形式呈现，而在离散系统下则以一阶差分方程的形式呈现。</p>\n<p>那么什么是一阶差分方程呢？简单来讲就是含上一个时间步数值减去当前时间数值的方程。 <span class=\"math display\">\\[ x_{当前时间} - x_{上一个时间}\\]</span> 这个在离散系统下就相当于微分，这是一阶的差分，二阶差分就是<span class=\"math inline\">\\(x_{当前时间} - x_{上上一个时间}\\)</span>。在离散系统下，就通过差分方程代替线性系统下的微分方程来分析系统构建状态方程和观测方程。</p>\n<p>现在我们分析一下离散系统下的状态方程和观测方程，方程如下 <span class=\"math display\">\\[\nx_k = A x_{k-1} + Bu_k\n\\]</span> <span class=\"math display\">\\[\ny_k = Cx_k\n\\]</span> 这个方程描述的很直观，先看状态方程，状态方程表示我们可以利用上一时间的状态和当前时间的输出来预测当前时间的状态。而观测方程表示，可以通过当前时间布的状态来计算当前时间的输出。很直观吧。</p>\n<h5 id=\"噪声后的世界\">噪声后的世界</h5>\n<p>之前我们提到了噪声Noise的概念。现在我们将噪声加入到我们的方程中让我们的方程更加趋近真实。</p>\n<p>在我们是难以通过数学公式去测量一个噪声，所以我们统一假设一切噪声都符合零均值的高斯分布或正态分布。 <span class=\"math display\">\\[\nNoise \\sim N(0, Q)\n\\]</span> 我们将噪声加入我们的状态方程中，我们的状态方程就变成了这个样子 <span class=\"math display\">\\[\nx_k = A x_{k-1} + Bu_k + w_k\n\\]</span> <span class=\"math display\">\\[\ny_k = Cx_k  + u_k\n\\]</span> 我们在状态方程中加入了<strong>过程噪声</strong> <span class=\"math inline\">\\(w_k\\)</span>，该噪声是由一些外界因素影响产生的，例如地面不平。在观测方程中加入<strong>观测噪声</strong><span class=\"math inline\">\\(u_k\\)</span>，该噪声是由观测器自身引起的，例如GPS精度低，性能差。这两种噪声都符合零均值高斯分布。 <span class=\"math display\">\\[\nw_k \\sim N(0, Q)\n\\]</span> <span class=\"math display\">\\[\nu_k \\sim N(0,R)\n\\]</span> 过程噪声为<span class=\"math inline\">\\(w_k\\)</span>为零均值方差为Q的高斯分布，观测噪声<span class=\"math inline\">\\(u_K\\)</span>为零均值方差为R的高斯分布。</p>\n<blockquote>\n<p>方差 Q 和方差 R 是由你自己规定的，在工程中这就是你未来要调的参数。类似于PID的P参数、I参数和D参数，我们如何调整这两个参数，最后我会进行讲解</p>\n</blockquote>\n<p>当我们加入了噪声，我们发现我们的系统变得更加的混乱。从一个相对稳定的一条线，变为混乱的世界。 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110012215.png\" alt=\"1\"> <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110012240.png\" alt=\"1\"> 此时我应该意识到一点，在噪声的影响下，我们测量的数据是无法反映真实数据的。但是如果我们知道汽车模型，对其构建数学模型<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230110015019.png\" alt=\"1\">我们将系统输入作用于我们构建的数学模型中，虽然利用数学模型得出的估计值肯定与真实值相差甚远，但是我们可以利用卡尔曼滤波将真实系统的测量值和数学模型得出的估计状态值相融合，得出最优估计值。</p>\n<h5 id=\"直观描述卡尔曼滤波是如何得到最优估计值\">直观描述卡尔曼滤波是如何得到最优估计值</h5>\n<p>当我们的系统中带有均值为0，方差为R的过程噪声，以及均值为0,方差为Q的观测噪声。此时上一个时间的状态呈现为均值为<span class=\"math inline\">\\(\\hat{x}_{k -1}\\)</span>的高斯分布。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111110934.png\" alt=\"1\">该图纵轴为该状态出现的概率，横轴为状态。当我们拥有了上一个时间的估计状态，我们可以吧上一个时间的状态代入状态方程<span class=\"math inline\">\\(\\hat{x_k} = \\hat{x_{k -1}} + Bu_k + w_k\\)</span>得出当前时刻的估计状态。由于误差是会随时间累积，这就代表着当时时间的高斯分布的方差会更加大。如下图。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111111436.png\" alt=\"1\">这时我们将传感器的数值，即，观测值<span class=\"math inline\">\\(y_k\\)</span>加入到这张图中，它也是符合高斯分布，如下图<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111111906.png\" alt=\"1\"></p>\n<h6 id=\"数据融合的本质\">数据融合的本质</h6>\n<p>当我们看到上面那张图。我们有了利用上一个时间的估计值代入状态方程得到的当前时间的估计值，以及通过传感器得到的当前时刻的观测值。这时我们可以通过将两个数据进行<strong>数据融合</strong>，得到当前时间的最优估计值。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111113730.png\" alt=\"1\">从图中我们可以直观的感受到最优估计值方程更加的小，更加符合我们的需求。</p>\n<p>但是数据融合是如何实现的？很简单，如果你学过《概率论》你会知道一点<strong>两个事件发生的概率相乘=两件事同时发生的概率</strong><img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111115708.png\" alt=\"1\"></p>\n<p>这就是数据融合的本质。就是把多个数据的概率函数相乘，计算其同时发生的概率。数据融合后的结果如上图。方差小，更加符合真实。我们如果有更多的传感器，而且传感器的测量值与你要估计的状态之间存在<strong>线性关系</strong>,如我们的输出方程一样。 <span class=\"math display\">\\[\ny_k = Cx_k + u_k\n\\]</span></p>\n<blockquote>\n<p>线性关系是什么，在我看来就是数学方程中仅存在一次方项或零次方项的方程，如 <span class=\"math display\">\\[y = kx + b\\]</span></p>\n</blockquote>\n<p>我们就可以对其进行数据融合，进一步降低其方差进一步提升数据的精准度，让数据更加符合我们的需求。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111115921.png\" alt=\"1\"></p>\n<p>这就是卡尔曼滤波能够实现最优估计的原因，这种滤波NB吧。它能通过融合传感器的数据，降低数据的方差，提升数据的精准度，让我们比较便宜的传感器的的能力不逊于一个价格比较高的传感器。</p>\n<h4 id=\"解析卡尔曼滤波方程探讨卡尔曼滤波如何实现\">解析卡尔曼滤波方程，探讨卡尔曼滤波如何实现</h4>\n<p>当我们对卡尔曼滤波已经有了一点的了解。这时候我们就要上方程了。卡尔曼滤波的方程如下 <span class=\"math display\">\\[\n\\hat{x_k} = A\\hat{x_{k -1}} + Bu_k + K_k(y_k - C(Ax_{k-1} + Bu_k))\n\\]</span></p>\n<p>但我们看到这个方程的时候可能有一点蒙，但是我们回想起我之前提到的一个观点，<strong>卡尔曼滤波是一种状态观测器</strong>。现在我们把状态观测器的方程拿出来 <span class=\"math display\">\\[\n\\hat{x_{k+1}} = A\\hat{x_k} + Bu_k + K(y_k- \\hat{y_k})\n\\]</span> <span class=\"math display\">\\[\n\\hat{y_k} = C\\hat{x_k}\n\\]</span> 即 <span class=\"math display\">\\[\n\\hat{x_{k+1}} = A\\hat{x_k} + Bu_k + K(y_k- C\\hat{x_k})\n\\]</span></p>\n<p>当我们对比两个方程，我们发现其有很多相似之处。卡尔曼滤波在功能上可以像原始的状态观测器一样，通过观测一个值来估计当前时刻的状态，但它是更强的状态观测器，它可以估计当前时刻的最优值，实现最优估计的目标，但是它是怎样实现这一点的？</p>\n<p>之前我们在状态观测器中提及过一个问题，状态观测器的增益<span class=\"math inline\">\\(K\\)</span>到底该如何调整实现最优的增益。在状态观测器上我们只能像调整PID参数时，那样一次一次的尝试，但是卡尔曼滤波为我们解决了这个问题，<strong>它可以为我们动态调整增益<span class=\"math inline\">\\(K\\)</span>，最终找到最优的增益实现最优估价</strong>。这种增益我们称其为<strong>卡尔曼增益</strong>。</p>\n<p>先不讨论卡尔曼增益如何实现，我们回到卡尔曼滤波方程</p>\n<p><span class=\"math display\">\\[\n\\hat{x_k} = A\\hat{x_{k -1}} + Bu_k + K_k(y_k - C(Ax_{k-1} + Bu_k))\n\\]</span></p>\n<p>我们回顾之前的讲解，再仔细分析卡尔曼滤波方程，我们可以把卡尔曼滤波方程分为两部分一部分为<strong>预测</strong>，一部分为<strong>更新</strong>。 <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111131147.png\" alt=\"1\"> 前一部<span class=\"math inline\">\\(A\\hat{x_{k-1}} + Bu_K\\)</span>得出预测值<span class=\"math inline\">\\({\\hat{x_{k-1}}}^-\\)</span>将预测值代入更新<span class=\"math inline\">\\(K_k(y_k -C(Ax_{k-1} + Bu_K))\\)</span>，对得出的数据进行修正。卡尔曼增益自动调整，最终实现最优估计。</p>\n<p>现在我们对这两个过程进行一下详细的分析，并代入实现卡尔曼增益动态调整的方程，方程如下。</p>\n<ul>\n<li>预测部分<span class=\"math display\">\\[\\hat{x}_{k}^{-}=A \\hat{x}_{k-1}+B u_{k}   \\]</span><span class=\"math display\">\\[P_{k}^{-}=A P_{k-1} A^{T}+Q\\]</span></li>\n<li>更新部分<span class=\"math display\">\\[K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}+R}\\]</span><span class=\"math display\">\\[\\hat{x}_{k}=\\hat{x}_{k}^{-}+K_{k}\\left(y_{k}-C \\hat{x}_{k}^{-}\\right)\\]</span><span class=\"math display\">\\[P_{k}=\\left(I-K_{k} C\\right) P_{k}^{-}\\]</span></li>\n</ul>\n<blockquote>\n<p>这里的P表示状态的方差，之前再讲解状态高斯分布一直在一维空间考虑，但是在工程中我们往往在多维空间下考虑。所以这时候就要用<strong>协方差矩阵</strong>来代替方差。</p>\n</blockquote>\n<p>现在我们相较于最初版本的卡尔曼滤波方程加入了三个关于动态调整卡尔曼增益的方程程，即预测部分的<span class=\"math inline\">\\(P_{k}^{-}=A P_{k-1} A^{T}+Q\\)</span>，以及更新部分的<span class=\"math inline\">\\(K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}+R}\\)</span>和<span class=\"math inline\">\\(P_{k}=\\left(I-K_{k} C\\right) {P_{k}}^-\\)</span>，我们看到这三个方程可能有一点蒙，说实话我也没完全理解透彻，所以为了不误人子弟。我就不对其进行细讲，只讲一下每个方程的用途。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/Pasted%20image%2020230111141014.png\" alt=\"1\"></p>\n<p>现在我们对整体进行分析，先讲一下每一个方程的作用，然后对整体进行分析，理解卡尔曼滤波的降低方差，优化估计的实现。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111143846.png\" alt=\"1\">在预测部分我们利用上一个时间的估价状态和上一个时间的协方差矩阵，计算出当前时刻的估计状态和当前时刻的协方差矩阵。将计算得到的当前时刻的协方差代入更新部分来更新卡尔曼增益数值，然后将调整的卡尔曼增益数值，代入卡尔曼滤波方程预测部分，来调整预测值，以得到最优估计值。最后更新当前时刻的协方差矩阵。这就是卡尔曼滤波的工作原理。</p>\n<h3 id=\"调参开始了\">调参开始了</h3>\n<p>现在当我们理解了卡尔曼滤波的工作原理。我们来到了痛苦的调参环节。我们要调两个参数过程噪声协方差矩阵<span class=\"math inline\">\\(R\\)</span>和观测噪声协方差矩阵<span class=\"math inline\">\\(Q\\)</span>，</p>\n<p>现在我们来讲一下这两个参数到底代表着什么。卡尔曼滤波优化传感器数值，其内部思想可以认为是，我们开发者不信任传感器数值，也不信任通过数学模型得出的估计值，我们要对两者进行数据融合，得到更加真实的结果，这就是卡尔曼滤波。实际上在我们调参时，也根据这个思想，调整参数<span class=\"math inline\">\\(R\\)</span>和<span class=\"math inline\">\\(Q\\)</span>实际上就是调整我们开发者，是更相信状态方程预测的数值，还是更相信传感器的数值，下面我们来相信讲一下这一点。</p>\n<p>我们拿出之间我们列出的方程<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111145727.png\" alt=\"1\"> 极端一点，我们现在让过程噪声的协方差矩阵R趋近于零。此时我们将这个数值代入方程中，经历一次计算。卡尔曼增益变为<span class=\"math display\">\\[K_{k}=\\frac{P_{k}^{-} C^{T}}{C P_{k}^{-} C^{T}}\\]</span>化简一下，变为<span class=\"math display\">\\[K_{k}=\\frac{1}{C }\\]</span>这时我们将卡尔曼增益代入代入卡尔曼滤波的更新部分，此时其变为<span class=\"math display\">\\[\\hat{x}_{k}=\\hat{x}_{k}^{-}+\\frac{1}{C }\\left(y_{k}-C \\hat{x}_{k}^{-}\\right)\\]</span>化简一下由于变为<span class=\"math display\">\\[\\hat{x_k} = \\frac{y_k}{C}\\]</span>这时我们的估计值完全取决与观测值。此时代表着我们开发者完全传感器。相反，如果观测噪声的协方差矩阵Q趋近于0，此时代表我们开发完全信任预测值。简单来讲，<strong>R越小Q越大，越信任观测值；R越大Q越小，越信任预测值</strong></p>\n<p>那么调整过程噪声协方差矩阵<span class=\"math inline\">\\(R\\)</span>和观测噪声协方差矩阵<span class=\"math inline\">\\(Q\\)</span>会对我们的估计状态<span class=\"math inline\">\\(x\\)</span>造成怎样的影响呢？如果我们调整好<span class=\"math inline\">\\(Q\\)</span>与<span class=\"math inline\">\\(R\\)</span>，会使我们的估计状态<span class=\"math inline\">\\(\\hat{x}\\)</span>更快到达最优估计状态。如下图<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111154510.png\" alt=\"1\"> <img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111154603.png\" alt=\"1\">对比这两张图，我们明显可以感受到下面的图比上面更快到达最优估价状态，数值相较与上图更加的贴进真实。所以，作为一名开发人员，我建议你们一定要给我调好参数，不要半途而废。</p>\n<h2 id=\"卡尔曼滤波实战针对电控组\">卡尔曼滤波实战（针对电控组）</h2>\n<h3 id=\"为什么电控组要用卡尔曼滤波\">为什么电控组要用卡尔曼滤波</h3>\n<p>我刚学卡尔曼滤波时，我一直有一个问题，“为什么电控组要用卡尔曼滤波？”，可能你们对我提出这个问题感觉有一点莫名其妙，为什么我会提出这么稀奇古怪的问题。请听我细细道来。首先卡尔曼滤波在之前一直应用于自动瞄准。我们先说说自动瞄准大体是怎么实现的。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112103135.png\" alt=\"1\">大体是，视觉组识别到敌方装甲板，经过一系列计算，得出云台要转动的pitch轴和yaw轴的角度增量，将这个角度增量发给电控组，电控组再对视觉组发来的数据进行一次kalman滤波，将滤波后得出的数据实施在云台上。</p>\n<p>但是我一直都有一个疑问，为什么电控需要作卡尔曼滤波处理视觉的数据，我感觉没必要啊，视觉组已经给我那么好的数据了，电控组为啥要处理呢？不会乱处理让数据失真吗，没必要啊，是不是。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112103823.png\" alt=\"1\"> 但是后来我悟了，真有必要，原因是什么呢，视觉与电控的通信频率小于电控组自身运行频率。有点不说人话了是不是。我详说一下，假如视觉的mini PC与电控开发板之间的通信间隔时间为<span class=\"math inline\">\\(2ms\\)</span>，而电控开发板运行的时钟间隔为<span class=\"math inline\">\\(1ms\\)</span>，在视觉的同学看来，数据是这个样子的。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112110039.png\" alt=\"1\"> 但是在电控组开发看来却不是这样的。它是这样的<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112110127.png\" alt=\"1\"> 由于视觉与电控通信频率小于，电控自身时钟频率，所以在视觉与电控通信一次之后它会有一段时间，是没有数据的数据为上一次通信的数据。这时它会出现一个阶梯状的状态。如果是这么一个状态的数据直接应用到电控层面，那么夸张一点，我们的云台会一抖一抖的，所以这个时候滤波的作用就出来了。它能让阶梯变为。一条相对平滑的曲线，<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230112110652.png\" alt=\"1\"> 这就是卡尔曼滤波在电控层面应用的重要性。</p>\n<h3 id=\"那么如何使用卡尔曼滤波在电控层面\">那么如何使用卡尔曼滤波在电控层面</h3>\n<blockquote>\n<p>我们现在只讲解一下在一维层面如何应用卡尔曼滤波。二维以上的由于需要用到矩阵，但原理差不多。如果想了解，可以自行查找资料。</p>\n</blockquote>\n<p>设置一个场景，我们电控组要求视觉组的同学通过摄像机测量我方机器人与对方机器人装甲板的相对距离。视觉的同学实现了这个功能，将数据发送给了电控，那么作为一名电控我们应该如何利用卡尔曼滤波处理这个数据呢？分为以下几步。</p>\n<ul>\n<li>选择观测值y和状态值x</li>\n<li>建立方程</li>\n<li>代入数据进行计算</li>\n</ul>\n<p>那么应用在上述场景该如何实现。我们要估计相对距离，相对距离就是我们的估计值，视觉的同学已经给我们发了相对距离，我们可以把视觉发来的相对位置直接作为观测值，我们的估计值与观测值相同符合线性关系 <span class=\"math display\">\\[\ny = x\n\\]</span> 现在我们开始构建方程，现在我们拿出状态方程和观测方程作为模板套参数 <span class=\"math display\">\\[x_k= Ax_{k -1} + Bu_K\\]</span><span class=\"math display\">\\[y_k = Cx_k\\]</span> C的值已经确定了为1，现在我们确定A的数值由于系统并没有任何输入所以状态方程可以变为<span class=\"math display\">\\[x_k = Ax_{k -1}\\]</span>这时我直接认为A的数值就是1就可以了，为什么是这样我也没想通。但是确实都是1，等我哪天想通了我再告诉你们为什么。</p>\n<p>当我们拥有了视觉的同学发来的数据以及状态方程输出方程A和C的数值。我们直接代入到卡尔曼滤波的方程。Q和R的数值你要自己定，怎么定看你自己。<img src=\"/posts/kalman-filter-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/index/attachment/Pasted%20image%2020230111145727.png\" alt=\"1\">，最后计算就完事了。</p>\n<blockquote>\n<p>这就是卡尔曼滤波的所有内容，笔者能力有限，肯定有很多谬误，有问题请指出。</p>\n<p>参考资料 <a href=\"https://www.bilibili.com/video/BV1V5411V72J?p=1&amp;vd_source=fb54463fa9160b349a7111ad9b7afbf8\">什么是卡尔曼滤波器 (Kalman Filters) ？</a><br>\n<a href=\"https://www.bilibili.com/video/BV1cJ411K7Na?p=11&amp;vd_source=fb54463fa9160b349a7111ad9b7afbf8\">RM电控组培训视频</a> <a href=\"https://www.bilibili.com/video/BV1Ux4y1G7j6/?spm_id_from=333.337.search-card.all.click&amp;vd_source=fb54463fa9160b349a7111ad9b7afbf8\">B站讲的最好的卡尔曼滤波器-目标追踪课程</a></p>\n</blockquote>\n"},{"title":"萌新的自瞄系统入门指南","date":"2023-07-09T09:11:51.000Z","_content":"","source":"_posts/萌新的自瞄系统入门指南.md","raw":"---\ntitle: 萌新的自瞄系统入门指南\ndate: 2023-07-09 17:11:51\ntags:\n---\n","slug":"萌新的自瞄系统入门指南","published":1,"updated":"2023-08-14T04:33:05.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clladvehi000857i00jnvg60u","content":"\n","site":{"data":{}},"excerpt":"","more":"\n"},{"title":"开发者小白的git入门指南","date":"2023-07-07T04:28:25.000Z","_content":">**该文档归山东理工大学齐奇战队所有**\n>本文作者为原落尘，邮箱为<yuanluochen@foxmail.com>，在下能力有限，如有问题，请您指出。\n\n## 引言\n\n试想一下，我们作为一名小白在开发一个项目，比如开发哨兵电控层面的代码，作为一个有追求的开发者，我想提升我的代码的质量，让其变得更加工整，我决定对我的代码进行修改优化，我在原来的代码基础上对我的代码进行优化，优化了一段时间，我编译了我的整个代码工程，编译之后，我发现输出窗口上输出了上百个上百个error和几十个worning，这一刻我自闭了 ![上百个error](开发者小白的git入门指南/2023-07-03-21-21-37.png) 作为一名开发者我们绝对不容许一个error和一个worning的出现，于是我们开始修改我们的代码，想消除我的代码中的所有的worning和所有的error，经过一段时间的修改我们做到了0 worning和0 error这一个目标 ![0 woring 和 0 error](开发者小白的git入门指南/2023-07-03-21-25-06.png) 但是经历了这一波修改，我再次运行了我的代码，我突然间发现我的代码跑不起来了。 这一刻我看了看我的代码，我思索了一会儿，我到底改了那里了，怎么跑不起来了?我试图把我的代码改回去，试图让我的代码回归能跑的状态，但是改来改去，越改越寄。![寄了](开发者小白的git入门指南/2023-07-03-21-41-05.png)\n\n这时作为一名相对来讲比较可以的开发者会如何避免这种问题呢？答案是 **满屏的 '.zip'** ![满屏的zip](开发者小白的git入门指南/2023-07-03-21-59-34.png)就像这样，我们在开发工程的某个重要的节点上，比如我们要更改当前工程的一些数据处理部分的代码，我们会为了防止毁坏原本的稳定的代码，我们特意把当前工程文件另存到一个特定的目录中（或者说文件夹中），然后为了节约存储空间对另存的文件进行了压缩存储。当我们更改工程时，我们发现，这个工程经过了我们的修改，毁坏了原有的工程，那么我们就删除这个被毁坏的工程，从过去压缩的代码中拿出最近一版代码，然后在这个过去版本的代码的基础上进行开发。\n\n不得不说这是一个可行的方案，但是它也是存在一个巨大的问题的，就是保存一个版本占用一点空间，保存一个版本再占用一点空间。假如我们的工程未来发展到几个G大小的这种级别，我们在我们的有限的硬盘空间内存储几十个，上百个这样的历史版本代码的压缩包，我们的计算机该怎么办呢？ ![硬盘空间不足](开发者小白的git入门指南/2023-07-03-23-08-31.png)\n\n那么我们提出了另外一种方案，我们说本地存储空间不足，那么我们用**网盘**，我们将本地代码文件存在网盘上，这样问题不就解决了吗。![我真是一个小天才](开发者小白的git入门指南/2023-07-05-23-40-57.png)我们把本地的数据上传到网盘中，我们既能满足保存历史所有代码的需求，又能满足节省本地磁盘空间的需求，这不一举两得吗，完美，这个方案是永远的神。\n\n我感觉这个方案十分的完美，没有一点缺陷可言。回想一下，这是真的吗？当然不是。网盘方案有什么问题呢？当然是要联网啊，而且就算联网了，上传文件以及下载文件的速度也特别迷惑，感觉他们的速度和当前真实的网速有亿点点差异。![亿点点差距](开发者小白的git入门指南/2023-07-06-00-13-32.png)我们如果采取网盘方案，假如说我们在一个网络较差或者根本没有网络的环境中，那么我们该如何上传当前代码或者下载我们过去版本的代码呢？答案是根本不行。\n\n我们对比一下以上两种方法，一种本地存储所有历史版本的文件，一种将所有历史版本的文件上传到网盘上。这个两种方法各有所长，各有所短。存在本地，占用空间；存在远程，需要联网。那么是否存在一种集合了两种方案的优点，并且还能解决上面所有问题的方案呢？**有，就是git,一个分布式的版本控制方案。**![git](开发者小白的git入门指南/2023-07-06-00-07-57.png)\n\n---\n\n## 浅讲git\n\n### 什么叫分布式版本控制\n\n那么git是什么？ **git是一个分布式的版本控制工具**。当我看到这句话以后，我有了一个疑问，什么叫分布式版本控制？\n\n#### 版本控制\n\n首先我们要明确什么叫版本控制，版本控制就是我们之前所说的，在开发工程的某个重要的节点上，将工程代码另存到一个特定的目录（或者说文件夹）。在这里我们称这个特定的文件夹为版本仓库，这个仓库里存放着这个工程所有的历史版本代码。\n\n#### 分布式版本控制\n\n##### 集中式\n\n那么什么是分布式版本控制呢，之前我们提到的将所有历史版本代码从本地移到网盘中，这种方式我们称之为，**集中式版本控制**。就是本地无任何这个工程的历史版本代码，所有的历史版本代码全部都存放在网盘中或者远程仓库中。我们想要开发这个工程。如果本地没有代码，我们首先要从网盘中下载最新一版代码，然后在本地继续开发这个代码，开发完毕之后我们为了进行代码的版本控制，我们需要将代码通过网络上传到网盘上，这就叫集中式版本控制，存储代码只在网盘上，其他地方没有一点关于这个代码的历史数据。![集中式版本控制](开发者小白的git入门指南/2023-07-06-00-45-29.png)这就引发了一个我们之前提到的问题，即网络问题。\n\n##### 分布式\n\n而分布式版本控制打破了集中式版本控制的控制方案，在分布式版本控制中，本地可以有一个存储代码所有历史数据的仓库，在遥远的网盘中也可以有一个存储代码所有历史数据的远程仓库，这两个仓库地位相同，都拥有着本工程的所有信息。![分布式版本控制](开发者小白的git入门指南/2023-07-06-00-47-55.png)。\n\n这就是git的分布式版本控制，我们平时可以用git在本地建立一个仓库，我们把我们的代码用git放到这个仓库中，我们为了防止本地仓库出现问题。我们也在远程建了一个仓库。如图所示，![分布式版本控制实例](开发者小白的git入门指南/2023-07-09-16-06-28.png)我们把本地仓库的数据通过网络上传到远程仓库，这里的远程仓库就是这篇文章之后要讲的github（可能你看到这个词有点陌生，可能完全理解不了，但是也没有问题，文章以后就会讲到）。我们在本地保存一份，为了防止本地出现意外在github这个远程仓库上也保存一份我们的工程。这样我们不仅可以在本地不受网络影响进行本地的版本控制，也可以利用远程仓库备份数据，保证了就算本地仓库出现问题，也还有远程仓库为我们提供备份的代码。而且我们如果想更换设备开发这个工程，比如一开始用开发计算机1进行开发，现在我们突然想用开发计算机2进行开发。以前我会会把代码用u盘或者其他途径把代码拷贝到计算机2，但是现在我们可以用git把远程仓库或者之前的那个计算机（即图中的开发计算1的本地仓库1）的代码通过网络或者一些远程数据传输方式直接传到我们当前的开发设备。\n\n这就是git的分布式版本控制，每一个地方都可以建立一个仓库，在不同的地方我们可以开发同一个工程，分布式管理，高效且自在。\n\n##### git仓库存储历史代码的方式\n\n前面认真阅读的朋友在这时可能会提出一个问题，如果本地仓库包含着所有版本的历史代码，那么我们的计算机存储不会出现问题吗？在计算机本地存储如此多的历史版本代码，我们的磁盘不会被撑爆吗？答案是不会的，作为一名稍微可以一点的开发者都知道，保存历史版本的代码需要将原本的工程文件夹变成压缩包来减少其在计算机内存储空间的占用，那么你觉得作为一个专业的也是现在最广泛被使用的分布式版本控制工具git它会不知道吗，并且git不仅知道这件事情并且对数据压缩作了特定的优化，能将一个大的文件压缩成一个很小的文件。而且在存储内容上**仅存储更改的文件，而不是存储整个工程文件夹**，这样就可以**从源头上减少了存储的内容**，大大节省了git仓库的占用空间。\n\n---\n\n## 开始真正学习git\n\n前面咱们浅浅的讲解了一点git相关的内容，现在我们就可以正式的学习git。\n\n### 安装git\n\n在学习git之前我们的计算机中首先要安装git，那么如何安装git呢？下面我们在windows环境下演示安装git的操作。*如果您已经安装完成，直接跳转到[使用git](#使用git)\n\n1. 首先下载git的安装包，进入[git安装包下载网址](https://git-scm.com/download/win)，进入网页后，点击红框内的64位windows版本的安装包进行下载![git下载](开发者小白的git入门指南/2023-07-07-09-08-04.png) *可能你现在出现了一个下载不了的情况，这个正常，由于git的安装包存放在国外的网站上（详细一点说是github上），我们之前浅浅的说了一下github，说它是一个远程的仓库，或者一个网盘，git把代码以及安装包存放在github上，供我们这些开发者下载。国外的网站在国内可能不太容易访问。但是经常在玩一些国外的游戏作品的朋友，可能知道，玩一些国外的游戏我们会挂一个加速器，对某个游戏进行定点加速，让我登陆上这个游戏的服务器，可以与他人进行联机。那么我们在处理这种将安装包存放在外网上无法下载的情况，我们也是会采用加速器对github进行定点加速，以此链接上github，在github上下载git的安装包，那么如何实现对github进行定点加速请阅读[进入github的方法](#进入github的方法-瓦特工具箱)*\n2. 寻找安装包的下载位置，点击安装。![安装git](开发者小白的git入门指南/2023-07-07-10-40-37.png)\n3. 弹出该界面时点击 **是**![安装](开发者小白的git入门指南/2023-07-07-10-41-50.png)\n4. 弹出git安装界面，点击next ![点击next](开发者小白的git入门指南/2023-07-07-10-42-44.png)\n5. 选择安装位置，点击next![选择安装位置](开发者小白的git入门指南/2023-07-07-10-44-51.png)\n6. 弹出该界面，选择安装内容，如果您想添加桌面图标，则勾选**Additional icons**,其他默认，然后点击next，如果不想添加直接点击next![选择安装内容](开发者小白的git入门指南/2023-07-07-10-46-27.png)\n7. 默认直接，点击next![选择开始菜单目录](开发者小白的git入门指南/2023-07-07-11-02-16.png)![使用git的默认编辑器](开发者小白的git入门指南/2023-07-07-11-04-09.png)![选择仓库初始化分支的名字](开发者小白的git入门指南/2023-07-07-11-05-07.png)![git的环境变量](开发者小白的git入门指南/2023-07-07-11-06-00.png)![选择ssh](开发者小白的git入门指南/2023-07-07-11-06-59.png)![选择https](开发者小白的git入门指南/2023-07-07-11-07-38.png)![配置](开发者小白的git入门指南/2023-07-07-11-12-22.png)![配置终端](开发者小白的git入门指南/2023-07-07-11-12-52.png)![选择默认的终端](开发者小白的git入门指南/2023-07-07-11-13-22.png)![选择帮助](开发者小白的git入门指南/2023-07-07-11-14-01.png)![配置](开发者小白的git入门指南/2023-07-07-11-14-48.png)\n8. 点击安装 ![安装](开发者小白的git入门指南/2023-07-07-11-15-52.png)\n9. 验证是否安装完成，回到桌面，右键空白处，![验证安装成功](开发者小白的git入门指南/2023-07-07-12-08-03.png)，出现上图黑框内的内容，则证明安装成功。\n\nlinux下的安装git的方法,终端输入。\n\n```bash\nsudo apt-get install git -y #debian系下的发行版\nsudo yum install git -y #redhat系下的发行版\n```\n\n### 使用git\n\n==以下的讲解在windows环境下进行==\n\n当我们在我们的计算机上安装了git，我们鼠标右键点击桌面空白处，这时弹出的窗口内增加了两个选项。一个是 ==Git GUI Here== 另一个是 ==Git Bash Here==，我们点击Git Bash Here，然后会弹出一个窗口，如下图。![git bash](开发者小白的git入门指南/2023-07-07-14-33-31.png)。\n\n我清楚的记得的我第一次看到这个界面时，我的感觉很是不解。为什么我会有这种感觉呢？因为我第一次打开一个软件，弹出的界面是黒黑的一片。我曾怀疑过，我是不是下错了。![不解](开发者小白的git入门指南/2023-07-07-14-36-39.png)。\n\n但是并不是这么一回事儿。git本来是一个linux系统下的软件。早期的linux或者说所有早期的计算机操作系统都是没有现在的图像化界面的，无法通过鼠标的点击实现开启和关闭程序，实现在文件管理器中进入目录（或者叫文件夹），退出目录，拷贝，剪切文件。那么他们通过什么来实现鼠标进行的操作的呢？就是**命令行**。\n\ngit最早是用于管理linux源代码的一款分布式版本控制工具，它的出现时间几乎和linux的出现时间等同。在那个时代的操作系统根本就没有图形化这种东西，每一个都是黑乎乎的命令行。早期的git就是运行在linux的命令行下的一款软件，上图那个黑黑的界面就是人们从linux系统下移植到windows系统下的linux的命令行软件。我们可以在这个命令行软件输入命令使用git。但是现在git也出现了图形化的版本，但是为了更加深刻的理解git的相关的知识，我们就在这个==Git Bash Here==中输命令的来了解和使用git。*可能有些人会有一点疑问，windows下没有类似的命令行么。答案是有的，它叫powershell，它是一款非常优秀的windows命令行*\n\n#### 命令行的基本操作\n\n回想一下过去，我们讲过版本控制的概念，以及一些简单的没有门槛的版本控制方法，例如，**满屏的 \".zip\"**,以及**网盘**。思考一下，版本控制有什么共同的特点吗？答案是，都是通过 **操作文件** 来实现版本控制。版本控制的对象是文件，不管我们保留的历史版本，还是现在要开发的版本，他们都是文件。\n\n在图形化界面中，或者说在现在的windows系统中以及喜欢图像化操作的使用linux的朋友们，我们如果用鼠标点击实现一个 **满屏的 \".zip\"** 版本控制，我们都需要怎样的文件操作呢？简单来讲包括，进入我们要进行版本控制的工程文件夹，拷贝工程文件或者剪切文件。那么既然我们要开始通过敲命令学习版本控制了，那么我们在命令行中我们如何实现，位置移动，拷贝、剪切文件以及刚才没有涉及的创建文件夹，创建文件，删除文件。那么现在我们开始讲解一下这些操作的实现\n\n##### 位置移动的相关命令\n\n###### pwd 显示当前所处的绝对路径\n\n我们想改变我们在计算机文件系统中的位置，我们首先要知道我们现在在那里。那么我们怎么知道呢？我们可以在Git Bash Here中输入 **pwd**。![pwd输出](开发者小白的git入门指南/2023-07-07-16-07-24.png)，然后它就会输出当前绝对路径 **/c/User/yuanluochen/Desktop**。\n\n当你看到pwd的功能的时候你可能会好奇，“什么是路径”这个问题。那么什么是路径呢？路径是描述当前位置的一种方式。就是用来描述你到底在哪里的一方法。我们现在已经算是对路径有了一点点浅浅的了解，那么我们现在开始思考，什么是绝对路径呢？在理解绝对路径之前，我们先要明确如何在Linux系统中定位文件，在明确以上问题我们先要理解一个符号 **/**。这个符号是每一条绝对路径必有的内容，符号 **/** 在Linux系统中有两种含义，如果放在中间是路径分隔符，在Linux系统中是 **/**， 在Windows系统中为 **\\\\**。如果放在绝对路径的开头是根目录的意思。\n  \n当我们知道了 **/** 的含义时，我们就要开始理解 **绝对路径** 。以一条绝对路径为例，**/user/code/test.c**在这条路径中除了首个 **/** 为 **根目录** 外，其余皆为 **路径分隔符** 。那么为什么通过这种方式来实现文件的定位？\n\n在现代，大多数操作系统组织文件的方式都是树形数据结构，及如下图所示![文件系统的结构](开发者小白的git入门指南/2023-07-07-16-50-38.png)\n\n这种组织文件的方式使从根目录到目标文件的路径具有了唯一性。因为若要定位test.c文件，test.c文件的上级目录只能为code目录，code目录的上级目录仅能为user目录，user目录的上级目录仅能为根目录。由此从根目录到test.c的路径具有唯一性，我们就把这条路径称为 **绝对路径**。\n\n有绝对路径，那么也必有 **相对路径** ，相对路径是什么，相对路径是从某一文件（不包括根目录）开始（默认状态下，从当前目录下开始），到目标文件的路径。此路径不具有唯一性。\n\n仍以定位test.c文件为例，利用相对路径来定位test.c文件。\n\n1. 从code目录开始，定位test.c文件，其相对路径为 **./test.c**（ 在这里 **.**  为当前路径, **/** 为路径分隔符）\n2. 从download目录开始，定位test.c文件，其相对路径为 **../user/code/test.c**( 在这里 **..** 为上级目录 )\n\n###### ls 显示当前目录下所有文件\n\n现在我们已经知道了如何查看当前路径，我们也知道了我们在那，那我们怎么知道我们怎么去哪呢？我们想知道我们要去那里，我们需要知道我们有那些地方是可以去的，我们在有图像化界面的文件管理器中我们会查看当前我们这个文件夹下到底有那些文件夹。然后我们选择一个我们需要的进入。![查看](开发者小白的git入门指南/2023-07-07-16-59-59.png)，那么我们怎么在命令行中查看当前目录下所有文件夹呢？用**ls**。如图所示![ls](开发者小白的git入门指南/2023-07-07-17-02-20.png)\n\n###### cd 切换路径\n\n我们现在已经通过**ls**知道了我们当前目录到底有什么选择，那么现在我们就应该开始移动了。那么我们应该怎样实现呢？使用cd命令，该命令语法如下。\n\n```bash\ncd  路径 #移动到该路径下\n```\n\n我们在命令行中输入cd然后加要进入的路径。该路径可以为相对路径也可以为绝对路径。\n\n###### 文件创建 目录创建 文件删除 目录删除 拷贝 剪切\n\n以下皆为一些常用的文件操作命令，但是后面的讲解不使用，所以下面的指令我不会对其进行细致的讲解。\n\n```bash\n#文件创建\ntouch 文件名/文件路径\n#目录创建\nmkdir 目录名/目录路径\n#文件删除\nrm 文件名/文件路径\n#目录删除\nrm -r 目录名/目录路径\n#拷贝文件\ncp 被拷贝文件路径 拷贝到的目标路径\n#拷贝目录\ncp -r 被拷贝的目录路径 拷贝到的目标路径\n#剪切文件\nmv 被剪切的文件 剪切到的目标位置\n#剪切目录\nmv -r 被剪切的目录路径 剪切到的目标路径\n\n```\n\n###### 其他命令\n\n```bash\nclear #清空屏幕，或者说清空命令行的所有输出内容\n```\n\n---\n\n==以上我浅浅的讲解了一点linux的指令，包括确定当前绝对路径的pwd，查看当前目录下有什么文件的ls，路径切换的cd，以及其他的文件操作命令，如果想真正的学习该部分内容，建议可以在b站着一些相关的视频认真学习一下linux。学习linux对你来讲是有益无害==\n\n#### git的运行机制以及一些基本操作\n\n讲了这么多前置知识，你可能已经看腻了。现在我们开始真正的讲一下git版本控制内在运行的机制，以及一些版本控制的基本操作命令。\n\n##### git的运行机制\n\n![git的存储流程](开发者小白的git入门指南/2023-07-08-00-02-13.png)当你看到这张图的时候。它有很多陌生的词语，像工作区、暂存区、版本库以及远程仓库。对于一个初学者来讲可能有一点感觉难以理解，那为了帮助理解，我会一一讲解这些词语。\n\n那么什么是 **工作区(workspace)** 呢？工作区就是存放我们整个正在开发的工程的地方，它实际上就是一个目录，这个目录存放着我们所有需要进行版本控制的文件。\n\n那么什么又是**暂存区**呢？它是干什么的呢？我们要进行版本控制，我们之前提过[git是如何存储历史版本的代码](#git仓库存储历史代码的方式)的，git会检测当前工作区的文件与本地仓库的文件是否有差异，如果有差异，则找出有差异的文件，将有差异的文件进行特殊处理，降低其占用磁盘空间的大小，然后将经过特殊处理后的文夹保存在本地的仓库（或者版本库）中。那么在这个过程中暂存区起到了一个什么样的作用呢？那么我们现在开始思考一个问题，如果我们要完成一项工作，比如我们要运送货物。我们是喜欢一个一个的运输，还是喜欢将要运输的货物存放在一起后统一运输到目的地，如下图![运输](开发者小白的git入门指南/2023-07-09-12-56-01.png)结果显而易见，我们喜欢一起运。而暂存区就体现了这一思想。工作区文件发生更改要提交到本地仓库，我们不会一个一个的提交，而是把所有要提交的文件都找出来集中放到暂存区中。然后统一提交到本地仓库。\n\n**版本库(Pepository)** 和 **远程仓库(Remote)** 是什么之前在讲解git时提到过，它就是一个存放历史版本代码的地方，只不过一个在本地一个在远程的其他的地方。\n\n那么现在我们明晰了一些最基本的词语。我们就可以开始真正的讲解一下这张流程图。在使用git进行版本控制时。我们起码要有一个git仓库，所以我们首先要创建一个git的本地仓库。然后当我们更改我们的工程时，想保存当前版本代码，我们首先就要将工作区内更改的文件，上传到暂存区，然后将暂存区的代码提交到本地仓库，然后如果我们有远程仓库我们可以将本地仓库的代码上传到远程仓库，并合并到远程仓库。我们也可以克隆远程仓库到本地，然后在本地开发这个工程。\n\n##### 本地的版本控制\n\n我们知道我们版本控制可以在本地进行也可以在本地加远程同时进行。我们现在先不讲解本地加远程的版本控制方案，我们先讲解本地版本控制的方法。\n\n###### 创建本地仓库 **git init**\n\n上文我们提到想要进行版本控制首先起码要有一个本地的仓库。那么我们该怎样创建本地仓库呢？\n\n1. 首先我们要明确一点我们要在工作区下创建本地仓库，那么我们要对工程进行版本控制，我们首先要找到该工程的工作区，即该工程的工程文件夹的根目录，比如我要开发一个叫做guard的工程，guard目录内存放着该工程的所有文件。![寻找工作区](开发者小白的git入门指南/2023-07-08-11-10-59.png)\n2. 进入工作区，双击进入工作区![进入工作区](开发者小白的git入门指南/2023-07-08-11-14-02.png)\n3. 在工作区根目录，右键文件管理器的空白部分，打开Git Bash Here![打开 Git Bash Here](开发者小白的git入门指南/2023-07-08-11-15-52.png)，打开后我们输入pwd我们发现当前绝对路径，与文件管理器中所处的绝对路径相同![Git Bash Here](开发者小白的git入门指南/2023-07-08-11-19-44.png)。这也说明一点，我们在文件管理器通过右键打开Git Bash Here我们会自动跳转到当前路径。\n4. 创建git仓库，我们在Git Bash中输入 **git init**，以此来创建本地仓库，或初始化本地仓库。![创建本地仓库](开发者小白的git入门指南/2023-07-08-11-25-27.png)，这时候我们就成功的在工作区中创建了本地仓库。然后我们使用文件管理器进入仓库目录。并且设置让文件管理器显示隐藏文件。![隐藏目录](开发者小白的git入门指南/2023-07-08-21-16-19.png)，出现了一个名为.git的隐藏目录，这个目录是通过git创建仓库创建出来的，它是整个仓库中最重要的文件，它里面存放这个各个版本的代码。\n\n###### 查看当前工作区文件状态 **git status**\n\n由于后面我们要讲解git本地整体的版本控制操作流程，为了更深刻的讲解一下内容我先讲解一下一个命令\n\n```bash\ngit status # 查看工作区的状态\n```\n\n这个命令是用来读取当前工作区状态的指令，我们在刚刚创建的仓库中输入git status，它就会它会输出工作区的文件状态。状态有如下几种情况。\n\n1. 文件未跟踪 **untracked files** 如下图![未跟踪](开发者小白的git入门指南/2023-07-08-13-09-13.png)\n2. 工作区与本地仓库相比存在有文件内容更改的文件![存在内容更改的文件](开发者小白的git入门指南/2023-07-08-13-21-32.png)\n3. 文件添加到暂存区![添加到暂存区](开发者小白的git入门指南/2023-07-08-13-11-16.png)\n4. 无更改文件，工作区与本地仓库数据相同。![无更改文件](开发者小白的git入门指南/2023-07-08-13-19-23.png)\n\n###### 将更改的文件添加到暂存区 **git add 文件路径**\n\n现在我们拥有一个本地仓库了。现在我们已经拥有了对工程进行版本控制的最根本条件了。现在我们就开始进行一次完整的版本控制。回忆我们在讲解[git的运行机制](#git的运行机制)的那张图纸。我们要进行版本控制，我们要保存我们当前版本的代码，我们应该先将本地仓库对应的工作区内的更改的文件添加到暂存区内。那么我们该如何实现这个过程？\n\n在Git Bash Here中输入\n\n```bash\ngit add 要添加到暂存区的文件的路径\n\n```\n\n如下图![添加到暂存区](开发者小白的git入门指南/2023-07-08-12-28-01.png)，这样我们就将我们的main.c和test.c分别添加到暂存区中。\n\n为了提高效率我们也可以，直接用一个命令，直接添加该工作目录下的全部被更改的文件，输入\n\n```bash\ngit add * # *表示该目录下的全部文件\n```\n\n如下图![添加当前目录下所有改变的文件到暂存区内](开发者小白的git入门指南/2023-07-08-12-54-23.png)这样我们就一次将全部更改文件一步全部添加到暂存区中。\n\n###### 从暂存区中提交到本地仓库 **git commit -m \"提交记录说明\"**\n\n我们现在已经将所有相对与本地当前仓库最新版本的代码文件上传到本地暂存区了，那么下一步，就是提交代码了。我们在Git Bash Here中输入\n\n```bash\ngit commit -m \"提交记录说明\"\n```\n\n这样我们就将本地暂存区的文件上传到本地仓库中了。\n\n###### 添加git用户名\n\n但是这时我们输入这条指令我们发现我们的命令行报错了，![报错](开发者小白的git入门指南/2023-07-08-13-37-41.png)，这时，你可能感觉很奇怪啊，为什么会出现这个问题呢？什么叫**Author identity unknown**这是啥意思，原因是啥呢？因为你没有在git中添加你的账户。现在很多讲解git课程中它会都会在安装完git之后让我们在命令行中输入两个指令。\n\n```bash\n#添加git账户的用户名\ngit config --global user.name '用户名'\n#添加git账户的邮箱\ngit config --global user.email '邮箱'\n```\n\n>里的用户名和邮箱建议用你的github邮箱，如果你不用你的github邮箱，在拟提交工程时，你的github就不会认为是你自己的提交的\n\n这两个指令是用于添加git的账户的。我每次看它们的教程的时候我都会好奇添加它，到底有什么用？现在各位明白了么？你不添加账户，就无法提交代码到本地仓库，就这么简单。\n\ngit是可以用于多人开发同一个超级大的工程的，比如linux内核。我们如果共同开发一个工程，我们会把整个工程集中放到莫一个特定的远程仓库，如github或者自己团队搭建的个人服务器。我们多人开发同一个工程，会引发一个问题，就是不知道到底是谁提交的。试想，我们想管理一个团队开发一个大型的工程，多人同时向同一个地方提交代码，那么这个地方的文件会不会变得很混乱吗？为了让他变得整体变得更加清晰整洁，我们需要知道到底是谁提交了这个代码，那么我们想提交代码之前就一定要登陆我们账户，提交时顺便提交我们的账户信息。\n\n我们在Git Bash Here中输入了这两条指令，如图![添加账户](开发者小白的git入门指南/2023-07-08-15-58-21.png)，然后我们提交我们的代码，如果提交成功会输出如下，如图![提交](开发者小白的git入门指南/2023-07-08-15-59-43.png)这也就证明了我们提交成功。\n\n###### 查看历史提交 **git log**\n\n我们提交了我们的代码，我想看一下我的提交的历史记录我该如何做，在命令行中输入\n\n```bash\ngit log # 查看历史记录\n```\n\n我们的命令行中会输出以下内容![git log 输出](开发者小白的git入门指南/2023-07-08-16-02-58.png)由于我提交了两次代码，所以它会有两次的数据显示，每一次都有显示提交者数据，提交时间，以及提交的说明(commit)。\n\n这个有什么用呢，我们能更加清晰的知道我们到底作了什么。我从编写哨兵代码开始我哨兵工程有90多次提交记录，当我每次查看我的提交记录时我会清晰的记得我的开发过程。它让我的开发思路更加清晰更加明了。\n\n###### git的其他命令\n\n```bash\n# 删除暂存区内的文件\ngit rm -r 路径 --cached \n\n\n#删除git账户\ngit config --global --unset user.name #删除用户名\ngit config --global --unset user.email #删除用户邮箱\n\n#本地链接远程仓库\ngit remote add origin 仓库的https的地址\n\n```\n\n##### 本地版本控制的总结\n\n本地的版本控制就讲到这里，本地版本控制就几个核心的命令\n\n```bash\n#初始化git仓库\ngit init\n#添加文件到暂存区\ngit add 文件路径\n#将暂存区的代码提交到本地仓库\ngit commit -m \"提交记录说明\"\n```\n\n他们都有固有的格式，都是从git开始然后加操作。\n\n```bash\ngit 操作\n```\n\n我不会把本地的版本控制讲解的太过复杂，我只会浅浅的讲一点最最基础的命令，git最核心的最精髓的**分支管理**是没有一点涉猎。我们未来开发项目的核心版本控制方法我更多的认为是，本地仓库与github的远程仓库进行配合，进行我们的版本控制方案。我感觉这样更加的符合一个初学入门者的需求。虽然我的能力上是不行的，但是我是可以尝试给你们讲解git的全部内容，但是我个人感觉对一个入门者来讲太累了。一个简单的开始，一个低门槛的开始，对于一个初学者是一个快乐的过程，是一个能坚持下去的过程。我认为我们应该先将这种比较基础的内容想通了，用熟了，你再去学习更加高级的方法，这样会更加快乐的学习。\n\n---\n\n## 使用github\n\n本地仓库的基本内容已经基本讲了一下。我们现在可以开始讲一下本地加远程的共同版本控制。在讲解如何进行本地加远程的共同版本控制之前，我要稍微说一下github。![github](开发者小白的git入门指南/2023-07-08-16-57-04.png)\n\n### github到底是个啥\n\n我们曾经问过我的学弟，github是啥？它和我说它一个搞开源的网站。这个理解没问题，但是我感觉这么理解感觉对一个初学者有点高大尚了。它确实是用于开源的，但是我个人认为，作为一个开发者。github应该就是一个网盘，就是我们之前提到的存放代码的网盘，当然它不仅能存放代码，其他的什么东西都是可以存储的。\n\n### 第一次进入github\n\n现在我们明确了github到底是个啥，那么现在我们开始真正的进入[github](https://github.com/)，我们进入github。我们第一次进入会是如下这个界面![githhub的开始界面](开发者小白的git入门指南/2023-07-08-17-02-23.png)那你成功的进入github了，这样的话你可以选择直接过下一段的内容，直接到[拥有一个github帐号](#拥有一个github帐号).但你更多的可能是第二种情况![无法访问](开发者小白的git入门指南/2023-07-08-17-04-34.png)，根本无法访问， 如果你是这种情况请你继续阅读下面的内容。\n\n#### 进入github的方法-瓦特工具箱\n\n由于github是一个国外的网站，它的进入如果你没有一些特殊手段可能比较困难而且大部分是需要进行付费的，我就比较讨厌付费的东西，而且一名学习git的初学者，更是不想因为要学习一样东西而付费，为此我提出了一个解决方案，我们使用一款免费可以加速github的加速器——**瓦特工具箱**，这款软件可以实现我们对github的加速。使我们就这以正常使用github。(*如果你有一些特殊手段可以流畅的进入国外网站，请不要下载这个加速器，它可以会因为你的电脑同时存在两个加速软件可能会发生软件间的冲突，会让你的加速手段失效，如果你真下载了，不要让两个软件同时运行就一般是没有问题的*)\n\n1. 下载安装瓦特工具箱\n   1. 进入[瓦特工具箱的官方网站](https://steampp.net/)\n   2. 在网址主页选择自己计算机系统对应的安装包![选择下载安装包](开发者小白的git入门指南/2023-07-07-09-33-29.png)点击下载\n   3. 点击后会弹出以下界面，![弹出界面](开发者小白的git入门指南/2023-07-07-09-40-21.png)点击接受并下载。\n   4. 点击后会弹出以下界面。![下载路径图](开发者小白的git入门指南/2023-07-07-09-51-32.png)建议采用蓝奏云网盘下载，它不会限速，而且支持在浏览器上下载，不用下载一点东西就要打开软件客户端，而且还限速。如果是windows用户还可以在微软商店上下载。，选择号下载方式，点击下载按钮。\n   5. 进入蓝奏云下载，输入密码**1234**，点击确认。![输入密码](开发者小白的git入门指南/2023-07-07-09-55-23.png)\n   6. 选择x64（或者64位）安装包进行下载![下载安装包](开发者小白的git入门指南/2023-07-07-09-59-31.png)\n   7. 选择任意一个下载方式进行下载![选择下载方式](开发者小白的git入门指南/2023-07-07-10-01-18.png)\n   8. 找到安装包下载位置点击安装![安装](开发者小白的git入门指南/2023-07-07-10-03-19.png)。*安装位置视各自计算机情况而定，在你的计算机中不一点是我这个位置*\n   9. 点击后计算机弹出如下界面，点击是。![点击是](开发者小白的git入门指南/2023-07-07-10-05-42.png)\n   10. 点击后弹出安装界面，点击立刻安装或选择自定义安装，选择安装位置以后再进行软件的安装。![安装](开发者小白的git入门指南/2023-07-07-10-09-57.png)，等待一段时间后软件安装完成。\n2. 开始使用软件\n   1. 打开软件的快捷方式，进入软件。![加速github](开发者小白的git入门指南/2023-07-07-10-14-24.png)勾选Github，点击一键加速。\n   2. 第一次使用会弹出该界面，点击允许访问。![使用](开发者小白的git入门指南/2023-07-07-10-16-06.png)\n   3. 这一刻我们就开始正式加速github了。![正式加速](开发者小白的git入门指南/2023-07-07-10-17-21.png)\n3. 测试，进入[github](https://github.com/)，如果出现该界面，则证明我们成功了![成功进入github](开发者小白的git入门指南/2023-07-08-18-41-10.png)。\n\n#### 拥有一个github帐号\n\n现在我们已经可以进入github了，我们想使用github我们首先要拥有一个github的帐号，如果您已经拥有请跳转到下一部分[github的基本使用方式](#github的基本使用方式)\n\n我们该如果拥有一个github帐号呢，请按我如下方式注册它。\n\n1. ![开始注册github](开发者小白的git入门指南/2023-07-08-18-46-35.png)点击**Sign up**进入github注册页面。\n2. 输入你的邮箱,然后点击continue![输入邮箱](开发者小白的git入门指南/2023-07-08-18-49-29.png)\n3. 设置你的密码,然后点击continue![设置密码](开发者小白的git入门指南/2023-07-08-18-52-04.png)\n4. 设置用户名，然后点击continue![设置用户名](开发者小白的git入门指南/2023-07-08-18-53-19.png)\n5. 选择是否要接收产品邮件，我建议是输入n，不接收![是否接收邮件](开发者小白的git入门指南/2023-07-08-18-57-36.png)\n6. 点击创建账户![创建账户](开发者小白的git入门指南/2023-07-08-18-58-19.png)\n7. 然后它会向你的邮箱发送邮件，接收到邮件后，输入邮件的验证码。![输入验证码](开发者小白的git入门指南/2023-07-08-19-01-18.png)\n8. 进入该页面![选择](开发者小白的git入门指南/2023-07-08-19-02-11.png)，选择一些符合自己的选择。\n9. 然后我们就进入了github的个人页面![进入github的个人页面](开发者小白的git入门指南/2023-07-08-19-03-23.png)\n\n#### github的基本使用方式\n\n我们现在已经拥有了一个github帐号。那么现在我们就可以进行正式的使用github。\n\n##### 怎样学习使用github\n\n在正式使用github之前我们先要对github页面进行一点介绍。我们刚一进入github页面，我记得我当时的感觉是，惊喜且不安，惊喜是因为什么呢？我感觉我进了一个特别吊的地方。不安又是因为什么呢？是因为我第一次进到一个都是英文的地方。我个人英语水平很差。我当时使用过一段时间github以后感觉，什么都不认识，每次使用都要用一下页面翻译，后来我也感觉这玩意用不明白，所以有一段时间我用了一下[码云](https://gitee.com/)，就是国内的github。但是用了一段时间感觉还是github好，之后就一直用到今天。\n\n回忆一下，我一开始为啥不想用github，就是因为众多的英文。我执着于什么都要一次看懂，但是后来我发现并不是特别需要一次全搞懂。我们只要一开始先记住最主要的，然后最后最主要的用熟了，然后在往外拓展。那么现在我们回归正题，那么现在最主要的是什么？就是本地加远程仓库的版本控制，那么我们想学学会它，我们应该怎么做呢？我们从需求开始理解github的基本操作。\n\n##### 远程仓库进行版本控制的流程\n\n回忆一下我们用github来做什么？做网盘，保存本地仓库的代码。或者准确的说，在github中创建远程仓库，克隆github远程仓库到本地计算机中，将其变为本地仓库，并继续进行开发，然后将本地仓库的代码上传到远程仓库，进行本地仓库加远程仓库的版本控制。![流程](开发者小白的git入门指南/2023-07-08-19-37-26.png)。\n\n##### 创建远程仓库\n\n那么我们怎样在github上创建远程仓库呢？\n\n1. 点击这个位置的图标![点击图标](开发者小白的git入门指南/2023-07-08-19-39-37.png)\n2. 点击Your repositories(你的仓库)，打开仓库页面 ![打开仓库页面](开发者小白的git入门指南/2023-07-08-19-41-06.png)。进入页面后，红框内的区域存放着我们创建的仓库![仓库界面](开发者小白的git入门指南/2023-07-08-19-44-36.png)。\n3. 点击New新建仓库![新建仓库](开发者小白的git入门指南/2023-07-08-19-50-35.png)。\n4. 输入创建仓库的名称，输入该仓库的描述，选择是否要开源，勾选添加README，点击绿色创建仓库数据。![输入创建仓库数据](开发者小白的git入门指南/2023-07-08-20-08-16.png)，当出现了这个界面，我们已经在github上创建了一个远程仓库![远程仓库](开发者小白的git入门指南/2023-07-08-21-02-25.png)\n\n##### 克隆远程仓库的代码到本地计算机\n\n我们该如何将远程仓库的代码克隆到本地计算机呢？利用git的克隆命令。\n\n```bash\n#将远程的git仓库克隆到本地，运行该命令的路径\ngit clone 仓库的地址\n```\n\n那么我们该如何使用这个指令，如图我们点击Code，选择HTTPS，拷贝地址![拷贝地址](开发者小白的git入门指南/2023-07-08-20-32-43.png)，我们有了这个仓库HTTPS地址。我们首先在文件管理器中选择一个本地的路径去克隆这个仓库。然后右键打开Git Bash Here。输入git克隆指令去克隆这个仓库。\n\n你可能会遇到如下情况，![SSL certificate problem](开发者小白的git入门指南/2023-07-08-20-42-43.png),这是一个在window系统下使用git会发生的一个常见问题，这是因为SSL安全验证问题。那么我们如何解决它，我们只需要关闭验证就可。如何关闭呢？直接在命令行中输入如下指令\n\n```bash\ngit config --global http.sslVerify false \n```\n\n这样我们就可以正常的克隆我们的仓库，如下图![成功克隆仓库](开发者小白的git入门指南/2023-07-08-20-57-02.png)\n\n现在我们查看一下，当前目录的文件。![当前目录下文件](开发者小白的git入门指南/2023-07-08-20-59-04.png)，我们发现当前目录下有一个与我们克隆仓库名字相同的文件夹。这个就是我们从github创建的名字为test的远程仓库克隆到本地的文件夹。我们进入这个文件夹，![本地远程对比](开发者小白的git入门指南/2023-07-08-21-04-58.png)。我们发现本地仓库与远程仓库的文件内容相同。这也说明了我们这个文件是从远程克隆下来的。\n\n##### 经典的版本控制操作\n\n当我们将远程仓库克隆到本地，形成一个本地的代码仓库。我们把我们要开发的代码拷贝到这个从远程仓库克隆的本地仓库。![拷贝](开发者小白的git入门指南/2023-07-08-21-22-52.png)然后我们就可以继续我们在本地仓库学到的经典操作。\n\n```bash\n#添加更改文件 我喜欢直接 git add * 一步添加所有文件\ngit add 文件路径\n#将本地文件提交到本地仓库\ngit commit -m \"提交版本的说明\"\n```\n\n![经典操作](开发者小白的git入门指南/2023-07-08-21-28-43.png)\n\n##### 将本地仓库的代码上传合并到远程的仓库 **git push**\n\n我们将代码提交到本地仓库，那么在本地加远程版本控制方式。我们下一步该如果处理，应该将本地仓库的代码提交到远程仓库。该如何实现。输入指令\n\n```bash\n#提交到远程仓库\ngit push \n```\n\n这时候会输出如下情况。我们点击红框的选择![登陆](开发者小白的git入门指南/2023-07-08-21-34-40.png)，点击绿色的选项![连接github](开发者小白的git入门指南/2023-07-08-21-36-07.png)，在新页面输入密码点击确认comfirm![确认](开发者小白的git入门指南/2023-07-08-21-37-56.png)，成功上传代码![成功上传](开发者小白的git入门指南/2023-07-08-21-39-20.png)\n\n我们进入github远程仓库。查看和之前有什么区别。![提交成功](开发者小白的git入门指南/2023-07-08-21-42-51.png)，我们发现我们的远程仓库多了一个本地仓库提交的文件。这时我们就成功向远程仓库提交文件。\n\n==如果你使用vscode，并在vscode上登陆你的github帐号，你就可以不用输密码提交==\n\n##### 回顾一下利用github进行版本控制的流程\n\n现在我们开始回顾一下我们使用github构建远程仓库进行版本控制的流程。![流程](开发者小白的git入门指南/2023-07-08-22-00-00.png)我们首先在github上创建远程仓库。然后利用克隆到本地，本地开发工程，将更改的文件添加到本地暂存区，然后将本地暂存区的文件提交到本地仓库，最后上传到远程的github仓库。\n\n这个过程非常简单，并且高效，我认为你是可以使用这个流程进行舒适的版本控制的。\n\n## 总结\n\n回想一下我为什么会讲解git与github，之前实验室的代码开发一直都是采用满屏的.zip的版本控制方案，甚至有些人根本就从来不进行版本控制。对我们的实验室的整体开发产生了，不良的影响，并且不利于后期代码的迭代。使用git的最初的需求是让我们实验室下一代开发者，能在开发兵种代码时，能够使用，提高我们实验室的整体代码开发效率，以及更加利于后期代码的版本迭代。\n\n我个人建议，我们未来应该采用[利用github创建仓库进行版本控制的方法](#回顾一下利用github进行版本控制的流程)，使用这种方法，开发每个项目组的工程。我感觉这种方法相对来讲是比较简单。从我刚开始调哨兵到最后一版哨兵代码，我就一直都在使用这种方式来管理哨兵电控层的代码，哨兵代码在我的github上已拥有91次提交![哨兵](开发者小白的git入门指南/2023-07-09-10-20-48.png)，它清楚的记录了哨兵从一个连运动都困难，到今天一个能让我不留遗憾的作品。\n\n我希望以后我们战队的所有软件开发人员，明年在兵种代码开发时全线使用git进行版本控制，咱先不需要做到太过复杂，我们就运行那几个经典的命令，我们就可以进行高效的版本控制。\n\n```bash\n#克隆远程仓库\ngit clone 远程仓库的地址\n# 添加文件到暂存区\ngit add 文件的路径\n# 查看是添加成功\ngit status\n# 提交到本地仓库\ngit commit -m \"提交说明\"\n# 提交到远程仓库\ngit push\n```\n\n## 展望\n\n在比赛的时候，我与其他战队交流，一些历史悠久的战队，他们都有自己的代码仓库。我也想做一个属于我们自己的代码仓库，所以我们在github上建立了一个github的组织。![齐奇](开发者小白的git入门指南/2023-07-09-10-30-34.png)。虽然我到现在我也没有想好，这个组织该如何运行。但是我想建立它，我想播下一颗种子。我想让每一代齐奇人都进入这个组织，我们把我们的教学文案，战队开发资料以及整个工程代码全部放上去，以供战队内部交流提升，并且利于后人查阅学习和代码迭代。这只是我的初期想法，我的眼见是比较狭小，我无法看的太远，我不知道如何正确的构建一个战队级的仓库，我更不知道以我的努力是否能实现真正的建立一个齐奇的代码仓库，但是我认为你只要开始用github了，只要你接触它了，以你们的创造力就一定能构建出一个优秀的代码仓库。\n\n>这就是开发者小白的git的入门指南的所有内容，笔者能力有限，肯定有很多谬误，有问题请指出。  \n>\n>参考资料\n>[一篇文章说清GIT的“分布式”是什么意思？](https://blog.csdn.net/xihuanyuye/article/details/84933134)\n>[git怎么做到版本控制的？](https://zhuanlan.zhihu.com/p/127778152)\n","source":"_posts/开发者小白的git入门指南.md","raw":"---\ntitle: 开发者小白的git入门指南\ndate: 2023-07-07 12:28:25\ntags: git与github\ncategories: git与github\n---\n>**该文档归山东理工大学齐奇战队所有**\n>本文作者为原落尘，邮箱为<yuanluochen@foxmail.com>，在下能力有限，如有问题，请您指出。\n\n## 引言\n\n试想一下，我们作为一名小白在开发一个项目，比如开发哨兵电控层面的代码，作为一个有追求的开发者，我想提升我的代码的质量，让其变得更加工整，我决定对我的代码进行修改优化，我在原来的代码基础上对我的代码进行优化，优化了一段时间，我编译了我的整个代码工程，编译之后，我发现输出窗口上输出了上百个上百个error和几十个worning，这一刻我自闭了 ![上百个error](开发者小白的git入门指南/2023-07-03-21-21-37.png) 作为一名开发者我们绝对不容许一个error和一个worning的出现，于是我们开始修改我们的代码，想消除我的代码中的所有的worning和所有的error，经过一段时间的修改我们做到了0 worning和0 error这一个目标 ![0 woring 和 0 error](开发者小白的git入门指南/2023-07-03-21-25-06.png) 但是经历了这一波修改，我再次运行了我的代码，我突然间发现我的代码跑不起来了。 这一刻我看了看我的代码，我思索了一会儿，我到底改了那里了，怎么跑不起来了?我试图把我的代码改回去，试图让我的代码回归能跑的状态，但是改来改去，越改越寄。![寄了](开发者小白的git入门指南/2023-07-03-21-41-05.png)\n\n这时作为一名相对来讲比较可以的开发者会如何避免这种问题呢？答案是 **满屏的 '.zip'** ![满屏的zip](开发者小白的git入门指南/2023-07-03-21-59-34.png)就像这样，我们在开发工程的某个重要的节点上，比如我们要更改当前工程的一些数据处理部分的代码，我们会为了防止毁坏原本的稳定的代码，我们特意把当前工程文件另存到一个特定的目录中（或者说文件夹中），然后为了节约存储空间对另存的文件进行了压缩存储。当我们更改工程时，我们发现，这个工程经过了我们的修改，毁坏了原有的工程，那么我们就删除这个被毁坏的工程，从过去压缩的代码中拿出最近一版代码，然后在这个过去版本的代码的基础上进行开发。\n\n不得不说这是一个可行的方案，但是它也是存在一个巨大的问题的，就是保存一个版本占用一点空间，保存一个版本再占用一点空间。假如我们的工程未来发展到几个G大小的这种级别，我们在我们的有限的硬盘空间内存储几十个，上百个这样的历史版本代码的压缩包，我们的计算机该怎么办呢？ ![硬盘空间不足](开发者小白的git入门指南/2023-07-03-23-08-31.png)\n\n那么我们提出了另外一种方案，我们说本地存储空间不足，那么我们用**网盘**，我们将本地代码文件存在网盘上，这样问题不就解决了吗。![我真是一个小天才](开发者小白的git入门指南/2023-07-05-23-40-57.png)我们把本地的数据上传到网盘中，我们既能满足保存历史所有代码的需求，又能满足节省本地磁盘空间的需求，这不一举两得吗，完美，这个方案是永远的神。\n\n我感觉这个方案十分的完美，没有一点缺陷可言。回想一下，这是真的吗？当然不是。网盘方案有什么问题呢？当然是要联网啊，而且就算联网了，上传文件以及下载文件的速度也特别迷惑，感觉他们的速度和当前真实的网速有亿点点差异。![亿点点差距](开发者小白的git入门指南/2023-07-06-00-13-32.png)我们如果采取网盘方案，假如说我们在一个网络较差或者根本没有网络的环境中，那么我们该如何上传当前代码或者下载我们过去版本的代码呢？答案是根本不行。\n\n我们对比一下以上两种方法，一种本地存储所有历史版本的文件，一种将所有历史版本的文件上传到网盘上。这个两种方法各有所长，各有所短。存在本地，占用空间；存在远程，需要联网。那么是否存在一种集合了两种方案的优点，并且还能解决上面所有问题的方案呢？**有，就是git,一个分布式的版本控制方案。**![git](开发者小白的git入门指南/2023-07-06-00-07-57.png)\n\n---\n\n## 浅讲git\n\n### 什么叫分布式版本控制\n\n那么git是什么？ **git是一个分布式的版本控制工具**。当我看到这句话以后，我有了一个疑问，什么叫分布式版本控制？\n\n#### 版本控制\n\n首先我们要明确什么叫版本控制，版本控制就是我们之前所说的，在开发工程的某个重要的节点上，将工程代码另存到一个特定的目录（或者说文件夹）。在这里我们称这个特定的文件夹为版本仓库，这个仓库里存放着这个工程所有的历史版本代码。\n\n#### 分布式版本控制\n\n##### 集中式\n\n那么什么是分布式版本控制呢，之前我们提到的将所有历史版本代码从本地移到网盘中，这种方式我们称之为，**集中式版本控制**。就是本地无任何这个工程的历史版本代码，所有的历史版本代码全部都存放在网盘中或者远程仓库中。我们想要开发这个工程。如果本地没有代码，我们首先要从网盘中下载最新一版代码，然后在本地继续开发这个代码，开发完毕之后我们为了进行代码的版本控制，我们需要将代码通过网络上传到网盘上，这就叫集中式版本控制，存储代码只在网盘上，其他地方没有一点关于这个代码的历史数据。![集中式版本控制](开发者小白的git入门指南/2023-07-06-00-45-29.png)这就引发了一个我们之前提到的问题，即网络问题。\n\n##### 分布式\n\n而分布式版本控制打破了集中式版本控制的控制方案，在分布式版本控制中，本地可以有一个存储代码所有历史数据的仓库，在遥远的网盘中也可以有一个存储代码所有历史数据的远程仓库，这两个仓库地位相同，都拥有着本工程的所有信息。![分布式版本控制](开发者小白的git入门指南/2023-07-06-00-47-55.png)。\n\n这就是git的分布式版本控制，我们平时可以用git在本地建立一个仓库，我们把我们的代码用git放到这个仓库中，我们为了防止本地仓库出现问题。我们也在远程建了一个仓库。如图所示，![分布式版本控制实例](开发者小白的git入门指南/2023-07-09-16-06-28.png)我们把本地仓库的数据通过网络上传到远程仓库，这里的远程仓库就是这篇文章之后要讲的github（可能你看到这个词有点陌生，可能完全理解不了，但是也没有问题，文章以后就会讲到）。我们在本地保存一份，为了防止本地出现意外在github这个远程仓库上也保存一份我们的工程。这样我们不仅可以在本地不受网络影响进行本地的版本控制，也可以利用远程仓库备份数据，保证了就算本地仓库出现问题，也还有远程仓库为我们提供备份的代码。而且我们如果想更换设备开发这个工程，比如一开始用开发计算机1进行开发，现在我们突然想用开发计算机2进行开发。以前我会会把代码用u盘或者其他途径把代码拷贝到计算机2，但是现在我们可以用git把远程仓库或者之前的那个计算机（即图中的开发计算1的本地仓库1）的代码通过网络或者一些远程数据传输方式直接传到我们当前的开发设备。\n\n这就是git的分布式版本控制，每一个地方都可以建立一个仓库，在不同的地方我们可以开发同一个工程，分布式管理，高效且自在。\n\n##### git仓库存储历史代码的方式\n\n前面认真阅读的朋友在这时可能会提出一个问题，如果本地仓库包含着所有版本的历史代码，那么我们的计算机存储不会出现问题吗？在计算机本地存储如此多的历史版本代码，我们的磁盘不会被撑爆吗？答案是不会的，作为一名稍微可以一点的开发者都知道，保存历史版本的代码需要将原本的工程文件夹变成压缩包来减少其在计算机内存储空间的占用，那么你觉得作为一个专业的也是现在最广泛被使用的分布式版本控制工具git它会不知道吗，并且git不仅知道这件事情并且对数据压缩作了特定的优化，能将一个大的文件压缩成一个很小的文件。而且在存储内容上**仅存储更改的文件，而不是存储整个工程文件夹**，这样就可以**从源头上减少了存储的内容**，大大节省了git仓库的占用空间。\n\n---\n\n## 开始真正学习git\n\n前面咱们浅浅的讲解了一点git相关的内容，现在我们就可以正式的学习git。\n\n### 安装git\n\n在学习git之前我们的计算机中首先要安装git，那么如何安装git呢？下面我们在windows环境下演示安装git的操作。*如果您已经安装完成，直接跳转到[使用git](#使用git)\n\n1. 首先下载git的安装包，进入[git安装包下载网址](https://git-scm.com/download/win)，进入网页后，点击红框内的64位windows版本的安装包进行下载![git下载](开发者小白的git入门指南/2023-07-07-09-08-04.png) *可能你现在出现了一个下载不了的情况，这个正常，由于git的安装包存放在国外的网站上（详细一点说是github上），我们之前浅浅的说了一下github，说它是一个远程的仓库，或者一个网盘，git把代码以及安装包存放在github上，供我们这些开发者下载。国外的网站在国内可能不太容易访问。但是经常在玩一些国外的游戏作品的朋友，可能知道，玩一些国外的游戏我们会挂一个加速器，对某个游戏进行定点加速，让我登陆上这个游戏的服务器，可以与他人进行联机。那么我们在处理这种将安装包存放在外网上无法下载的情况，我们也是会采用加速器对github进行定点加速，以此链接上github，在github上下载git的安装包，那么如何实现对github进行定点加速请阅读[进入github的方法](#进入github的方法-瓦特工具箱)*\n2. 寻找安装包的下载位置，点击安装。![安装git](开发者小白的git入门指南/2023-07-07-10-40-37.png)\n3. 弹出该界面时点击 **是**![安装](开发者小白的git入门指南/2023-07-07-10-41-50.png)\n4. 弹出git安装界面，点击next ![点击next](开发者小白的git入门指南/2023-07-07-10-42-44.png)\n5. 选择安装位置，点击next![选择安装位置](开发者小白的git入门指南/2023-07-07-10-44-51.png)\n6. 弹出该界面，选择安装内容，如果您想添加桌面图标，则勾选**Additional icons**,其他默认，然后点击next，如果不想添加直接点击next![选择安装内容](开发者小白的git入门指南/2023-07-07-10-46-27.png)\n7. 默认直接，点击next![选择开始菜单目录](开发者小白的git入门指南/2023-07-07-11-02-16.png)![使用git的默认编辑器](开发者小白的git入门指南/2023-07-07-11-04-09.png)![选择仓库初始化分支的名字](开发者小白的git入门指南/2023-07-07-11-05-07.png)![git的环境变量](开发者小白的git入门指南/2023-07-07-11-06-00.png)![选择ssh](开发者小白的git入门指南/2023-07-07-11-06-59.png)![选择https](开发者小白的git入门指南/2023-07-07-11-07-38.png)![配置](开发者小白的git入门指南/2023-07-07-11-12-22.png)![配置终端](开发者小白的git入门指南/2023-07-07-11-12-52.png)![选择默认的终端](开发者小白的git入门指南/2023-07-07-11-13-22.png)![选择帮助](开发者小白的git入门指南/2023-07-07-11-14-01.png)![配置](开发者小白的git入门指南/2023-07-07-11-14-48.png)\n8. 点击安装 ![安装](开发者小白的git入门指南/2023-07-07-11-15-52.png)\n9. 验证是否安装完成，回到桌面，右键空白处，![验证安装成功](开发者小白的git入门指南/2023-07-07-12-08-03.png)，出现上图黑框内的内容，则证明安装成功。\n\nlinux下的安装git的方法,终端输入。\n\n```bash\nsudo apt-get install git -y #debian系下的发行版\nsudo yum install git -y #redhat系下的发行版\n```\n\n### 使用git\n\n==以下的讲解在windows环境下进行==\n\n当我们在我们的计算机上安装了git，我们鼠标右键点击桌面空白处，这时弹出的窗口内增加了两个选项。一个是 ==Git GUI Here== 另一个是 ==Git Bash Here==，我们点击Git Bash Here，然后会弹出一个窗口，如下图。![git bash](开发者小白的git入门指南/2023-07-07-14-33-31.png)。\n\n我清楚的记得的我第一次看到这个界面时，我的感觉很是不解。为什么我会有这种感觉呢？因为我第一次打开一个软件，弹出的界面是黒黑的一片。我曾怀疑过，我是不是下错了。![不解](开发者小白的git入门指南/2023-07-07-14-36-39.png)。\n\n但是并不是这么一回事儿。git本来是一个linux系统下的软件。早期的linux或者说所有早期的计算机操作系统都是没有现在的图像化界面的，无法通过鼠标的点击实现开启和关闭程序，实现在文件管理器中进入目录（或者叫文件夹），退出目录，拷贝，剪切文件。那么他们通过什么来实现鼠标进行的操作的呢？就是**命令行**。\n\ngit最早是用于管理linux源代码的一款分布式版本控制工具，它的出现时间几乎和linux的出现时间等同。在那个时代的操作系统根本就没有图形化这种东西，每一个都是黑乎乎的命令行。早期的git就是运行在linux的命令行下的一款软件，上图那个黑黑的界面就是人们从linux系统下移植到windows系统下的linux的命令行软件。我们可以在这个命令行软件输入命令使用git。但是现在git也出现了图形化的版本，但是为了更加深刻的理解git的相关的知识，我们就在这个==Git Bash Here==中输命令的来了解和使用git。*可能有些人会有一点疑问，windows下没有类似的命令行么。答案是有的，它叫powershell，它是一款非常优秀的windows命令行*\n\n#### 命令行的基本操作\n\n回想一下过去，我们讲过版本控制的概念，以及一些简单的没有门槛的版本控制方法，例如，**满屏的 \".zip\"**,以及**网盘**。思考一下，版本控制有什么共同的特点吗？答案是，都是通过 **操作文件** 来实现版本控制。版本控制的对象是文件，不管我们保留的历史版本，还是现在要开发的版本，他们都是文件。\n\n在图形化界面中，或者说在现在的windows系统中以及喜欢图像化操作的使用linux的朋友们，我们如果用鼠标点击实现一个 **满屏的 \".zip\"** 版本控制，我们都需要怎样的文件操作呢？简单来讲包括，进入我们要进行版本控制的工程文件夹，拷贝工程文件或者剪切文件。那么既然我们要开始通过敲命令学习版本控制了，那么我们在命令行中我们如何实现，位置移动，拷贝、剪切文件以及刚才没有涉及的创建文件夹，创建文件，删除文件。那么现在我们开始讲解一下这些操作的实现\n\n##### 位置移动的相关命令\n\n###### pwd 显示当前所处的绝对路径\n\n我们想改变我们在计算机文件系统中的位置，我们首先要知道我们现在在那里。那么我们怎么知道呢？我们可以在Git Bash Here中输入 **pwd**。![pwd输出](开发者小白的git入门指南/2023-07-07-16-07-24.png)，然后它就会输出当前绝对路径 **/c/User/yuanluochen/Desktop**。\n\n当你看到pwd的功能的时候你可能会好奇，“什么是路径”这个问题。那么什么是路径呢？路径是描述当前位置的一种方式。就是用来描述你到底在哪里的一方法。我们现在已经算是对路径有了一点点浅浅的了解，那么我们现在开始思考，什么是绝对路径呢？在理解绝对路径之前，我们先要明确如何在Linux系统中定位文件，在明确以上问题我们先要理解一个符号 **/**。这个符号是每一条绝对路径必有的内容，符号 **/** 在Linux系统中有两种含义，如果放在中间是路径分隔符，在Linux系统中是 **/**， 在Windows系统中为 **\\\\**。如果放在绝对路径的开头是根目录的意思。\n  \n当我们知道了 **/** 的含义时，我们就要开始理解 **绝对路径** 。以一条绝对路径为例，**/user/code/test.c**在这条路径中除了首个 **/** 为 **根目录** 外，其余皆为 **路径分隔符** 。那么为什么通过这种方式来实现文件的定位？\n\n在现代，大多数操作系统组织文件的方式都是树形数据结构，及如下图所示![文件系统的结构](开发者小白的git入门指南/2023-07-07-16-50-38.png)\n\n这种组织文件的方式使从根目录到目标文件的路径具有了唯一性。因为若要定位test.c文件，test.c文件的上级目录只能为code目录，code目录的上级目录仅能为user目录，user目录的上级目录仅能为根目录。由此从根目录到test.c的路径具有唯一性，我们就把这条路径称为 **绝对路径**。\n\n有绝对路径，那么也必有 **相对路径** ，相对路径是什么，相对路径是从某一文件（不包括根目录）开始（默认状态下，从当前目录下开始），到目标文件的路径。此路径不具有唯一性。\n\n仍以定位test.c文件为例，利用相对路径来定位test.c文件。\n\n1. 从code目录开始，定位test.c文件，其相对路径为 **./test.c**（ 在这里 **.**  为当前路径, **/** 为路径分隔符）\n2. 从download目录开始，定位test.c文件，其相对路径为 **../user/code/test.c**( 在这里 **..** 为上级目录 )\n\n###### ls 显示当前目录下所有文件\n\n现在我们已经知道了如何查看当前路径，我们也知道了我们在那，那我们怎么知道我们怎么去哪呢？我们想知道我们要去那里，我们需要知道我们有那些地方是可以去的，我们在有图像化界面的文件管理器中我们会查看当前我们这个文件夹下到底有那些文件夹。然后我们选择一个我们需要的进入。![查看](开发者小白的git入门指南/2023-07-07-16-59-59.png)，那么我们怎么在命令行中查看当前目录下所有文件夹呢？用**ls**。如图所示![ls](开发者小白的git入门指南/2023-07-07-17-02-20.png)\n\n###### cd 切换路径\n\n我们现在已经通过**ls**知道了我们当前目录到底有什么选择，那么现在我们就应该开始移动了。那么我们应该怎样实现呢？使用cd命令，该命令语法如下。\n\n```bash\ncd  路径 #移动到该路径下\n```\n\n我们在命令行中输入cd然后加要进入的路径。该路径可以为相对路径也可以为绝对路径。\n\n###### 文件创建 目录创建 文件删除 目录删除 拷贝 剪切\n\n以下皆为一些常用的文件操作命令，但是后面的讲解不使用，所以下面的指令我不会对其进行细致的讲解。\n\n```bash\n#文件创建\ntouch 文件名/文件路径\n#目录创建\nmkdir 目录名/目录路径\n#文件删除\nrm 文件名/文件路径\n#目录删除\nrm -r 目录名/目录路径\n#拷贝文件\ncp 被拷贝文件路径 拷贝到的目标路径\n#拷贝目录\ncp -r 被拷贝的目录路径 拷贝到的目标路径\n#剪切文件\nmv 被剪切的文件 剪切到的目标位置\n#剪切目录\nmv -r 被剪切的目录路径 剪切到的目标路径\n\n```\n\n###### 其他命令\n\n```bash\nclear #清空屏幕，或者说清空命令行的所有输出内容\n```\n\n---\n\n==以上我浅浅的讲解了一点linux的指令，包括确定当前绝对路径的pwd，查看当前目录下有什么文件的ls，路径切换的cd，以及其他的文件操作命令，如果想真正的学习该部分内容，建议可以在b站着一些相关的视频认真学习一下linux。学习linux对你来讲是有益无害==\n\n#### git的运行机制以及一些基本操作\n\n讲了这么多前置知识，你可能已经看腻了。现在我们开始真正的讲一下git版本控制内在运行的机制，以及一些版本控制的基本操作命令。\n\n##### git的运行机制\n\n![git的存储流程](开发者小白的git入门指南/2023-07-08-00-02-13.png)当你看到这张图的时候。它有很多陌生的词语，像工作区、暂存区、版本库以及远程仓库。对于一个初学者来讲可能有一点感觉难以理解，那为了帮助理解，我会一一讲解这些词语。\n\n那么什么是 **工作区(workspace)** 呢？工作区就是存放我们整个正在开发的工程的地方，它实际上就是一个目录，这个目录存放着我们所有需要进行版本控制的文件。\n\n那么什么又是**暂存区**呢？它是干什么的呢？我们要进行版本控制，我们之前提过[git是如何存储历史版本的代码](#git仓库存储历史代码的方式)的，git会检测当前工作区的文件与本地仓库的文件是否有差异，如果有差异，则找出有差异的文件，将有差异的文件进行特殊处理，降低其占用磁盘空间的大小，然后将经过特殊处理后的文夹保存在本地的仓库（或者版本库）中。那么在这个过程中暂存区起到了一个什么样的作用呢？那么我们现在开始思考一个问题，如果我们要完成一项工作，比如我们要运送货物。我们是喜欢一个一个的运输，还是喜欢将要运输的货物存放在一起后统一运输到目的地，如下图![运输](开发者小白的git入门指南/2023-07-09-12-56-01.png)结果显而易见，我们喜欢一起运。而暂存区就体现了这一思想。工作区文件发生更改要提交到本地仓库，我们不会一个一个的提交，而是把所有要提交的文件都找出来集中放到暂存区中。然后统一提交到本地仓库。\n\n**版本库(Pepository)** 和 **远程仓库(Remote)** 是什么之前在讲解git时提到过，它就是一个存放历史版本代码的地方，只不过一个在本地一个在远程的其他的地方。\n\n那么现在我们明晰了一些最基本的词语。我们就可以开始真正的讲解一下这张流程图。在使用git进行版本控制时。我们起码要有一个git仓库，所以我们首先要创建一个git的本地仓库。然后当我们更改我们的工程时，想保存当前版本代码，我们首先就要将工作区内更改的文件，上传到暂存区，然后将暂存区的代码提交到本地仓库，然后如果我们有远程仓库我们可以将本地仓库的代码上传到远程仓库，并合并到远程仓库。我们也可以克隆远程仓库到本地，然后在本地开发这个工程。\n\n##### 本地的版本控制\n\n我们知道我们版本控制可以在本地进行也可以在本地加远程同时进行。我们现在先不讲解本地加远程的版本控制方案，我们先讲解本地版本控制的方法。\n\n###### 创建本地仓库 **git init**\n\n上文我们提到想要进行版本控制首先起码要有一个本地的仓库。那么我们该怎样创建本地仓库呢？\n\n1. 首先我们要明确一点我们要在工作区下创建本地仓库，那么我们要对工程进行版本控制，我们首先要找到该工程的工作区，即该工程的工程文件夹的根目录，比如我要开发一个叫做guard的工程，guard目录内存放着该工程的所有文件。![寻找工作区](开发者小白的git入门指南/2023-07-08-11-10-59.png)\n2. 进入工作区，双击进入工作区![进入工作区](开发者小白的git入门指南/2023-07-08-11-14-02.png)\n3. 在工作区根目录，右键文件管理器的空白部分，打开Git Bash Here![打开 Git Bash Here](开发者小白的git入门指南/2023-07-08-11-15-52.png)，打开后我们输入pwd我们发现当前绝对路径，与文件管理器中所处的绝对路径相同![Git Bash Here](开发者小白的git入门指南/2023-07-08-11-19-44.png)。这也说明一点，我们在文件管理器通过右键打开Git Bash Here我们会自动跳转到当前路径。\n4. 创建git仓库，我们在Git Bash中输入 **git init**，以此来创建本地仓库，或初始化本地仓库。![创建本地仓库](开发者小白的git入门指南/2023-07-08-11-25-27.png)，这时候我们就成功的在工作区中创建了本地仓库。然后我们使用文件管理器进入仓库目录。并且设置让文件管理器显示隐藏文件。![隐藏目录](开发者小白的git入门指南/2023-07-08-21-16-19.png)，出现了一个名为.git的隐藏目录，这个目录是通过git创建仓库创建出来的，它是整个仓库中最重要的文件，它里面存放这个各个版本的代码。\n\n###### 查看当前工作区文件状态 **git status**\n\n由于后面我们要讲解git本地整体的版本控制操作流程，为了更深刻的讲解一下内容我先讲解一下一个命令\n\n```bash\ngit status # 查看工作区的状态\n```\n\n这个命令是用来读取当前工作区状态的指令，我们在刚刚创建的仓库中输入git status，它就会它会输出工作区的文件状态。状态有如下几种情况。\n\n1. 文件未跟踪 **untracked files** 如下图![未跟踪](开发者小白的git入门指南/2023-07-08-13-09-13.png)\n2. 工作区与本地仓库相比存在有文件内容更改的文件![存在内容更改的文件](开发者小白的git入门指南/2023-07-08-13-21-32.png)\n3. 文件添加到暂存区![添加到暂存区](开发者小白的git入门指南/2023-07-08-13-11-16.png)\n4. 无更改文件，工作区与本地仓库数据相同。![无更改文件](开发者小白的git入门指南/2023-07-08-13-19-23.png)\n\n###### 将更改的文件添加到暂存区 **git add 文件路径**\n\n现在我们拥有一个本地仓库了。现在我们已经拥有了对工程进行版本控制的最根本条件了。现在我们就开始进行一次完整的版本控制。回忆我们在讲解[git的运行机制](#git的运行机制)的那张图纸。我们要进行版本控制，我们要保存我们当前版本的代码，我们应该先将本地仓库对应的工作区内的更改的文件添加到暂存区内。那么我们该如何实现这个过程？\n\n在Git Bash Here中输入\n\n```bash\ngit add 要添加到暂存区的文件的路径\n\n```\n\n如下图![添加到暂存区](开发者小白的git入门指南/2023-07-08-12-28-01.png)，这样我们就将我们的main.c和test.c分别添加到暂存区中。\n\n为了提高效率我们也可以，直接用一个命令，直接添加该工作目录下的全部被更改的文件，输入\n\n```bash\ngit add * # *表示该目录下的全部文件\n```\n\n如下图![添加当前目录下所有改变的文件到暂存区内](开发者小白的git入门指南/2023-07-08-12-54-23.png)这样我们就一次将全部更改文件一步全部添加到暂存区中。\n\n###### 从暂存区中提交到本地仓库 **git commit -m \"提交记录说明\"**\n\n我们现在已经将所有相对与本地当前仓库最新版本的代码文件上传到本地暂存区了，那么下一步，就是提交代码了。我们在Git Bash Here中输入\n\n```bash\ngit commit -m \"提交记录说明\"\n```\n\n这样我们就将本地暂存区的文件上传到本地仓库中了。\n\n###### 添加git用户名\n\n但是这时我们输入这条指令我们发现我们的命令行报错了，![报错](开发者小白的git入门指南/2023-07-08-13-37-41.png)，这时，你可能感觉很奇怪啊，为什么会出现这个问题呢？什么叫**Author identity unknown**这是啥意思，原因是啥呢？因为你没有在git中添加你的账户。现在很多讲解git课程中它会都会在安装完git之后让我们在命令行中输入两个指令。\n\n```bash\n#添加git账户的用户名\ngit config --global user.name '用户名'\n#添加git账户的邮箱\ngit config --global user.email '邮箱'\n```\n\n>里的用户名和邮箱建议用你的github邮箱，如果你不用你的github邮箱，在拟提交工程时，你的github就不会认为是你自己的提交的\n\n这两个指令是用于添加git的账户的。我每次看它们的教程的时候我都会好奇添加它，到底有什么用？现在各位明白了么？你不添加账户，就无法提交代码到本地仓库，就这么简单。\n\ngit是可以用于多人开发同一个超级大的工程的，比如linux内核。我们如果共同开发一个工程，我们会把整个工程集中放到莫一个特定的远程仓库，如github或者自己团队搭建的个人服务器。我们多人开发同一个工程，会引发一个问题，就是不知道到底是谁提交的。试想，我们想管理一个团队开发一个大型的工程，多人同时向同一个地方提交代码，那么这个地方的文件会不会变得很混乱吗？为了让他变得整体变得更加清晰整洁，我们需要知道到底是谁提交了这个代码，那么我们想提交代码之前就一定要登陆我们账户，提交时顺便提交我们的账户信息。\n\n我们在Git Bash Here中输入了这两条指令，如图![添加账户](开发者小白的git入门指南/2023-07-08-15-58-21.png)，然后我们提交我们的代码，如果提交成功会输出如下，如图![提交](开发者小白的git入门指南/2023-07-08-15-59-43.png)这也就证明了我们提交成功。\n\n###### 查看历史提交 **git log**\n\n我们提交了我们的代码，我想看一下我的提交的历史记录我该如何做，在命令行中输入\n\n```bash\ngit log # 查看历史记录\n```\n\n我们的命令行中会输出以下内容![git log 输出](开发者小白的git入门指南/2023-07-08-16-02-58.png)由于我提交了两次代码，所以它会有两次的数据显示，每一次都有显示提交者数据，提交时间，以及提交的说明(commit)。\n\n这个有什么用呢，我们能更加清晰的知道我们到底作了什么。我从编写哨兵代码开始我哨兵工程有90多次提交记录，当我每次查看我的提交记录时我会清晰的记得我的开发过程。它让我的开发思路更加清晰更加明了。\n\n###### git的其他命令\n\n```bash\n# 删除暂存区内的文件\ngit rm -r 路径 --cached \n\n\n#删除git账户\ngit config --global --unset user.name #删除用户名\ngit config --global --unset user.email #删除用户邮箱\n\n#本地链接远程仓库\ngit remote add origin 仓库的https的地址\n\n```\n\n##### 本地版本控制的总结\n\n本地的版本控制就讲到这里，本地版本控制就几个核心的命令\n\n```bash\n#初始化git仓库\ngit init\n#添加文件到暂存区\ngit add 文件路径\n#将暂存区的代码提交到本地仓库\ngit commit -m \"提交记录说明\"\n```\n\n他们都有固有的格式，都是从git开始然后加操作。\n\n```bash\ngit 操作\n```\n\n我不会把本地的版本控制讲解的太过复杂，我只会浅浅的讲一点最最基础的命令，git最核心的最精髓的**分支管理**是没有一点涉猎。我们未来开发项目的核心版本控制方法我更多的认为是，本地仓库与github的远程仓库进行配合，进行我们的版本控制方案。我感觉这样更加的符合一个初学入门者的需求。虽然我的能力上是不行的，但是我是可以尝试给你们讲解git的全部内容，但是我个人感觉对一个入门者来讲太累了。一个简单的开始，一个低门槛的开始，对于一个初学者是一个快乐的过程，是一个能坚持下去的过程。我认为我们应该先将这种比较基础的内容想通了，用熟了，你再去学习更加高级的方法，这样会更加快乐的学习。\n\n---\n\n## 使用github\n\n本地仓库的基本内容已经基本讲了一下。我们现在可以开始讲一下本地加远程的共同版本控制。在讲解如何进行本地加远程的共同版本控制之前，我要稍微说一下github。![github](开发者小白的git入门指南/2023-07-08-16-57-04.png)\n\n### github到底是个啥\n\n我们曾经问过我的学弟，github是啥？它和我说它一个搞开源的网站。这个理解没问题，但是我感觉这么理解感觉对一个初学者有点高大尚了。它确实是用于开源的，但是我个人认为，作为一个开发者。github应该就是一个网盘，就是我们之前提到的存放代码的网盘，当然它不仅能存放代码，其他的什么东西都是可以存储的。\n\n### 第一次进入github\n\n现在我们明确了github到底是个啥，那么现在我们开始真正的进入[github](https://github.com/)，我们进入github。我们第一次进入会是如下这个界面![githhub的开始界面](开发者小白的git入门指南/2023-07-08-17-02-23.png)那你成功的进入github了，这样的话你可以选择直接过下一段的内容，直接到[拥有一个github帐号](#拥有一个github帐号).但你更多的可能是第二种情况![无法访问](开发者小白的git入门指南/2023-07-08-17-04-34.png)，根本无法访问， 如果你是这种情况请你继续阅读下面的内容。\n\n#### 进入github的方法-瓦特工具箱\n\n由于github是一个国外的网站，它的进入如果你没有一些特殊手段可能比较困难而且大部分是需要进行付费的，我就比较讨厌付费的东西，而且一名学习git的初学者，更是不想因为要学习一样东西而付费，为此我提出了一个解决方案，我们使用一款免费可以加速github的加速器——**瓦特工具箱**，这款软件可以实现我们对github的加速。使我们就这以正常使用github。(*如果你有一些特殊手段可以流畅的进入国外网站，请不要下载这个加速器，它可以会因为你的电脑同时存在两个加速软件可能会发生软件间的冲突，会让你的加速手段失效，如果你真下载了，不要让两个软件同时运行就一般是没有问题的*)\n\n1. 下载安装瓦特工具箱\n   1. 进入[瓦特工具箱的官方网站](https://steampp.net/)\n   2. 在网址主页选择自己计算机系统对应的安装包![选择下载安装包](开发者小白的git入门指南/2023-07-07-09-33-29.png)点击下载\n   3. 点击后会弹出以下界面，![弹出界面](开发者小白的git入门指南/2023-07-07-09-40-21.png)点击接受并下载。\n   4. 点击后会弹出以下界面。![下载路径图](开发者小白的git入门指南/2023-07-07-09-51-32.png)建议采用蓝奏云网盘下载，它不会限速，而且支持在浏览器上下载，不用下载一点东西就要打开软件客户端，而且还限速。如果是windows用户还可以在微软商店上下载。，选择号下载方式，点击下载按钮。\n   5. 进入蓝奏云下载，输入密码**1234**，点击确认。![输入密码](开发者小白的git入门指南/2023-07-07-09-55-23.png)\n   6. 选择x64（或者64位）安装包进行下载![下载安装包](开发者小白的git入门指南/2023-07-07-09-59-31.png)\n   7. 选择任意一个下载方式进行下载![选择下载方式](开发者小白的git入门指南/2023-07-07-10-01-18.png)\n   8. 找到安装包下载位置点击安装![安装](开发者小白的git入门指南/2023-07-07-10-03-19.png)。*安装位置视各自计算机情况而定，在你的计算机中不一点是我这个位置*\n   9. 点击后计算机弹出如下界面，点击是。![点击是](开发者小白的git入门指南/2023-07-07-10-05-42.png)\n   10. 点击后弹出安装界面，点击立刻安装或选择自定义安装，选择安装位置以后再进行软件的安装。![安装](开发者小白的git入门指南/2023-07-07-10-09-57.png)，等待一段时间后软件安装完成。\n2. 开始使用软件\n   1. 打开软件的快捷方式，进入软件。![加速github](开发者小白的git入门指南/2023-07-07-10-14-24.png)勾选Github，点击一键加速。\n   2. 第一次使用会弹出该界面，点击允许访问。![使用](开发者小白的git入门指南/2023-07-07-10-16-06.png)\n   3. 这一刻我们就开始正式加速github了。![正式加速](开发者小白的git入门指南/2023-07-07-10-17-21.png)\n3. 测试，进入[github](https://github.com/)，如果出现该界面，则证明我们成功了![成功进入github](开发者小白的git入门指南/2023-07-08-18-41-10.png)。\n\n#### 拥有一个github帐号\n\n现在我们已经可以进入github了，我们想使用github我们首先要拥有一个github的帐号，如果您已经拥有请跳转到下一部分[github的基本使用方式](#github的基本使用方式)\n\n我们该如果拥有一个github帐号呢，请按我如下方式注册它。\n\n1. ![开始注册github](开发者小白的git入门指南/2023-07-08-18-46-35.png)点击**Sign up**进入github注册页面。\n2. 输入你的邮箱,然后点击continue![输入邮箱](开发者小白的git入门指南/2023-07-08-18-49-29.png)\n3. 设置你的密码,然后点击continue![设置密码](开发者小白的git入门指南/2023-07-08-18-52-04.png)\n4. 设置用户名，然后点击continue![设置用户名](开发者小白的git入门指南/2023-07-08-18-53-19.png)\n5. 选择是否要接收产品邮件，我建议是输入n，不接收![是否接收邮件](开发者小白的git入门指南/2023-07-08-18-57-36.png)\n6. 点击创建账户![创建账户](开发者小白的git入门指南/2023-07-08-18-58-19.png)\n7. 然后它会向你的邮箱发送邮件，接收到邮件后，输入邮件的验证码。![输入验证码](开发者小白的git入门指南/2023-07-08-19-01-18.png)\n8. 进入该页面![选择](开发者小白的git入门指南/2023-07-08-19-02-11.png)，选择一些符合自己的选择。\n9. 然后我们就进入了github的个人页面![进入github的个人页面](开发者小白的git入门指南/2023-07-08-19-03-23.png)\n\n#### github的基本使用方式\n\n我们现在已经拥有了一个github帐号。那么现在我们就可以进行正式的使用github。\n\n##### 怎样学习使用github\n\n在正式使用github之前我们先要对github页面进行一点介绍。我们刚一进入github页面，我记得我当时的感觉是，惊喜且不安，惊喜是因为什么呢？我感觉我进了一个特别吊的地方。不安又是因为什么呢？是因为我第一次进到一个都是英文的地方。我个人英语水平很差。我当时使用过一段时间github以后感觉，什么都不认识，每次使用都要用一下页面翻译，后来我也感觉这玩意用不明白，所以有一段时间我用了一下[码云](https://gitee.com/)，就是国内的github。但是用了一段时间感觉还是github好，之后就一直用到今天。\n\n回忆一下，我一开始为啥不想用github，就是因为众多的英文。我执着于什么都要一次看懂，但是后来我发现并不是特别需要一次全搞懂。我们只要一开始先记住最主要的，然后最后最主要的用熟了，然后在往外拓展。那么现在我们回归正题，那么现在最主要的是什么？就是本地加远程仓库的版本控制，那么我们想学学会它，我们应该怎么做呢？我们从需求开始理解github的基本操作。\n\n##### 远程仓库进行版本控制的流程\n\n回忆一下我们用github来做什么？做网盘，保存本地仓库的代码。或者准确的说，在github中创建远程仓库，克隆github远程仓库到本地计算机中，将其变为本地仓库，并继续进行开发，然后将本地仓库的代码上传到远程仓库，进行本地仓库加远程仓库的版本控制。![流程](开发者小白的git入门指南/2023-07-08-19-37-26.png)。\n\n##### 创建远程仓库\n\n那么我们怎样在github上创建远程仓库呢？\n\n1. 点击这个位置的图标![点击图标](开发者小白的git入门指南/2023-07-08-19-39-37.png)\n2. 点击Your repositories(你的仓库)，打开仓库页面 ![打开仓库页面](开发者小白的git入门指南/2023-07-08-19-41-06.png)。进入页面后，红框内的区域存放着我们创建的仓库![仓库界面](开发者小白的git入门指南/2023-07-08-19-44-36.png)。\n3. 点击New新建仓库![新建仓库](开发者小白的git入门指南/2023-07-08-19-50-35.png)。\n4. 输入创建仓库的名称，输入该仓库的描述，选择是否要开源，勾选添加README，点击绿色创建仓库数据。![输入创建仓库数据](开发者小白的git入门指南/2023-07-08-20-08-16.png)，当出现了这个界面，我们已经在github上创建了一个远程仓库![远程仓库](开发者小白的git入门指南/2023-07-08-21-02-25.png)\n\n##### 克隆远程仓库的代码到本地计算机\n\n我们该如何将远程仓库的代码克隆到本地计算机呢？利用git的克隆命令。\n\n```bash\n#将远程的git仓库克隆到本地，运行该命令的路径\ngit clone 仓库的地址\n```\n\n那么我们该如何使用这个指令，如图我们点击Code，选择HTTPS，拷贝地址![拷贝地址](开发者小白的git入门指南/2023-07-08-20-32-43.png)，我们有了这个仓库HTTPS地址。我们首先在文件管理器中选择一个本地的路径去克隆这个仓库。然后右键打开Git Bash Here。输入git克隆指令去克隆这个仓库。\n\n你可能会遇到如下情况，![SSL certificate problem](开发者小白的git入门指南/2023-07-08-20-42-43.png),这是一个在window系统下使用git会发生的一个常见问题，这是因为SSL安全验证问题。那么我们如何解决它，我们只需要关闭验证就可。如何关闭呢？直接在命令行中输入如下指令\n\n```bash\ngit config --global http.sslVerify false \n```\n\n这样我们就可以正常的克隆我们的仓库，如下图![成功克隆仓库](开发者小白的git入门指南/2023-07-08-20-57-02.png)\n\n现在我们查看一下，当前目录的文件。![当前目录下文件](开发者小白的git入门指南/2023-07-08-20-59-04.png)，我们发现当前目录下有一个与我们克隆仓库名字相同的文件夹。这个就是我们从github创建的名字为test的远程仓库克隆到本地的文件夹。我们进入这个文件夹，![本地远程对比](开发者小白的git入门指南/2023-07-08-21-04-58.png)。我们发现本地仓库与远程仓库的文件内容相同。这也说明了我们这个文件是从远程克隆下来的。\n\n##### 经典的版本控制操作\n\n当我们将远程仓库克隆到本地，形成一个本地的代码仓库。我们把我们要开发的代码拷贝到这个从远程仓库克隆的本地仓库。![拷贝](开发者小白的git入门指南/2023-07-08-21-22-52.png)然后我们就可以继续我们在本地仓库学到的经典操作。\n\n```bash\n#添加更改文件 我喜欢直接 git add * 一步添加所有文件\ngit add 文件路径\n#将本地文件提交到本地仓库\ngit commit -m \"提交版本的说明\"\n```\n\n![经典操作](开发者小白的git入门指南/2023-07-08-21-28-43.png)\n\n##### 将本地仓库的代码上传合并到远程的仓库 **git push**\n\n我们将代码提交到本地仓库，那么在本地加远程版本控制方式。我们下一步该如果处理，应该将本地仓库的代码提交到远程仓库。该如何实现。输入指令\n\n```bash\n#提交到远程仓库\ngit push \n```\n\n这时候会输出如下情况。我们点击红框的选择![登陆](开发者小白的git入门指南/2023-07-08-21-34-40.png)，点击绿色的选项![连接github](开发者小白的git入门指南/2023-07-08-21-36-07.png)，在新页面输入密码点击确认comfirm![确认](开发者小白的git入门指南/2023-07-08-21-37-56.png)，成功上传代码![成功上传](开发者小白的git入门指南/2023-07-08-21-39-20.png)\n\n我们进入github远程仓库。查看和之前有什么区别。![提交成功](开发者小白的git入门指南/2023-07-08-21-42-51.png)，我们发现我们的远程仓库多了一个本地仓库提交的文件。这时我们就成功向远程仓库提交文件。\n\n==如果你使用vscode，并在vscode上登陆你的github帐号，你就可以不用输密码提交==\n\n##### 回顾一下利用github进行版本控制的流程\n\n现在我们开始回顾一下我们使用github构建远程仓库进行版本控制的流程。![流程](开发者小白的git入门指南/2023-07-08-22-00-00.png)我们首先在github上创建远程仓库。然后利用克隆到本地，本地开发工程，将更改的文件添加到本地暂存区，然后将本地暂存区的文件提交到本地仓库，最后上传到远程的github仓库。\n\n这个过程非常简单，并且高效，我认为你是可以使用这个流程进行舒适的版本控制的。\n\n## 总结\n\n回想一下我为什么会讲解git与github，之前实验室的代码开发一直都是采用满屏的.zip的版本控制方案，甚至有些人根本就从来不进行版本控制。对我们的实验室的整体开发产生了，不良的影响，并且不利于后期代码的迭代。使用git的最初的需求是让我们实验室下一代开发者，能在开发兵种代码时，能够使用，提高我们实验室的整体代码开发效率，以及更加利于后期代码的版本迭代。\n\n我个人建议，我们未来应该采用[利用github创建仓库进行版本控制的方法](#回顾一下利用github进行版本控制的流程)，使用这种方法，开发每个项目组的工程。我感觉这种方法相对来讲是比较简单。从我刚开始调哨兵到最后一版哨兵代码，我就一直都在使用这种方式来管理哨兵电控层的代码，哨兵代码在我的github上已拥有91次提交![哨兵](开发者小白的git入门指南/2023-07-09-10-20-48.png)，它清楚的记录了哨兵从一个连运动都困难，到今天一个能让我不留遗憾的作品。\n\n我希望以后我们战队的所有软件开发人员，明年在兵种代码开发时全线使用git进行版本控制，咱先不需要做到太过复杂，我们就运行那几个经典的命令，我们就可以进行高效的版本控制。\n\n```bash\n#克隆远程仓库\ngit clone 远程仓库的地址\n# 添加文件到暂存区\ngit add 文件的路径\n# 查看是添加成功\ngit status\n# 提交到本地仓库\ngit commit -m \"提交说明\"\n# 提交到远程仓库\ngit push\n```\n\n## 展望\n\n在比赛的时候，我与其他战队交流，一些历史悠久的战队，他们都有自己的代码仓库。我也想做一个属于我们自己的代码仓库，所以我们在github上建立了一个github的组织。![齐奇](开发者小白的git入门指南/2023-07-09-10-30-34.png)。虽然我到现在我也没有想好，这个组织该如何运行。但是我想建立它，我想播下一颗种子。我想让每一代齐奇人都进入这个组织，我们把我们的教学文案，战队开发资料以及整个工程代码全部放上去，以供战队内部交流提升，并且利于后人查阅学习和代码迭代。这只是我的初期想法，我的眼见是比较狭小，我无法看的太远，我不知道如何正确的构建一个战队级的仓库，我更不知道以我的努力是否能实现真正的建立一个齐奇的代码仓库，但是我认为你只要开始用github了，只要你接触它了，以你们的创造力就一定能构建出一个优秀的代码仓库。\n\n>这就是开发者小白的git的入门指南的所有内容，笔者能力有限，肯定有很多谬误，有问题请指出。  \n>\n>参考资料\n>[一篇文章说清GIT的“分布式”是什么意思？](https://blog.csdn.net/xihuanyuye/article/details/84933134)\n>[git怎么做到版本控制的？](https://zhuanlan.zhihu.com/p/127778152)\n","slug":"开发者小白的git入门指南","published":1,"updated":"2023-08-14T04:33:05.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clladvehj000957i02cdpfx6r","content":"<blockquote>\n<p><strong>该文档归山东理工大学齐奇战队所有</strong> 本文作者为原落尘，邮箱为<a href=\"mailto:yuanluochen@foxmail.com\" class=\"email\">yuanluochen@foxmail.com</a>，在下能力有限，如有问题，请您指出。</p>\n</blockquote>\n<h2 id=\"引言\">引言</h2>\n<p>试想一下，我们作为一名小白在开发一个项目，比如开发哨兵电控层面的代码，作为一个有追求的开发者，我想提升我的代码的质量，让其变得更加工整，我决定对我的代码进行修改优化，我在原来的代码基础上对我的代码进行优化，优化了一段时间，我编译了我的整个代码工程，编译之后，我发现输出窗口上输出了上百个上百个error和几十个worning，这一刻我自闭了 <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-03-21-21-37.png\" alt=\"上百个error\"> 作为一名开发者我们绝对不容许一个error和一个worning的出现，于是我们开始修改我们的代码，想消除我的代码中的所有的worning和所有的error，经过一段时间的修改我们做到了0 worning和0 error这一个目标 <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-03-21-25-06.png\" alt=\"0 woring 和 0 error\"> 但是经历了这一波修改，我再次运行了我的代码，我突然间发现我的代码跑不起来了。 这一刻我看了看我的代码，我思索了一会儿，我到底改了那里了，怎么跑不起来了?我试图把我的代码改回去，试图让我的代码回归能跑的状态，但是改来改去，越改越寄。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-03-21-41-05.png\" alt=\"寄了\"></p>\n<p>这时作为一名相对来讲比较可以的开发者会如何避免这种问题呢？答案是 <strong>满屏的 '.zip'</strong> <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-03-21-59-34.png\" alt=\"满屏的zip\">就像这样，我们在开发工程的某个重要的节点上，比如我们要更改当前工程的一些数据处理部分的代码，我们会为了防止毁坏原本的稳定的代码，我们特意把当前工程文件另存到一个特定的目录中（或者说文件夹中），然后为了节约存储空间对另存的文件进行了压缩存储。当我们更改工程时，我们发现，这个工程经过了我们的修改，毁坏了原有的工程，那么我们就删除这个被毁坏的工程，从过去压缩的代码中拿出最近一版代码，然后在这个过去版本的代码的基础上进行开发。</p>\n<p>不得不说这是一个可行的方案，但是它也是存在一个巨大的问题的，就是保存一个版本占用一点空间，保存一个版本再占用一点空间。假如我们的工程未来发展到几个G大小的这种级别，我们在我们的有限的硬盘空间内存储几十个，上百个这样的历史版本代码的压缩包，我们的计算机该怎么办呢？ <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-03-23-08-31.png\" alt=\"硬盘空间不足\"></p>\n<p>那么我们提出了另外一种方案，我们说本地存储空间不足，那么我们用<strong>网盘</strong>，我们将本地代码文件存在网盘上，这样问题不就解决了吗。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-05-23-40-57.png\" alt=\"我真是一个小天才\">我们把本地的数据上传到网盘中，我们既能满足保存历史所有代码的需求，又能满足节省本地磁盘空间的需求，这不一举两得吗，完美，这个方案是永远的神。</p>\n<p>我感觉这个方案十分的完美，没有一点缺陷可言。回想一下，这是真的吗？当然不是。网盘方案有什么问题呢？当然是要联网啊，而且就算联网了，上传文件以及下载文件的速度也特别迷惑，感觉他们的速度和当前真实的网速有亿点点差异。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-06-00-13-32.png\" alt=\"亿点点差距\">我们如果采取网盘方案，假如说我们在一个网络较差或者根本没有网络的环境中，那么我们该如何上传当前代码或者下载我们过去版本的代码呢？答案是根本不行。</p>\n<p>我们对比一下以上两种方法，一种本地存储所有历史版本的文件，一种将所有历史版本的文件上传到网盘上。这个两种方法各有所长，各有所短。存在本地，占用空间；存在远程，需要联网。那么是否存在一种集合了两种方案的优点，并且还能解决上面所有问题的方案呢？<strong>有，就是git,一个分布式的版本控制方案。</strong><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-06-00-07-57.png\" alt=\"git\"></p>\n<hr>\n<h2 id=\"浅讲git\">浅讲git</h2>\n<h3 id=\"什么叫分布式版本控制\">什么叫分布式版本控制</h3>\n<p>那么git是什么？ <strong>git是一个分布式的版本控制工具</strong>。当我看到这句话以后，我有了一个疑问，什么叫分布式版本控制？</p>\n<h4 id=\"版本控制\">版本控制</h4>\n<p>首先我们要明确什么叫版本控制，版本控制就是我们之前所说的，在开发工程的某个重要的节点上，将工程代码另存到一个特定的目录（或者说文件夹）。在这里我们称这个特定的文件夹为版本仓库，这个仓库里存放着这个工程所有的历史版本代码。</p>\n<h4 id=\"分布式版本控制\">分布式版本控制</h4>\n<h5 id=\"集中式\">集中式</h5>\n<p>那么什么是分布式版本控制呢，之前我们提到的将所有历史版本代码从本地移到网盘中，这种方式我们称之为，<strong>集中式版本控制</strong>。就是本地无任何这个工程的历史版本代码，所有的历史版本代码全部都存放在网盘中或者远程仓库中。我们想要开发这个工程。如果本地没有代码，我们首先要从网盘中下载最新一版代码，然后在本地继续开发这个代码，开发完毕之后我们为了进行代码的版本控制，我们需要将代码通过网络上传到网盘上，这就叫集中式版本控制，存储代码只在网盘上，其他地方没有一点关于这个代码的历史数据。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-06-00-45-29.png\" alt=\"集中式版本控制\">这就引发了一个我们之前提到的问题，即网络问题。</p>\n<h5 id=\"分布式\">分布式</h5>\n<p>而分布式版本控制打破了集中式版本控制的控制方案，在分布式版本控制中，本地可以有一个存储代码所有历史数据的仓库，在遥远的网盘中也可以有一个存储代码所有历史数据的远程仓库，这两个仓库地位相同，都拥有着本工程的所有信息。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-06-00-47-55.png\" alt=\"分布式版本控制\">。</p>\n<p>这就是git的分布式版本控制，我们平时可以用git在本地建立一个仓库，我们把我们的代码用git放到这个仓库中，我们为了防止本地仓库出现问题。我们也在远程建了一个仓库。如图所示，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-09-16-06-28.png\" alt=\"分布式版本控制实例\">我们把本地仓库的数据通过网络上传到远程仓库，这里的远程仓库就是这篇文章之后要讲的github（可能你看到这个词有点陌生，可能完全理解不了，但是也没有问题，文章以后就会讲到）。我们在本地保存一份，为了防止本地出现意外在github这个远程仓库上也保存一份我们的工程。这样我们不仅可以在本地不受网络影响进行本地的版本控制，也可以利用远程仓库备份数据，保证了就算本地仓库出现问题，也还有远程仓库为我们提供备份的代码。而且我们如果想更换设备开发这个工程，比如一开始用开发计算机1进行开发，现在我们突然想用开发计算机2进行开发。以前我会会把代码用u盘或者其他途径把代码拷贝到计算机2，但是现在我们可以用git把远程仓库或者之前的那个计算机（即图中的开发计算1的本地仓库1）的代码通过网络或者一些远程数据传输方式直接传到我们当前的开发设备。</p>\n<p>这就是git的分布式版本控制，每一个地方都可以建立一个仓库，在不同的地方我们可以开发同一个工程，分布式管理，高效且自在。</p>\n<h5 id=\"git仓库存储历史代码的方式\">git仓库存储历史代码的方式</h5>\n<p>前面认真阅读的朋友在这时可能会提出一个问题，如果本地仓库包含着所有版本的历史代码，那么我们的计算机存储不会出现问题吗？在计算机本地存储如此多的历史版本代码，我们的磁盘不会被撑爆吗？答案是不会的，作为一名稍微可以一点的开发者都知道，保存历史版本的代码需要将原本的工程文件夹变成压缩包来减少其在计算机内存储空间的占用，那么你觉得作为一个专业的也是现在最广泛被使用的分布式版本控制工具git它会不知道吗，并且git不仅知道这件事情并且对数据压缩作了特定的优化，能将一个大的文件压缩成一个很小的文件。而且在存储内容上<strong>仅存储更改的文件，而不是存储整个工程文件夹</strong>，这样就可以<strong>从源头上减少了存储的内容</strong>，大大节省了git仓库的占用空间。</p>\n<hr>\n<h2 id=\"开始真正学习git\">开始真正学习git</h2>\n<p>前面咱们浅浅的讲解了一点git相关的内容，现在我们就可以正式的学习git。</p>\n<h3 id=\"安装git\">安装git</h3>\n<p>在学习git之前我们的计算机中首先要安装git，那么如何安装git呢？下面我们在windows环境下演示安装git的操作。*如果您已经安装完成，直接跳转到<a href=\"#使用git\">使用git</a></p>\n<ol type=\"1\">\n<li>首先下载git的安装包，进入<a href=\"https://git-scm.com/download/win\">git安装包下载网址</a>，进入网页后，点击红框内的64位windows版本的安装包进行下载<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-08-04.png\" alt=\"git下载\"> <em>可能你现在出现了一个下载不了的情况，这个正常，由于git的安装包存放在国外的网站上（详细一点说是github上），我们之前浅浅的说了一下github，说它是一个远程的仓库，或者一个网盘，git把代码以及安装包存放在github上，供我们这些开发者下载。国外的网站在国内可能不太容易访问。但是经常在玩一些国外的游戏作品的朋友，可能知道，玩一些国外的游戏我们会挂一个加速器，对某个游戏进行定点加速，让我登陆上这个游戏的服务器，可以与他人进行联机。那么我们在处理这种将安装包存放在外网上无法下载的情况，我们也是会采用加速器对github进行定点加速，以此链接上github，在github上下载git的安装包，那么如何实现对github进行定点加速请阅读<a href=\"#进入github的方法-瓦特工具箱\">进入github的方法</a></em></li>\n<li>寻找安装包的下载位置，点击安装。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-40-37.png\" alt=\"安装git\"></li>\n<li>弹出该界面时点击 <strong>是</strong><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-41-50.png\" alt=\"安装\"></li>\n<li>弹出git安装界面，点击next <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-42-44.png\" alt=\"点击next\"></li>\n<li>选择安装位置，点击next<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-44-51.png\" alt=\"选择安装位置\"></li>\n<li>弹出该界面，选择安装内容，如果您想添加桌面图标，则勾选<strong>Additional icons</strong>,其他默认，然后点击next，如果不想添加直接点击next<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-46-27.png\" alt=\"选择安装内容\"></li>\n<li>默认直接，点击next<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-02-16.png\" alt=\"选择开始菜单目录\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-04-09.png\" alt=\"使用git的默认编辑器\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-05-07.png\" alt=\"选择仓库初始化分支的名字\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-06-00.png\" alt=\"git的环境变量\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-06-59.png\" alt=\"选择ssh\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-07-38.png\" alt=\"选择https\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-12-22.png\" alt=\"配置\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-12-52.png\" alt=\"配置终端\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-13-22.png\" alt=\"选择默认的终端\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-14-01.png\" alt=\"选择帮助\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-14-48.png\" alt=\"配置\"></li>\n<li>点击安装 <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-15-52.png\" alt=\"安装\"></li>\n<li>验证是否安装完成，回到桌面，右键空白处，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-12-08-03.png\" alt=\"验证安装成功\">，出现上图黑框内的内容，则证明安装成功。</li>\n</ol>\n<p>linux下的安装git的方法,终端输入。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git -y <span class=\"comment\">#debian系下的发行版</span></span><br><span class=\"line\">sudo yum install git -y <span class=\"comment\">#redhat系下的发行版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用git\">使用git</h3>\n<p>==以下的讲解在windows环境下进行==</p>\n<p>当我们在我们的计算机上安装了git，我们鼠标右键点击桌面空白处，这时弹出的窗口内增加了两个选项。一个是 ==Git GUI Here== 另一个是 ==Git Bash Here==，我们点击Git Bash Here，然后会弹出一个窗口，如下图。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-14-33-31.png\" alt=\"git bash\">。</p>\n<p>我清楚的记得的我第一次看到这个界面时，我的感觉很是不解。为什么我会有这种感觉呢？因为我第一次打开一个软件，弹出的界面是黒黑的一片。我曾怀疑过，我是不是下错了。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-14-36-39.png\" alt=\"不解\">。</p>\n<p>但是并不是这么一回事儿。git本来是一个linux系统下的软件。早期的linux或者说所有早期的计算机操作系统都是没有现在的图像化界面的，无法通过鼠标的点击实现开启和关闭程序，实现在文件管理器中进入目录（或者叫文件夹），退出目录，拷贝，剪切文件。那么他们通过什么来实现鼠标进行的操作的呢？就是<strong>命令行</strong>。</p>\n<p>git最早是用于管理linux源代码的一款分布式版本控制工具，它的出现时间几乎和linux的出现时间等同。在那个时代的操作系统根本就没有图形化这种东西，每一个都是黑乎乎的命令行。早期的git就是运行在linux的命令行下的一款软件，上图那个黑黑的界面就是人们从linux系统下移植到windows系统下的linux的命令行软件。我们可以在这个命令行软件输入命令使用git。但是现在git也出现了图形化的版本，但是为了更加深刻的理解git的相关的知识，我们就在这个==Git Bash Here==中输命令的来了解和使用git。<em>可能有些人会有一点疑问，windows下没有类似的命令行么。答案是有的，它叫powershell，它是一款非常优秀的windows命令行</em></p>\n<h4 id=\"命令行的基本操作\">命令行的基本操作</h4>\n<p>回想一下过去，我们讲过版本控制的概念，以及一些简单的没有门槛的版本控制方法，例如，<strong>满屏的 \".zip\"</strong>,以及<strong>网盘</strong>。思考一下，版本控制有什么共同的特点吗？答案是，都是通过 <strong>操作文件</strong> 来实现版本控制。版本控制的对象是文件，不管我们保留的历史版本，还是现在要开发的版本，他们都是文件。</p>\n<p>在图形化界面中，或者说在现在的windows系统中以及喜欢图像化操作的使用linux的朋友们，我们如果用鼠标点击实现一个 <strong>满屏的 \".zip\"</strong> 版本控制，我们都需要怎样的文件操作呢？简单来讲包括，进入我们要进行版本控制的工程文件夹，拷贝工程文件或者剪切文件。那么既然我们要开始通过敲命令学习版本控制了，那么我们在命令行中我们如何实现，位置移动，拷贝、剪切文件以及刚才没有涉及的创建文件夹，创建文件，删除文件。那么现在我们开始讲解一下这些操作的实现</p>\n<h5 id=\"位置移动的相关命令\">位置移动的相关命令</h5>\n<h6 id=\"pwd-显示当前所处的绝对路径\">pwd 显示当前所处的绝对路径</h6>\n<p>我们想改变我们在计算机文件系统中的位置，我们首先要知道我们现在在那里。那么我们怎么知道呢？我们可以在Git Bash Here中输入 <strong>pwd</strong>。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-16-07-24.png\" alt=\"pwd输出\">，然后它就会输出当前绝对路径 <strong>/c/User/yuanluochen/Desktop</strong>。</p>\n<p>当你看到pwd的功能的时候你可能会好奇，“什么是路径”这个问题。那么什么是路径呢？路径是描述当前位置的一种方式。就是用来描述你到底在哪里的一方法。我们现在已经算是对路径有了一点点浅浅的了解，那么我们现在开始思考，什么是绝对路径呢？在理解绝对路径之前，我们先要明确如何在Linux系统中定位文件，在明确以上问题我们先要理解一个符号 <strong>/</strong>。这个符号是每一条绝对路径必有的内容，符号 <strong>/</strong> 在Linux系统中有两种含义，如果放在中间是路径分隔符，在Linux系统中是 <strong>/</strong>， 在Windows系统中为 <strong>\\</strong>。如果放在绝对路径的开头是根目录的意思。</p>\n<p>当我们知道了 <strong>/</strong> 的含义时，我们就要开始理解 <strong>绝对路径</strong> 。以一条绝对路径为例，<strong>/user/code/test.c</strong>在这条路径中除了首个 <strong>/</strong> 为 <strong>根目录</strong> 外，其余皆为 <strong>路径分隔符</strong> 。那么为什么通过这种方式来实现文件的定位？</p>\n<p>在现代，大多数操作系统组织文件的方式都是树形数据结构，及如下图所示<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-16-50-38.png\" alt=\"文件系统的结构\"></p>\n<p>这种组织文件的方式使从根目录到目标文件的路径具有了唯一性。因为若要定位test.c文件，test.c文件的上级目录只能为code目录，code目录的上级目录仅能为user目录，user目录的上级目录仅能为根目录。由此从根目录到test.c的路径具有唯一性，我们就把这条路径称为 <strong>绝对路径</strong>。</p>\n<p>有绝对路径，那么也必有 <strong>相对路径</strong> ，相对路径是什么，相对路径是从某一文件（不包括根目录）开始（默认状态下，从当前目录下开始），到目标文件的路径。此路径不具有唯一性。</p>\n<p>仍以定位test.c文件为例，利用相对路径来定位test.c文件。</p>\n<ol type=\"1\">\n<li>从code目录开始，定位test.c文件，其相对路径为 <strong>./test.c</strong>（ 在这里 <strong>.</strong> 为当前路径, <strong>/</strong> 为路径分隔符）</li>\n<li>从download目录开始，定位test.c文件，其相对路径为 <strong>../user/code/test.c</strong>( 在这里 <strong>..</strong> 为上级目录 )</li>\n</ol>\n<h6 id=\"ls-显示当前目录下所有文件\">ls 显示当前目录下所有文件</h6>\n<p>现在我们已经知道了如何查看当前路径，我们也知道了我们在那，那我们怎么知道我们怎么去哪呢？我们想知道我们要去那里，我们需要知道我们有那些地方是可以去的，我们在有图像化界面的文件管理器中我们会查看当前我们这个文件夹下到底有那些文件夹。然后我们选择一个我们需要的进入。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-16-59-59.png\" alt=\"查看\">，那么我们怎么在命令行中查看当前目录下所有文件夹呢？用<strong>ls</strong>。如图所示<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-17-02-20.png\" alt=\"ls\"></p>\n<h6 id=\"cd-切换路径\">cd 切换路径</h6>\n<p>我们现在已经通过<strong>ls</strong>知道了我们当前目录到底有什么选择，那么现在我们就应该开始移动了。那么我们应该怎样实现呢？使用cd命令，该命令语法如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span>  路径 <span class=\"comment\">#移动到该路径下</span></span><br></pre></td></tr></table></figure>\n<p>我们在命令行中输入cd然后加要进入的路径。该路径可以为相对路径也可以为绝对路径。</p>\n<h6 id=\"文件创建-目录创建-文件删除-目录删除-拷贝-剪切\">文件创建 目录创建 文件删除 目录删除 拷贝 剪切</h6>\n<p>以下皆为一些常用的文件操作命令，但是后面的讲解不使用，所以下面的指令我不会对其进行细致的讲解。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#文件创建</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> 文件名/文件路径</span><br><span class=\"line\"><span class=\"comment\">#目录创建</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> 目录名/目录路径</span><br><span class=\"line\"><span class=\"comment\">#文件删除</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> 文件名/文件路径</span><br><span class=\"line\"><span class=\"comment\">#目录删除</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -r 目录名/目录路径</span><br><span class=\"line\"><span class=\"comment\">#拷贝文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> 被拷贝文件路径 拷贝到的目标路径</span><br><span class=\"line\"><span class=\"comment\">#拷贝目录</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -r 被拷贝的目录路径 拷贝到的目标路径</span><br><span class=\"line\"><span class=\"comment\">#剪切文件</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> 被剪切的文件 剪切到的目标位置</span><br><span class=\"line\"><span class=\"comment\">#剪切目录</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> -r 被剪切的目录路径 剪切到的目标路径</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"其他命令\">其他命令</h6>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear <span class=\"comment\">#清空屏幕，或者说清空命令行的所有输出内容</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>==以上我浅浅的讲解了一点linux的指令，包括确定当前绝对路径的pwd，查看当前目录下有什么文件的ls，路径切换的cd，以及其他的文件操作命令，如果想真正的学习该部分内容，建议可以在b站着一些相关的视频认真学习一下linux。学习linux对你来讲是有益无害==</p>\n<h4 id=\"git的运行机制以及一些基本操作\">git的运行机制以及一些基本操作</h4>\n<p>讲了这么多前置知识，你可能已经看腻了。现在我们开始真正的讲一下git版本控制内在运行的机制，以及一些版本控制的基本操作命令。</p>\n<h5 id=\"git的运行机制\">git的运行机制</h5>\n<p><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-00-02-13.png\" alt=\"git的存储流程\">当你看到这张图的时候。它有很多陌生的词语，像工作区、暂存区、版本库以及远程仓库。对于一个初学者来讲可能有一点感觉难以理解，那为了帮助理解，我会一一讲解这些词语。</p>\n<p>那么什么是 <strong>工作区(workspace)</strong> 呢？工作区就是存放我们整个正在开发的工程的地方，它实际上就是一个目录，这个目录存放着我们所有需要进行版本控制的文件。</p>\n<p>那么什么又是<strong>暂存区</strong>呢？它是干什么的呢？我们要进行版本控制，我们之前提过<a href=\"#git仓库存储历史代码的方式\">git是如何存储历史版本的代码</a>的，git会检测当前工作区的文件与本地仓库的文件是否有差异，如果有差异，则找出有差异的文件，将有差异的文件进行特殊处理，降低其占用磁盘空间的大小，然后将经过特殊处理后的文夹保存在本地的仓库（或者版本库）中。那么在这个过程中暂存区起到了一个什么样的作用呢？那么我们现在开始思考一个问题，如果我们要完成一项工作，比如我们要运送货物。我们是喜欢一个一个的运输，还是喜欢将要运输的货物存放在一起后统一运输到目的地，如下图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-09-12-56-01.png\" alt=\"运输\">结果显而易见，我们喜欢一起运。而暂存区就体现了这一思想。工作区文件发生更改要提交到本地仓库，我们不会一个一个的提交，而是把所有要提交的文件都找出来集中放到暂存区中。然后统一提交到本地仓库。</p>\n<p><strong>版本库(Pepository)</strong> 和 <strong>远程仓库(Remote)</strong> 是什么之前在讲解git时提到过，它就是一个存放历史版本代码的地方，只不过一个在本地一个在远程的其他的地方。</p>\n<p>那么现在我们明晰了一些最基本的词语。我们就可以开始真正的讲解一下这张流程图。在使用git进行版本控制时。我们起码要有一个git仓库，所以我们首先要创建一个git的本地仓库。然后当我们更改我们的工程时，想保存当前版本代码，我们首先就要将工作区内更改的文件，上传到暂存区，然后将暂存区的代码提交到本地仓库，然后如果我们有远程仓库我们可以将本地仓库的代码上传到远程仓库，并合并到远程仓库。我们也可以克隆远程仓库到本地，然后在本地开发这个工程。</p>\n<h5 id=\"本地的版本控制\">本地的版本控制</h5>\n<p>我们知道我们版本控制可以在本地进行也可以在本地加远程同时进行。我们现在先不讲解本地加远程的版本控制方案，我们先讲解本地版本控制的方法。</p>\n<h6 id=\"创建本地仓库-git-init\">创建本地仓库 <strong>git init</strong></h6>\n<p>上文我们提到想要进行版本控制首先起码要有一个本地的仓库。那么我们该怎样创建本地仓库呢？</p>\n<ol type=\"1\">\n<li>首先我们要明确一点我们要在工作区下创建本地仓库，那么我们要对工程进行版本控制，我们首先要找到该工程的工作区，即该工程的工程文件夹的根目录，比如我要开发一个叫做guard的工程，guard目录内存放着该工程的所有文件。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-11-10-59.png\" alt=\"寻找工作区\"></li>\n<li>进入工作区，双击进入工作区<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-11-14-02.png\" alt=\"进入工作区\"></li>\n<li>在工作区根目录，右键文件管理器的空白部分，打开Git Bash Here<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-11-15-52.png\" alt=\"打开 Git Bash Here\">，打开后我们输入pwd我们发现当前绝对路径，与文件管理器中所处的绝对路径相同<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-11-19-44.png\" alt=\"Git Bash Here\">。这也说明一点，我们在文件管理器通过右键打开Git Bash Here我们会自动跳转到当前路径。</li>\n<li>创建git仓库，我们在Git Bash中输入 <strong>git init</strong>，以此来创建本地仓库，或初始化本地仓库。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-11-25-27.png\" alt=\"创建本地仓库\">，这时候我们就成功的在工作区中创建了本地仓库。然后我们使用文件管理器进入仓库目录。并且设置让文件管理器显示隐藏文件。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-16-19.png\" alt=\"隐藏目录\">，出现了一个名为.git的隐藏目录，这个目录是通过git创建仓库创建出来的，它是整个仓库中最重要的文件，它里面存放这个各个版本的代码。</li>\n</ol>\n<h6 id=\"查看当前工作区文件状态-git-status\">查看当前工作区文件状态 <strong>git status</strong></h6>\n<p>由于后面我们要讲解git本地整体的版本控制操作流程，为了更深刻的讲解一下内容我先讲解一下一个命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status <span class=\"comment\"># 查看工作区的状态</span></span><br></pre></td></tr></table></figure>\n<p>这个命令是用来读取当前工作区状态的指令，我们在刚刚创建的仓库中输入git status，它就会它会输出工作区的文件状态。状态有如下几种情况。</p>\n<ol type=\"1\">\n<li>文件未跟踪 <strong>untracked files</strong> 如下图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-13-09-13.png\" alt=\"未跟踪\"></li>\n<li>工作区与本地仓库相比存在有文件内容更改的文件<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-13-21-32.png\" alt=\"存在内容更改的文件\"></li>\n<li>文件添加到暂存区<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-13-11-16.png\" alt=\"添加到暂存区\"></li>\n<li>无更改文件，工作区与本地仓库数据相同。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-13-19-23.png\" alt=\"无更改文件\"></li>\n</ol>\n<h6 id=\"将更改的文件添加到暂存区-git-add-文件路径\">将更改的文件添加到暂存区 <strong>git add 文件路径</strong></h6>\n<p>现在我们拥有一个本地仓库了。现在我们已经拥有了对工程进行版本控制的最根本条件了。现在我们就开始进行一次完整的版本控制。回忆我们在讲解<a href=\"#git的运行机制\">git的运行机制</a>的那张图纸。我们要进行版本控制，我们要保存我们当前版本的代码，我们应该先将本地仓库对应的工作区内的更改的文件添加到暂存区内。那么我们该如何实现这个过程？</p>\n<p>在Git Bash Here中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 要添加到暂存区的文件的路径</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如下图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-12-28-01.png\" alt=\"添加到暂存区\">，这样我们就将我们的main.c和test.c分别添加到暂存区中。</p>\n<p>为了提高效率我们也可以，直接用一个命令，直接添加该工作目录下的全部被更改的文件，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add * <span class=\"comment\"># *表示该目录下的全部文件</span></span><br></pre></td></tr></table></figure>\n<p>如下图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-12-54-23.png\" alt=\"添加当前目录下所有改变的文件到暂存区内\">这样我们就一次将全部更改文件一步全部添加到暂存区中。</p>\n<h6 id=\"从暂存区中提交到本地仓库-git-commit--m-提交记录说明\">从暂存区中提交到本地仓库 <strong>git commit -m \"提交记录说明\"</strong></h6>\n<p>我们现在已经将所有相对与本地当前仓库最新版本的代码文件上传到本地暂存区了，那么下一步，就是提交代码了。我们在Git Bash Here中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;提交记录说明&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这样我们就将本地暂存区的文件上传到本地仓库中了。</p>\n<h6 id=\"添加git用户名\">添加git用户名</h6>\n<p>但是这时我们输入这条指令我们发现我们的命令行报错了，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-13-37-41.png\" alt=\"报错\">，这时，你可能感觉很奇怪啊，为什么会出现这个问题呢？什么叫<strong>Author identity unknown</strong>这是啥意思，原因是啥呢？因为你没有在git中添加你的账户。现在很多讲解git课程中它会都会在安装完git之后让我们在命令行中输入两个指令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加git账户的用户名</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&#x27;用户名&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#添加git账户的邮箱</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&#x27;邮箱&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>里的用户名和邮箱建议用你的github邮箱，如果你不用你的github邮箱，在拟提交工程时，你的github就不会认为是你自己的提交的</p>\n</blockquote>\n<p>这两个指令是用于添加git的账户的。我每次看它们的教程的时候我都会好奇添加它，到底有什么用？现在各位明白了么？你不添加账户，就无法提交代码到本地仓库，就这么简单。</p>\n<p>git是可以用于多人开发同一个超级大的工程的，比如linux内核。我们如果共同开发一个工程，我们会把整个工程集中放到莫一个特定的远程仓库，如github或者自己团队搭建的个人服务器。我们多人开发同一个工程，会引发一个问题，就是不知道到底是谁提交的。试想，我们想管理一个团队开发一个大型的工程，多人同时向同一个地方提交代码，那么这个地方的文件会不会变得很混乱吗？为了让他变得整体变得更加清晰整洁，我们需要知道到底是谁提交了这个代码，那么我们想提交代码之前就一定要登陆我们账户，提交时顺便提交我们的账户信息。</p>\n<p>我们在Git Bash Here中输入了这两条指令，如图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-15-58-21.png\" alt=\"添加账户\">，然后我们提交我们的代码，如果提交成功会输出如下，如图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-15-59-43.png\" alt=\"提交\">这也就证明了我们提交成功。</p>\n<h6 id=\"查看历史提交-git-log\">查看历史提交 <strong>git log</strong></h6>\n<p>我们提交了我们的代码，我想看一下我的提交的历史记录我该如何做，在命令行中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\"># 查看历史记录</span></span><br></pre></td></tr></table></figure>\n<p>我们的命令行中会输出以下内容<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-16-02-58.png\" alt=\"git log 输出\">由于我提交了两次代码，所以它会有两次的数据显示，每一次都有显示提交者数据，提交时间，以及提交的说明(commit)。</p>\n<p>这个有什么用呢，我们能更加清晰的知道我们到底作了什么。我从编写哨兵代码开始我哨兵工程有90多次提交记录，当我每次查看我的提交记录时我会清晰的记得我的开发过程。它让我的开发思路更加清晰更加明了。</p>\n<h6 id=\"git的其他命令\">git的其他命令</h6>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除暂存区内的文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r 路径 --cached </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除git账户</span></span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> user.name <span class=\"comment\">#删除用户名</span></span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> user.email <span class=\"comment\">#删除用户邮箱</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#本地链接远程仓库</span></span><br><span class=\"line\">git remote add origin 仓库的https的地址</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"本地版本控制的总结\">本地版本控制的总结</h5>\n<p>本地的版本控制就讲到这里，本地版本控制就几个核心的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#初始化git仓库</span></span><br><span class=\"line\">git init</span><br><span class=\"line\"><span class=\"comment\">#添加文件到暂存区</span></span><br><span class=\"line\">git add 文件路径</span><br><span class=\"line\"><span class=\"comment\">#将暂存区的代码提交到本地仓库</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;提交记录说明&quot;</span></span><br></pre></td></tr></table></figure>\n<p>他们都有固有的格式，都是从git开始然后加操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git 操作</span><br></pre></td></tr></table></figure>\n<p>我不会把本地的版本控制讲解的太过复杂，我只会浅浅的讲一点最最基础的命令，git最核心的最精髓的<strong>分支管理</strong>是没有一点涉猎。我们未来开发项目的核心版本控制方法我更多的认为是，本地仓库与github的远程仓库进行配合，进行我们的版本控制方案。我感觉这样更加的符合一个初学入门者的需求。虽然我的能力上是不行的，但是我是可以尝试给你们讲解git的全部内容，但是我个人感觉对一个入门者来讲太累了。一个简单的开始，一个低门槛的开始，对于一个初学者是一个快乐的过程，是一个能坚持下去的过程。我认为我们应该先将这种比较基础的内容想通了，用熟了，你再去学习更加高级的方法，这样会更加快乐的学习。</p>\n<hr>\n<h2 id=\"使用github\">使用github</h2>\n<p>本地仓库的基本内容已经基本讲了一下。我们现在可以开始讲一下本地加远程的共同版本控制。在讲解如何进行本地加远程的共同版本控制之前，我要稍微说一下github。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-16-57-04.png\" alt=\"github\"></p>\n<h3 id=\"github到底是个啥\">github到底是个啥</h3>\n<p>我们曾经问过我的学弟，github是啥？它和我说它一个搞开源的网站。这个理解没问题，但是我感觉这么理解感觉对一个初学者有点高大尚了。它确实是用于开源的，但是我个人认为，作为一个开发者。github应该就是一个网盘，就是我们之前提到的存放代码的网盘，当然它不仅能存放代码，其他的什么东西都是可以存储的。</p>\n<h3 id=\"第一次进入github\">第一次进入github</h3>\n<p>现在我们明确了github到底是个啥，那么现在我们开始真正的进入<a href=\"https://github.com/\">github</a>，我们进入github。我们第一次进入会是如下这个界面<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-17-02-23.png\" alt=\"githhub的开始界面\">那你成功的进入github了，这样的话你可以选择直接过下一段的内容，直接到<a href=\"#拥有一个github帐号\">拥有一个github帐号</a>.但你更多的可能是第二种情况<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-17-04-34.png\" alt=\"无法访问\">，根本无法访问， 如果你是这种情况请你继续阅读下面的内容。</p>\n<h4 id=\"进入github的方法-瓦特工具箱\">进入github的方法-瓦特工具箱</h4>\n<p>由于github是一个国外的网站，它的进入如果你没有一些特殊手段可能比较困难而且大部分是需要进行付费的，我就比较讨厌付费的东西，而且一名学习git的初学者，更是不想因为要学习一样东西而付费，为此我提出了一个解决方案，我们使用一款免费可以加速github的加速器——<strong>瓦特工具箱</strong>，这款软件可以实现我们对github的加速。使我们就这以正常使用github。(<em>如果你有一些特殊手段可以流畅的进入国外网站，请不要下载这个加速器，它可以会因为你的电脑同时存在两个加速软件可能会发生软件间的冲突，会让你的加速手段失效，如果你真下载了，不要让两个软件同时运行就一般是没有问题的</em>)</p>\n<ol type=\"1\">\n<li>下载安装瓦特工具箱\n<ol type=\"1\">\n<li>进入<a href=\"https://steampp.net/\">瓦特工具箱的官方网站</a></li>\n<li>在网址主页选择自己计算机系统对应的安装包<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-33-29.png\" alt=\"选择下载安装包\">点击下载</li>\n<li>点击后会弹出以下界面，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-40-21.png\" alt=\"弹出界面\">点击接受并下载。</li>\n<li>点击后会弹出以下界面。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-51-32.png\" alt=\"下载路径图\">建议采用蓝奏云网盘下载，它不会限速，而且支持在浏览器上下载，不用下载一点东西就要打开软件客户端，而且还限速。如果是windows用户还可以在微软商店上下载。，选择号下载方式，点击下载按钮。</li>\n<li>进入蓝奏云下载，输入密码<strong>1234</strong>，点击确认。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-55-23.png\" alt=\"输入密码\"></li>\n<li>选择x64（或者64位）安装包进行下载<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-59-31.png\" alt=\"下载安装包\"></li>\n<li>选择任意一个下载方式进行下载<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-01-18.png\" alt=\"选择下载方式\"></li>\n<li>找到安装包下载位置点击安装<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-03-19.png\" alt=\"安装\">。<em>安装位置视各自计算机情况而定，在你的计算机中不一点是我这个位置</em></li>\n<li>点击后计算机弹出如下界面，点击是。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-05-42.png\" alt=\"点击是\"></li>\n<li>点击后弹出安装界面，点击立刻安装或选择自定义安装，选择安装位置以后再进行软件的安装。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-09-57.png\" alt=\"安装\">，等待一段时间后软件安装完成。</li>\n</ol></li>\n<li>开始使用软件\n<ol type=\"1\">\n<li>打开软件的快捷方式，进入软件。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-14-24.png\" alt=\"加速github\">勾选Github，点击一键加速。</li>\n<li>第一次使用会弹出该界面，点击允许访问。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-16-06.png\" alt=\"使用\"></li>\n<li>这一刻我们就开始正式加速github了。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-17-21.png\" alt=\"正式加速\"></li>\n</ol></li>\n<li>测试，进入<a href=\"https://github.com/\">github</a>，如果出现该界面，则证明我们成功了<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-41-10.png\" alt=\"成功进入github\">。</li>\n</ol>\n<h4 id=\"拥有一个github帐号\">拥有一个github帐号</h4>\n<p>现在我们已经可以进入github了，我们想使用github我们首先要拥有一个github的帐号，如果您已经拥有请跳转到下一部分<a href=\"#github的基本使用方式\">github的基本使用方式</a></p>\n<p>我们该如果拥有一个github帐号呢，请按我如下方式注册它。</p>\n<ol type=\"1\">\n<li><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-46-35.png\" alt=\"开始注册github\">点击<strong>Sign up</strong>进入github注册页面。</li>\n<li>输入你的邮箱,然后点击continue<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-49-29.png\" alt=\"输入邮箱\"></li>\n<li>设置你的密码,然后点击continue<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-52-04.png\" alt=\"设置密码\"></li>\n<li>设置用户名，然后点击continue<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-53-19.png\" alt=\"设置用户名\"></li>\n<li>选择是否要接收产品邮件，我建议是输入n，不接收<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-57-36.png\" alt=\"是否接收邮件\"></li>\n<li>点击创建账户<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-58-19.png\" alt=\"创建账户\"></li>\n<li>然后它会向你的邮箱发送邮件，接收到邮件后，输入邮件的验证码。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-01-18.png\" alt=\"输入验证码\"></li>\n<li>进入该页面<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-02-11.png\" alt=\"选择\">，选择一些符合自己的选择。</li>\n<li>然后我们就进入了github的个人页面<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-03-23.png\" alt=\"进入github的个人页面\"></li>\n</ol>\n<h4 id=\"github的基本使用方式\">github的基本使用方式</h4>\n<p>我们现在已经拥有了一个github帐号。那么现在我们就可以进行正式的使用github。</p>\n<h5 id=\"怎样学习使用github\">怎样学习使用github</h5>\n<p>在正式使用github之前我们先要对github页面进行一点介绍。我们刚一进入github页面，我记得我当时的感觉是，惊喜且不安，惊喜是因为什么呢？我感觉我进了一个特别吊的地方。不安又是因为什么呢？是因为我第一次进到一个都是英文的地方。我个人英语水平很差。我当时使用过一段时间github以后感觉，什么都不认识，每次使用都要用一下页面翻译，后来我也感觉这玩意用不明白，所以有一段时间我用了一下<a href=\"https://gitee.com/\">码云</a>，就是国内的github。但是用了一段时间感觉还是github好，之后就一直用到今天。</p>\n<p>回忆一下，我一开始为啥不想用github，就是因为众多的英文。我执着于什么都要一次看懂，但是后来我发现并不是特别需要一次全搞懂。我们只要一开始先记住最主要的，然后最后最主要的用熟了，然后在往外拓展。那么现在我们回归正题，那么现在最主要的是什么？就是本地加远程仓库的版本控制，那么我们想学学会它，我们应该怎么做呢？我们从需求开始理解github的基本操作。</p>\n<h5 id=\"远程仓库进行版本控制的流程\">远程仓库进行版本控制的流程</h5>\n<p>回忆一下我们用github来做什么？做网盘，保存本地仓库的代码。或者准确的说，在github中创建远程仓库，克隆github远程仓库到本地计算机中，将其变为本地仓库，并继续进行开发，然后将本地仓库的代码上传到远程仓库，进行本地仓库加远程仓库的版本控制。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-37-26.png\" alt=\"流程\">。</p>\n<h5 id=\"创建远程仓库\">创建远程仓库</h5>\n<p>那么我们怎样在github上创建远程仓库呢？</p>\n<ol type=\"1\">\n<li>点击这个位置的图标<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-39-37.png\" alt=\"点击图标\"></li>\n<li>点击Your repositories(你的仓库)，打开仓库页面 <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-41-06.png\" alt=\"打开仓库页面\">。进入页面后，红框内的区域存放着我们创建的仓库<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-44-36.png\" alt=\"仓库界面\">。</li>\n<li>点击New新建仓库<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-50-35.png\" alt=\"新建仓库\">。</li>\n<li>输入创建仓库的名称，输入该仓库的描述，选择是否要开源，勾选添加README，点击绿色创建仓库数据。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-20-08-16.png\" alt=\"输入创建仓库数据\">，当出现了这个界面，我们已经在github上创建了一个远程仓库<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-02-25.png\" alt=\"远程仓库\"></li>\n</ol>\n<h5 id=\"克隆远程仓库的代码到本地计算机\">克隆远程仓库的代码到本地计算机</h5>\n<p>我们该如何将远程仓库的代码克隆到本地计算机呢？利用git的克隆命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将远程的git仓库克隆到本地，运行该命令的路径</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> 仓库的地址</span><br></pre></td></tr></table></figure>\n<p>那么我们该如何使用这个指令，如图我们点击Code，选择HTTPS，拷贝地址<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-20-32-43.png\" alt=\"拷贝地址\">，我们有了这个仓库HTTPS地址。我们首先在文件管理器中选择一个本地的路径去克隆这个仓库。然后右键打开Git Bash Here。输入git克隆指令去克隆这个仓库。</p>\n<p>你可能会遇到如下情况，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-20-42-43.png\" alt=\"SSL certificate problem\">,这是一个在window系统下使用git会发生的一个常见问题，这是因为SSL安全验证问题。那么我们如何解决它，我们只需要关闭验证就可。如何关闭呢？直接在命令行中输入如下指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify <span class=\"literal\">false</span> </span><br></pre></td></tr></table></figure>\n<p>这样我们就可以正常的克隆我们的仓库，如下图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-20-57-02.png\" alt=\"成功克隆仓库\"></p>\n<p>现在我们查看一下，当前目录的文件。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-20-59-04.png\" alt=\"当前目录下文件\">，我们发现当前目录下有一个与我们克隆仓库名字相同的文件夹。这个就是我们从github创建的名字为test的远程仓库克隆到本地的文件夹。我们进入这个文件夹，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-04-58.png\" alt=\"本地远程对比\">。我们发现本地仓库与远程仓库的文件内容相同。这也说明了我们这个文件是从远程克隆下来的。</p>\n<h5 id=\"经典的版本控制操作\">经典的版本控制操作</h5>\n<p>当我们将远程仓库克隆到本地，形成一个本地的代码仓库。我们把我们要开发的代码拷贝到这个从远程仓库克隆的本地仓库。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-22-52.png\" alt=\"拷贝\">然后我们就可以继续我们在本地仓库学到的经典操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加更改文件 我喜欢直接 git add * 一步添加所有文件</span></span><br><span class=\"line\">git add 文件路径</span><br><span class=\"line\"><span class=\"comment\">#将本地文件提交到本地仓库</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;提交版本的说明&quot;</span></span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-28-43.png\" alt><figcaption>经典操作</figcaption>\n</figure>\n<h5 id=\"将本地仓库的代码上传合并到远程的仓库-git-push\">将本地仓库的代码上传合并到远程的仓库 <strong>git push</strong></h5>\n<p>我们将代码提交到本地仓库，那么在本地加远程版本控制方式。我们下一步该如果处理，应该将本地仓库的代码提交到远程仓库。该如何实现。输入指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#提交到远程仓库</span></span><br><span class=\"line\">git push </span><br></pre></td></tr></table></figure>\n<p>这时候会输出如下情况。我们点击红框的选择<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-34-40.png\" alt=\"登陆\">，点击绿色的选项<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-36-07.png\" alt=\"连接github\">，在新页面输入密码点击确认comfirm<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-37-56.png\" alt=\"确认\">，成功上传代码<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-39-20.png\" alt=\"成功上传\"></p>\n<p>我们进入github远程仓库。查看和之前有什么区别。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-42-51.png\" alt=\"提交成功\">，我们发现我们的远程仓库多了一个本地仓库提交的文件。这时我们就成功向远程仓库提交文件。</p>\n<p>==如果你使用vscode，并在vscode上登陆你的github帐号，你就可以不用输密码提交==</p>\n<h5 id=\"回顾一下利用github进行版本控制的流程\">回顾一下利用github进行版本控制的流程</h5>\n<p>现在我们开始回顾一下我们使用github构建远程仓库进行版本控制的流程。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-22-00-00.png\" alt=\"流程\">我们首先在github上创建远程仓库。然后利用克隆到本地，本地开发工程，将更改的文件添加到本地暂存区，然后将本地暂存区的文件提交到本地仓库，最后上传到远程的github仓库。</p>\n<p>这个过程非常简单，并且高效，我认为你是可以使用这个流程进行舒适的版本控制的。</p>\n<h2 id=\"总结\">总结</h2>\n<p>回想一下我为什么会讲解git与github，之前实验室的代码开发一直都是采用满屏的.zip的版本控制方案，甚至有些人根本就从来不进行版本控制。对我们的实验室的整体开发产生了，不良的影响，并且不利于后期代码的迭代。使用git的最初的需求是让我们实验室下一代开发者，能在开发兵种代码时，能够使用，提高我们实验室的整体代码开发效率，以及更加利于后期代码的版本迭代。</p>\n<p>我个人建议，我们未来应该采用<a href=\"#回顾一下利用github进行版本控制的流程\">利用github创建仓库进行版本控制的方法</a>，使用这种方法，开发每个项目组的工程。我感觉这种方法相对来讲是比较简单。从我刚开始调哨兵到最后一版哨兵代码，我就一直都在使用这种方式来管理哨兵电控层的代码，哨兵代码在我的github上已拥有91次提交<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-09-10-20-48.png\" alt=\"哨兵\">，它清楚的记录了哨兵从一个连运动都困难，到今天一个能让我不留遗憾的作品。</p>\n<p>我希望以后我们战队的所有软件开发人员，明年在兵种代码开发时全线使用git进行版本控制，咱先不需要做到太过复杂，我们就运行那几个经典的命令，我们就可以进行高效的版本控制。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#克隆远程仓库</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> 远程仓库的地址</span><br><span class=\"line\"><span class=\"comment\"># 添加文件到暂存区</span></span><br><span class=\"line\">git add 文件的路径</span><br><span class=\"line\"><span class=\"comment\"># 查看是添加成功</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 提交到本地仓库</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;提交说明&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 提交到远程仓库</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h2 id=\"展望\">展望</h2>\n<p>在比赛的时候，我与其他战队交流，一些历史悠久的战队，他们都有自己的代码仓库。我也想做一个属于我们自己的代码仓库，所以我们在github上建立了一个github的组织。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-09-10-30-34.png\" alt=\"齐奇\">。虽然我到现在我也没有想好，这个组织该如何运行。但是我想建立它，我想播下一颗种子。我想让每一代齐奇人都进入这个组织，我们把我们的教学文案，战队开发资料以及整个工程代码全部放上去，以供战队内部交流提升，并且利于后人查阅学习和代码迭代。这只是我的初期想法，我的眼见是比较狭小，我无法看的太远，我不知道如何正确的构建一个战队级的仓库，我更不知道以我的努力是否能实现真正的建立一个齐奇的代码仓库，但是我认为你只要开始用github了，只要你接触它了，以你们的创造力就一定能构建出一个优秀的代码仓库。</p>\n<blockquote>\n<p>这就是开发者小白的git的入门指南的所有内容，笔者能力有限，肯定有很多谬误，有问题请指出。</p>\n<p>参考资料 <a href=\"https://blog.csdn.net/xihuanyuye/article/details/84933134\">一篇文章说清GIT的“分布式”是什么意思？</a> <a href=\"https://zhuanlan.zhihu.com/p/127778152\">git怎么做到版本控制的？</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>该文档归山东理工大学齐奇战队所有</strong> 本文作者为原落尘，邮箱为<a href=\"mailto:yuanluochen@foxmail.com\" class=\"email\">yuanluochen@foxmail.com</a>，在下能力有限，如有问题，请您指出。</p>\n</blockquote>\n<h2 id=\"引言\">引言</h2>\n<p>试想一下，我们作为一名小白在开发一个项目，比如开发哨兵电控层面的代码，作为一个有追求的开发者，我想提升我的代码的质量，让其变得更加工整，我决定对我的代码进行修改优化，我在原来的代码基础上对我的代码进行优化，优化了一段时间，我编译了我的整个代码工程，编译之后，我发现输出窗口上输出了上百个上百个error和几十个worning，这一刻我自闭了 <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-03-21-21-37.png\" alt=\"上百个error\"> 作为一名开发者我们绝对不容许一个error和一个worning的出现，于是我们开始修改我们的代码，想消除我的代码中的所有的worning和所有的error，经过一段时间的修改我们做到了0 worning和0 error这一个目标 <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-03-21-25-06.png\" alt=\"0 woring 和 0 error\"> 但是经历了这一波修改，我再次运行了我的代码，我突然间发现我的代码跑不起来了。 这一刻我看了看我的代码，我思索了一会儿，我到底改了那里了，怎么跑不起来了?我试图把我的代码改回去，试图让我的代码回归能跑的状态，但是改来改去，越改越寄。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-03-21-41-05.png\" alt=\"寄了\"></p>\n<p>这时作为一名相对来讲比较可以的开发者会如何避免这种问题呢？答案是 <strong>满屏的 '.zip'</strong> <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-03-21-59-34.png\" alt=\"满屏的zip\">就像这样，我们在开发工程的某个重要的节点上，比如我们要更改当前工程的一些数据处理部分的代码，我们会为了防止毁坏原本的稳定的代码，我们特意把当前工程文件另存到一个特定的目录中（或者说文件夹中），然后为了节约存储空间对另存的文件进行了压缩存储。当我们更改工程时，我们发现，这个工程经过了我们的修改，毁坏了原有的工程，那么我们就删除这个被毁坏的工程，从过去压缩的代码中拿出最近一版代码，然后在这个过去版本的代码的基础上进行开发。</p>\n<p>不得不说这是一个可行的方案，但是它也是存在一个巨大的问题的，就是保存一个版本占用一点空间，保存一个版本再占用一点空间。假如我们的工程未来发展到几个G大小的这种级别，我们在我们的有限的硬盘空间内存储几十个，上百个这样的历史版本代码的压缩包，我们的计算机该怎么办呢？ <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-03-23-08-31.png\" alt=\"硬盘空间不足\"></p>\n<p>那么我们提出了另外一种方案，我们说本地存储空间不足，那么我们用<strong>网盘</strong>，我们将本地代码文件存在网盘上，这样问题不就解决了吗。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-05-23-40-57.png\" alt=\"我真是一个小天才\">我们把本地的数据上传到网盘中，我们既能满足保存历史所有代码的需求，又能满足节省本地磁盘空间的需求，这不一举两得吗，完美，这个方案是永远的神。</p>\n<p>我感觉这个方案十分的完美，没有一点缺陷可言。回想一下，这是真的吗？当然不是。网盘方案有什么问题呢？当然是要联网啊，而且就算联网了，上传文件以及下载文件的速度也特别迷惑，感觉他们的速度和当前真实的网速有亿点点差异。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-06-00-13-32.png\" alt=\"亿点点差距\">我们如果采取网盘方案，假如说我们在一个网络较差或者根本没有网络的环境中，那么我们该如何上传当前代码或者下载我们过去版本的代码呢？答案是根本不行。</p>\n<p>我们对比一下以上两种方法，一种本地存储所有历史版本的文件，一种将所有历史版本的文件上传到网盘上。这个两种方法各有所长，各有所短。存在本地，占用空间；存在远程，需要联网。那么是否存在一种集合了两种方案的优点，并且还能解决上面所有问题的方案呢？<strong>有，就是git,一个分布式的版本控制方案。</strong><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-06-00-07-57.png\" alt=\"git\"></p>\n<hr>\n<h2 id=\"浅讲git\">浅讲git</h2>\n<h3 id=\"什么叫分布式版本控制\">什么叫分布式版本控制</h3>\n<p>那么git是什么？ <strong>git是一个分布式的版本控制工具</strong>。当我看到这句话以后，我有了一个疑问，什么叫分布式版本控制？</p>\n<h4 id=\"版本控制\">版本控制</h4>\n<p>首先我们要明确什么叫版本控制，版本控制就是我们之前所说的，在开发工程的某个重要的节点上，将工程代码另存到一个特定的目录（或者说文件夹）。在这里我们称这个特定的文件夹为版本仓库，这个仓库里存放着这个工程所有的历史版本代码。</p>\n<h4 id=\"分布式版本控制\">分布式版本控制</h4>\n<h5 id=\"集中式\">集中式</h5>\n<p>那么什么是分布式版本控制呢，之前我们提到的将所有历史版本代码从本地移到网盘中，这种方式我们称之为，<strong>集中式版本控制</strong>。就是本地无任何这个工程的历史版本代码，所有的历史版本代码全部都存放在网盘中或者远程仓库中。我们想要开发这个工程。如果本地没有代码，我们首先要从网盘中下载最新一版代码，然后在本地继续开发这个代码，开发完毕之后我们为了进行代码的版本控制，我们需要将代码通过网络上传到网盘上，这就叫集中式版本控制，存储代码只在网盘上，其他地方没有一点关于这个代码的历史数据。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-06-00-45-29.png\" alt=\"集中式版本控制\">这就引发了一个我们之前提到的问题，即网络问题。</p>\n<h5 id=\"分布式\">分布式</h5>\n<p>而分布式版本控制打破了集中式版本控制的控制方案，在分布式版本控制中，本地可以有一个存储代码所有历史数据的仓库，在遥远的网盘中也可以有一个存储代码所有历史数据的远程仓库，这两个仓库地位相同，都拥有着本工程的所有信息。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-06-00-47-55.png\" alt=\"分布式版本控制\">。</p>\n<p>这就是git的分布式版本控制，我们平时可以用git在本地建立一个仓库，我们把我们的代码用git放到这个仓库中，我们为了防止本地仓库出现问题。我们也在远程建了一个仓库。如图所示，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-09-16-06-28.png\" alt=\"分布式版本控制实例\">我们把本地仓库的数据通过网络上传到远程仓库，这里的远程仓库就是这篇文章之后要讲的github（可能你看到这个词有点陌生，可能完全理解不了，但是也没有问题，文章以后就会讲到）。我们在本地保存一份，为了防止本地出现意外在github这个远程仓库上也保存一份我们的工程。这样我们不仅可以在本地不受网络影响进行本地的版本控制，也可以利用远程仓库备份数据，保证了就算本地仓库出现问题，也还有远程仓库为我们提供备份的代码。而且我们如果想更换设备开发这个工程，比如一开始用开发计算机1进行开发，现在我们突然想用开发计算机2进行开发。以前我会会把代码用u盘或者其他途径把代码拷贝到计算机2，但是现在我们可以用git把远程仓库或者之前的那个计算机（即图中的开发计算1的本地仓库1）的代码通过网络或者一些远程数据传输方式直接传到我们当前的开发设备。</p>\n<p>这就是git的分布式版本控制，每一个地方都可以建立一个仓库，在不同的地方我们可以开发同一个工程，分布式管理，高效且自在。</p>\n<h5 id=\"git仓库存储历史代码的方式\">git仓库存储历史代码的方式</h5>\n<p>前面认真阅读的朋友在这时可能会提出一个问题，如果本地仓库包含着所有版本的历史代码，那么我们的计算机存储不会出现问题吗？在计算机本地存储如此多的历史版本代码，我们的磁盘不会被撑爆吗？答案是不会的，作为一名稍微可以一点的开发者都知道，保存历史版本的代码需要将原本的工程文件夹变成压缩包来减少其在计算机内存储空间的占用，那么你觉得作为一个专业的也是现在最广泛被使用的分布式版本控制工具git它会不知道吗，并且git不仅知道这件事情并且对数据压缩作了特定的优化，能将一个大的文件压缩成一个很小的文件。而且在存储内容上<strong>仅存储更改的文件，而不是存储整个工程文件夹</strong>，这样就可以<strong>从源头上减少了存储的内容</strong>，大大节省了git仓库的占用空间。</p>\n<hr>\n<h2 id=\"开始真正学习git\">开始真正学习git</h2>\n<p>前面咱们浅浅的讲解了一点git相关的内容，现在我们就可以正式的学习git。</p>\n<h3 id=\"安装git\">安装git</h3>\n<p>在学习git之前我们的计算机中首先要安装git，那么如何安装git呢？下面我们在windows环境下演示安装git的操作。*如果您已经安装完成，直接跳转到<a href=\"#使用git\">使用git</a></p>\n<ol type=\"1\">\n<li>首先下载git的安装包，进入<a href=\"https://git-scm.com/download/win\">git安装包下载网址</a>，进入网页后，点击红框内的64位windows版本的安装包进行下载<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-08-04.png\" alt=\"git下载\"> <em>可能你现在出现了一个下载不了的情况，这个正常，由于git的安装包存放在国外的网站上（详细一点说是github上），我们之前浅浅的说了一下github，说它是一个远程的仓库，或者一个网盘，git把代码以及安装包存放在github上，供我们这些开发者下载。国外的网站在国内可能不太容易访问。但是经常在玩一些国外的游戏作品的朋友，可能知道，玩一些国外的游戏我们会挂一个加速器，对某个游戏进行定点加速，让我登陆上这个游戏的服务器，可以与他人进行联机。那么我们在处理这种将安装包存放在外网上无法下载的情况，我们也是会采用加速器对github进行定点加速，以此链接上github，在github上下载git的安装包，那么如何实现对github进行定点加速请阅读<a href=\"#进入github的方法-瓦特工具箱\">进入github的方法</a></em></li>\n<li>寻找安装包的下载位置，点击安装。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-40-37.png\" alt=\"安装git\"></li>\n<li>弹出该界面时点击 <strong>是</strong><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-41-50.png\" alt=\"安装\"></li>\n<li>弹出git安装界面，点击next <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-42-44.png\" alt=\"点击next\"></li>\n<li>选择安装位置，点击next<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-44-51.png\" alt=\"选择安装位置\"></li>\n<li>弹出该界面，选择安装内容，如果您想添加桌面图标，则勾选<strong>Additional icons</strong>,其他默认，然后点击next，如果不想添加直接点击next<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-46-27.png\" alt=\"选择安装内容\"></li>\n<li>默认直接，点击next<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-02-16.png\" alt=\"选择开始菜单目录\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-04-09.png\" alt=\"使用git的默认编辑器\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-05-07.png\" alt=\"选择仓库初始化分支的名字\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-06-00.png\" alt=\"git的环境变量\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-06-59.png\" alt=\"选择ssh\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-07-38.png\" alt=\"选择https\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-12-22.png\" alt=\"配置\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-12-52.png\" alt=\"配置终端\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-13-22.png\" alt=\"选择默认的终端\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-14-01.png\" alt=\"选择帮助\"><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-14-48.png\" alt=\"配置\"></li>\n<li>点击安装 <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-11-15-52.png\" alt=\"安装\"></li>\n<li>验证是否安装完成，回到桌面，右键空白处，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-12-08-03.png\" alt=\"验证安装成功\">，出现上图黑框内的内容，则证明安装成功。</li>\n</ol>\n<p>linux下的安装git的方法,终端输入。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git -y <span class=\"comment\">#debian系下的发行版</span></span><br><span class=\"line\">sudo yum install git -y <span class=\"comment\">#redhat系下的发行版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用git\">使用git</h3>\n<p>==以下的讲解在windows环境下进行==</p>\n<p>当我们在我们的计算机上安装了git，我们鼠标右键点击桌面空白处，这时弹出的窗口内增加了两个选项。一个是 ==Git GUI Here== 另一个是 ==Git Bash Here==，我们点击Git Bash Here，然后会弹出一个窗口，如下图。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-14-33-31.png\" alt=\"git bash\">。</p>\n<p>我清楚的记得的我第一次看到这个界面时，我的感觉很是不解。为什么我会有这种感觉呢？因为我第一次打开一个软件，弹出的界面是黒黑的一片。我曾怀疑过，我是不是下错了。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-14-36-39.png\" alt=\"不解\">。</p>\n<p>但是并不是这么一回事儿。git本来是一个linux系统下的软件。早期的linux或者说所有早期的计算机操作系统都是没有现在的图像化界面的，无法通过鼠标的点击实现开启和关闭程序，实现在文件管理器中进入目录（或者叫文件夹），退出目录，拷贝，剪切文件。那么他们通过什么来实现鼠标进行的操作的呢？就是<strong>命令行</strong>。</p>\n<p>git最早是用于管理linux源代码的一款分布式版本控制工具，它的出现时间几乎和linux的出现时间等同。在那个时代的操作系统根本就没有图形化这种东西，每一个都是黑乎乎的命令行。早期的git就是运行在linux的命令行下的一款软件，上图那个黑黑的界面就是人们从linux系统下移植到windows系统下的linux的命令行软件。我们可以在这个命令行软件输入命令使用git。但是现在git也出现了图形化的版本，但是为了更加深刻的理解git的相关的知识，我们就在这个==Git Bash Here==中输命令的来了解和使用git。<em>可能有些人会有一点疑问，windows下没有类似的命令行么。答案是有的，它叫powershell，它是一款非常优秀的windows命令行</em></p>\n<h4 id=\"命令行的基本操作\">命令行的基本操作</h4>\n<p>回想一下过去，我们讲过版本控制的概念，以及一些简单的没有门槛的版本控制方法，例如，<strong>满屏的 \".zip\"</strong>,以及<strong>网盘</strong>。思考一下，版本控制有什么共同的特点吗？答案是，都是通过 <strong>操作文件</strong> 来实现版本控制。版本控制的对象是文件，不管我们保留的历史版本，还是现在要开发的版本，他们都是文件。</p>\n<p>在图形化界面中，或者说在现在的windows系统中以及喜欢图像化操作的使用linux的朋友们，我们如果用鼠标点击实现一个 <strong>满屏的 \".zip\"</strong> 版本控制，我们都需要怎样的文件操作呢？简单来讲包括，进入我们要进行版本控制的工程文件夹，拷贝工程文件或者剪切文件。那么既然我们要开始通过敲命令学习版本控制了，那么我们在命令行中我们如何实现，位置移动，拷贝、剪切文件以及刚才没有涉及的创建文件夹，创建文件，删除文件。那么现在我们开始讲解一下这些操作的实现</p>\n<h5 id=\"位置移动的相关命令\">位置移动的相关命令</h5>\n<h6 id=\"pwd-显示当前所处的绝对路径\">pwd 显示当前所处的绝对路径</h6>\n<p>我们想改变我们在计算机文件系统中的位置，我们首先要知道我们现在在那里。那么我们怎么知道呢？我们可以在Git Bash Here中输入 <strong>pwd</strong>。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-16-07-24.png\" alt=\"pwd输出\">，然后它就会输出当前绝对路径 <strong>/c/User/yuanluochen/Desktop</strong>。</p>\n<p>当你看到pwd的功能的时候你可能会好奇，“什么是路径”这个问题。那么什么是路径呢？路径是描述当前位置的一种方式。就是用来描述你到底在哪里的一方法。我们现在已经算是对路径有了一点点浅浅的了解，那么我们现在开始思考，什么是绝对路径呢？在理解绝对路径之前，我们先要明确如何在Linux系统中定位文件，在明确以上问题我们先要理解一个符号 <strong>/</strong>。这个符号是每一条绝对路径必有的内容，符号 <strong>/</strong> 在Linux系统中有两种含义，如果放在中间是路径分隔符，在Linux系统中是 <strong>/</strong>， 在Windows系统中为 <strong>\\</strong>。如果放在绝对路径的开头是根目录的意思。</p>\n<p>当我们知道了 <strong>/</strong> 的含义时，我们就要开始理解 <strong>绝对路径</strong> 。以一条绝对路径为例，<strong>/user/code/test.c</strong>在这条路径中除了首个 <strong>/</strong> 为 <strong>根目录</strong> 外，其余皆为 <strong>路径分隔符</strong> 。那么为什么通过这种方式来实现文件的定位？</p>\n<p>在现代，大多数操作系统组织文件的方式都是树形数据结构，及如下图所示<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-16-50-38.png\" alt=\"文件系统的结构\"></p>\n<p>这种组织文件的方式使从根目录到目标文件的路径具有了唯一性。因为若要定位test.c文件，test.c文件的上级目录只能为code目录，code目录的上级目录仅能为user目录，user目录的上级目录仅能为根目录。由此从根目录到test.c的路径具有唯一性，我们就把这条路径称为 <strong>绝对路径</strong>。</p>\n<p>有绝对路径，那么也必有 <strong>相对路径</strong> ，相对路径是什么，相对路径是从某一文件（不包括根目录）开始（默认状态下，从当前目录下开始），到目标文件的路径。此路径不具有唯一性。</p>\n<p>仍以定位test.c文件为例，利用相对路径来定位test.c文件。</p>\n<ol type=\"1\">\n<li>从code目录开始，定位test.c文件，其相对路径为 <strong>./test.c</strong>（ 在这里 <strong>.</strong> 为当前路径, <strong>/</strong> 为路径分隔符）</li>\n<li>从download目录开始，定位test.c文件，其相对路径为 <strong>../user/code/test.c</strong>( 在这里 <strong>..</strong> 为上级目录 )</li>\n</ol>\n<h6 id=\"ls-显示当前目录下所有文件\">ls 显示当前目录下所有文件</h6>\n<p>现在我们已经知道了如何查看当前路径，我们也知道了我们在那，那我们怎么知道我们怎么去哪呢？我们想知道我们要去那里，我们需要知道我们有那些地方是可以去的，我们在有图像化界面的文件管理器中我们会查看当前我们这个文件夹下到底有那些文件夹。然后我们选择一个我们需要的进入。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-16-59-59.png\" alt=\"查看\">，那么我们怎么在命令行中查看当前目录下所有文件夹呢？用<strong>ls</strong>。如图所示<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-17-02-20.png\" alt=\"ls\"></p>\n<h6 id=\"cd-切换路径\">cd 切换路径</h6>\n<p>我们现在已经通过<strong>ls</strong>知道了我们当前目录到底有什么选择，那么现在我们就应该开始移动了。那么我们应该怎样实现呢？使用cd命令，该命令语法如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span>  路径 <span class=\"comment\">#移动到该路径下</span></span><br></pre></td></tr></table></figure>\n<p>我们在命令行中输入cd然后加要进入的路径。该路径可以为相对路径也可以为绝对路径。</p>\n<h6 id=\"文件创建-目录创建-文件删除-目录删除-拷贝-剪切\">文件创建 目录创建 文件删除 目录删除 拷贝 剪切</h6>\n<p>以下皆为一些常用的文件操作命令，但是后面的讲解不使用，所以下面的指令我不会对其进行细致的讲解。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#文件创建</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> 文件名/文件路径</span><br><span class=\"line\"><span class=\"comment\">#目录创建</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> 目录名/目录路径</span><br><span class=\"line\"><span class=\"comment\">#文件删除</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> 文件名/文件路径</span><br><span class=\"line\"><span class=\"comment\">#目录删除</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -r 目录名/目录路径</span><br><span class=\"line\"><span class=\"comment\">#拷贝文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> 被拷贝文件路径 拷贝到的目标路径</span><br><span class=\"line\"><span class=\"comment\">#拷贝目录</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -r 被拷贝的目录路径 拷贝到的目标路径</span><br><span class=\"line\"><span class=\"comment\">#剪切文件</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> 被剪切的文件 剪切到的目标位置</span><br><span class=\"line\"><span class=\"comment\">#剪切目录</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> -r 被剪切的目录路径 剪切到的目标路径</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"其他命令\">其他命令</h6>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear <span class=\"comment\">#清空屏幕，或者说清空命令行的所有输出内容</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>==以上我浅浅的讲解了一点linux的指令，包括确定当前绝对路径的pwd，查看当前目录下有什么文件的ls，路径切换的cd，以及其他的文件操作命令，如果想真正的学习该部分内容，建议可以在b站着一些相关的视频认真学习一下linux。学习linux对你来讲是有益无害==</p>\n<h4 id=\"git的运行机制以及一些基本操作\">git的运行机制以及一些基本操作</h4>\n<p>讲了这么多前置知识，你可能已经看腻了。现在我们开始真正的讲一下git版本控制内在运行的机制，以及一些版本控制的基本操作命令。</p>\n<h5 id=\"git的运行机制\">git的运行机制</h5>\n<p><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-00-02-13.png\" alt=\"git的存储流程\">当你看到这张图的时候。它有很多陌生的词语，像工作区、暂存区、版本库以及远程仓库。对于一个初学者来讲可能有一点感觉难以理解，那为了帮助理解，我会一一讲解这些词语。</p>\n<p>那么什么是 <strong>工作区(workspace)</strong> 呢？工作区就是存放我们整个正在开发的工程的地方，它实际上就是一个目录，这个目录存放着我们所有需要进行版本控制的文件。</p>\n<p>那么什么又是<strong>暂存区</strong>呢？它是干什么的呢？我们要进行版本控制，我们之前提过<a href=\"#git仓库存储历史代码的方式\">git是如何存储历史版本的代码</a>的，git会检测当前工作区的文件与本地仓库的文件是否有差异，如果有差异，则找出有差异的文件，将有差异的文件进行特殊处理，降低其占用磁盘空间的大小，然后将经过特殊处理后的文夹保存在本地的仓库（或者版本库）中。那么在这个过程中暂存区起到了一个什么样的作用呢？那么我们现在开始思考一个问题，如果我们要完成一项工作，比如我们要运送货物。我们是喜欢一个一个的运输，还是喜欢将要运输的货物存放在一起后统一运输到目的地，如下图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-09-12-56-01.png\" alt=\"运输\">结果显而易见，我们喜欢一起运。而暂存区就体现了这一思想。工作区文件发生更改要提交到本地仓库，我们不会一个一个的提交，而是把所有要提交的文件都找出来集中放到暂存区中。然后统一提交到本地仓库。</p>\n<p><strong>版本库(Pepository)</strong> 和 <strong>远程仓库(Remote)</strong> 是什么之前在讲解git时提到过，它就是一个存放历史版本代码的地方，只不过一个在本地一个在远程的其他的地方。</p>\n<p>那么现在我们明晰了一些最基本的词语。我们就可以开始真正的讲解一下这张流程图。在使用git进行版本控制时。我们起码要有一个git仓库，所以我们首先要创建一个git的本地仓库。然后当我们更改我们的工程时，想保存当前版本代码，我们首先就要将工作区内更改的文件，上传到暂存区，然后将暂存区的代码提交到本地仓库，然后如果我们有远程仓库我们可以将本地仓库的代码上传到远程仓库，并合并到远程仓库。我们也可以克隆远程仓库到本地，然后在本地开发这个工程。</p>\n<h5 id=\"本地的版本控制\">本地的版本控制</h5>\n<p>我们知道我们版本控制可以在本地进行也可以在本地加远程同时进行。我们现在先不讲解本地加远程的版本控制方案，我们先讲解本地版本控制的方法。</p>\n<h6 id=\"创建本地仓库-git-init\">创建本地仓库 <strong>git init</strong></h6>\n<p>上文我们提到想要进行版本控制首先起码要有一个本地的仓库。那么我们该怎样创建本地仓库呢？</p>\n<ol type=\"1\">\n<li>首先我们要明确一点我们要在工作区下创建本地仓库，那么我们要对工程进行版本控制，我们首先要找到该工程的工作区，即该工程的工程文件夹的根目录，比如我要开发一个叫做guard的工程，guard目录内存放着该工程的所有文件。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-11-10-59.png\" alt=\"寻找工作区\"></li>\n<li>进入工作区，双击进入工作区<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-11-14-02.png\" alt=\"进入工作区\"></li>\n<li>在工作区根目录，右键文件管理器的空白部分，打开Git Bash Here<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-11-15-52.png\" alt=\"打开 Git Bash Here\">，打开后我们输入pwd我们发现当前绝对路径，与文件管理器中所处的绝对路径相同<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-11-19-44.png\" alt=\"Git Bash Here\">。这也说明一点，我们在文件管理器通过右键打开Git Bash Here我们会自动跳转到当前路径。</li>\n<li>创建git仓库，我们在Git Bash中输入 <strong>git init</strong>，以此来创建本地仓库，或初始化本地仓库。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-11-25-27.png\" alt=\"创建本地仓库\">，这时候我们就成功的在工作区中创建了本地仓库。然后我们使用文件管理器进入仓库目录。并且设置让文件管理器显示隐藏文件。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-16-19.png\" alt=\"隐藏目录\">，出现了一个名为.git的隐藏目录，这个目录是通过git创建仓库创建出来的，它是整个仓库中最重要的文件，它里面存放这个各个版本的代码。</li>\n</ol>\n<h6 id=\"查看当前工作区文件状态-git-status\">查看当前工作区文件状态 <strong>git status</strong></h6>\n<p>由于后面我们要讲解git本地整体的版本控制操作流程，为了更深刻的讲解一下内容我先讲解一下一个命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status <span class=\"comment\"># 查看工作区的状态</span></span><br></pre></td></tr></table></figure>\n<p>这个命令是用来读取当前工作区状态的指令，我们在刚刚创建的仓库中输入git status，它就会它会输出工作区的文件状态。状态有如下几种情况。</p>\n<ol type=\"1\">\n<li>文件未跟踪 <strong>untracked files</strong> 如下图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-13-09-13.png\" alt=\"未跟踪\"></li>\n<li>工作区与本地仓库相比存在有文件内容更改的文件<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-13-21-32.png\" alt=\"存在内容更改的文件\"></li>\n<li>文件添加到暂存区<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-13-11-16.png\" alt=\"添加到暂存区\"></li>\n<li>无更改文件，工作区与本地仓库数据相同。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-13-19-23.png\" alt=\"无更改文件\"></li>\n</ol>\n<h6 id=\"将更改的文件添加到暂存区-git-add-文件路径\">将更改的文件添加到暂存区 <strong>git add 文件路径</strong></h6>\n<p>现在我们拥有一个本地仓库了。现在我们已经拥有了对工程进行版本控制的最根本条件了。现在我们就开始进行一次完整的版本控制。回忆我们在讲解<a href=\"#git的运行机制\">git的运行机制</a>的那张图纸。我们要进行版本控制，我们要保存我们当前版本的代码，我们应该先将本地仓库对应的工作区内的更改的文件添加到暂存区内。那么我们该如何实现这个过程？</p>\n<p>在Git Bash Here中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 要添加到暂存区的文件的路径</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如下图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-12-28-01.png\" alt=\"添加到暂存区\">，这样我们就将我们的main.c和test.c分别添加到暂存区中。</p>\n<p>为了提高效率我们也可以，直接用一个命令，直接添加该工作目录下的全部被更改的文件，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add * <span class=\"comment\"># *表示该目录下的全部文件</span></span><br></pre></td></tr></table></figure>\n<p>如下图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-12-54-23.png\" alt=\"添加当前目录下所有改变的文件到暂存区内\">这样我们就一次将全部更改文件一步全部添加到暂存区中。</p>\n<h6 id=\"从暂存区中提交到本地仓库-git-commit--m-提交记录说明\">从暂存区中提交到本地仓库 <strong>git commit -m \"提交记录说明\"</strong></h6>\n<p>我们现在已经将所有相对与本地当前仓库最新版本的代码文件上传到本地暂存区了，那么下一步，就是提交代码了。我们在Git Bash Here中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;提交记录说明&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这样我们就将本地暂存区的文件上传到本地仓库中了。</p>\n<h6 id=\"添加git用户名\">添加git用户名</h6>\n<p>但是这时我们输入这条指令我们发现我们的命令行报错了，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-13-37-41.png\" alt=\"报错\">，这时，你可能感觉很奇怪啊，为什么会出现这个问题呢？什么叫<strong>Author identity unknown</strong>这是啥意思，原因是啥呢？因为你没有在git中添加你的账户。现在很多讲解git课程中它会都会在安装完git之后让我们在命令行中输入两个指令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加git账户的用户名</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&#x27;用户名&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#添加git账户的邮箱</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&#x27;邮箱&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>里的用户名和邮箱建议用你的github邮箱，如果你不用你的github邮箱，在拟提交工程时，你的github就不会认为是你自己的提交的</p>\n</blockquote>\n<p>这两个指令是用于添加git的账户的。我每次看它们的教程的时候我都会好奇添加它，到底有什么用？现在各位明白了么？你不添加账户，就无法提交代码到本地仓库，就这么简单。</p>\n<p>git是可以用于多人开发同一个超级大的工程的，比如linux内核。我们如果共同开发一个工程，我们会把整个工程集中放到莫一个特定的远程仓库，如github或者自己团队搭建的个人服务器。我们多人开发同一个工程，会引发一个问题，就是不知道到底是谁提交的。试想，我们想管理一个团队开发一个大型的工程，多人同时向同一个地方提交代码，那么这个地方的文件会不会变得很混乱吗？为了让他变得整体变得更加清晰整洁，我们需要知道到底是谁提交了这个代码，那么我们想提交代码之前就一定要登陆我们账户，提交时顺便提交我们的账户信息。</p>\n<p>我们在Git Bash Here中输入了这两条指令，如图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-15-58-21.png\" alt=\"添加账户\">，然后我们提交我们的代码，如果提交成功会输出如下，如图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-15-59-43.png\" alt=\"提交\">这也就证明了我们提交成功。</p>\n<h6 id=\"查看历史提交-git-log\">查看历史提交 <strong>git log</strong></h6>\n<p>我们提交了我们的代码，我想看一下我的提交的历史记录我该如何做，在命令行中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\"># 查看历史记录</span></span><br></pre></td></tr></table></figure>\n<p>我们的命令行中会输出以下内容<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-16-02-58.png\" alt=\"git log 输出\">由于我提交了两次代码，所以它会有两次的数据显示，每一次都有显示提交者数据，提交时间，以及提交的说明(commit)。</p>\n<p>这个有什么用呢，我们能更加清晰的知道我们到底作了什么。我从编写哨兵代码开始我哨兵工程有90多次提交记录，当我每次查看我的提交记录时我会清晰的记得我的开发过程。它让我的开发思路更加清晰更加明了。</p>\n<h6 id=\"git的其他命令\">git的其他命令</h6>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除暂存区内的文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r 路径 --cached </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除git账户</span></span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> user.name <span class=\"comment\">#删除用户名</span></span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> user.email <span class=\"comment\">#删除用户邮箱</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#本地链接远程仓库</span></span><br><span class=\"line\">git remote add origin 仓库的https的地址</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"本地版本控制的总结\">本地版本控制的总结</h5>\n<p>本地的版本控制就讲到这里，本地版本控制就几个核心的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#初始化git仓库</span></span><br><span class=\"line\">git init</span><br><span class=\"line\"><span class=\"comment\">#添加文件到暂存区</span></span><br><span class=\"line\">git add 文件路径</span><br><span class=\"line\"><span class=\"comment\">#将暂存区的代码提交到本地仓库</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;提交记录说明&quot;</span></span><br></pre></td></tr></table></figure>\n<p>他们都有固有的格式，都是从git开始然后加操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git 操作</span><br></pre></td></tr></table></figure>\n<p>我不会把本地的版本控制讲解的太过复杂，我只会浅浅的讲一点最最基础的命令，git最核心的最精髓的<strong>分支管理</strong>是没有一点涉猎。我们未来开发项目的核心版本控制方法我更多的认为是，本地仓库与github的远程仓库进行配合，进行我们的版本控制方案。我感觉这样更加的符合一个初学入门者的需求。虽然我的能力上是不行的，但是我是可以尝试给你们讲解git的全部内容，但是我个人感觉对一个入门者来讲太累了。一个简单的开始，一个低门槛的开始，对于一个初学者是一个快乐的过程，是一个能坚持下去的过程。我认为我们应该先将这种比较基础的内容想通了，用熟了，你再去学习更加高级的方法，这样会更加快乐的学习。</p>\n<hr>\n<h2 id=\"使用github\">使用github</h2>\n<p>本地仓库的基本内容已经基本讲了一下。我们现在可以开始讲一下本地加远程的共同版本控制。在讲解如何进行本地加远程的共同版本控制之前，我要稍微说一下github。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-16-57-04.png\" alt=\"github\"></p>\n<h3 id=\"github到底是个啥\">github到底是个啥</h3>\n<p>我们曾经问过我的学弟，github是啥？它和我说它一个搞开源的网站。这个理解没问题，但是我感觉这么理解感觉对一个初学者有点高大尚了。它确实是用于开源的，但是我个人认为，作为一个开发者。github应该就是一个网盘，就是我们之前提到的存放代码的网盘，当然它不仅能存放代码，其他的什么东西都是可以存储的。</p>\n<h3 id=\"第一次进入github\">第一次进入github</h3>\n<p>现在我们明确了github到底是个啥，那么现在我们开始真正的进入<a href=\"https://github.com/\">github</a>，我们进入github。我们第一次进入会是如下这个界面<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-17-02-23.png\" alt=\"githhub的开始界面\">那你成功的进入github了，这样的话你可以选择直接过下一段的内容，直接到<a href=\"#拥有一个github帐号\">拥有一个github帐号</a>.但你更多的可能是第二种情况<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-17-04-34.png\" alt=\"无法访问\">，根本无法访问， 如果你是这种情况请你继续阅读下面的内容。</p>\n<h4 id=\"进入github的方法-瓦特工具箱\">进入github的方法-瓦特工具箱</h4>\n<p>由于github是一个国外的网站，它的进入如果你没有一些特殊手段可能比较困难而且大部分是需要进行付费的，我就比较讨厌付费的东西，而且一名学习git的初学者，更是不想因为要学习一样东西而付费，为此我提出了一个解决方案，我们使用一款免费可以加速github的加速器——<strong>瓦特工具箱</strong>，这款软件可以实现我们对github的加速。使我们就这以正常使用github。(<em>如果你有一些特殊手段可以流畅的进入国外网站，请不要下载这个加速器，它可以会因为你的电脑同时存在两个加速软件可能会发生软件间的冲突，会让你的加速手段失效，如果你真下载了，不要让两个软件同时运行就一般是没有问题的</em>)</p>\n<ol type=\"1\">\n<li>下载安装瓦特工具箱\n<ol type=\"1\">\n<li>进入<a href=\"https://steampp.net/\">瓦特工具箱的官方网站</a></li>\n<li>在网址主页选择自己计算机系统对应的安装包<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-33-29.png\" alt=\"选择下载安装包\">点击下载</li>\n<li>点击后会弹出以下界面，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-40-21.png\" alt=\"弹出界面\">点击接受并下载。</li>\n<li>点击后会弹出以下界面。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-51-32.png\" alt=\"下载路径图\">建议采用蓝奏云网盘下载，它不会限速，而且支持在浏览器上下载，不用下载一点东西就要打开软件客户端，而且还限速。如果是windows用户还可以在微软商店上下载。，选择号下载方式，点击下载按钮。</li>\n<li>进入蓝奏云下载，输入密码<strong>1234</strong>，点击确认。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-55-23.png\" alt=\"输入密码\"></li>\n<li>选择x64（或者64位）安装包进行下载<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-09-59-31.png\" alt=\"下载安装包\"></li>\n<li>选择任意一个下载方式进行下载<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-01-18.png\" alt=\"选择下载方式\"></li>\n<li>找到安装包下载位置点击安装<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-03-19.png\" alt=\"安装\">。<em>安装位置视各自计算机情况而定，在你的计算机中不一点是我这个位置</em></li>\n<li>点击后计算机弹出如下界面，点击是。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-05-42.png\" alt=\"点击是\"></li>\n<li>点击后弹出安装界面，点击立刻安装或选择自定义安装，选择安装位置以后再进行软件的安装。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-09-57.png\" alt=\"安装\">，等待一段时间后软件安装完成。</li>\n</ol></li>\n<li>开始使用软件\n<ol type=\"1\">\n<li>打开软件的快捷方式，进入软件。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-14-24.png\" alt=\"加速github\">勾选Github，点击一键加速。</li>\n<li>第一次使用会弹出该界面，点击允许访问。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-16-06.png\" alt=\"使用\"></li>\n<li>这一刻我们就开始正式加速github了。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-07-10-17-21.png\" alt=\"正式加速\"></li>\n</ol></li>\n<li>测试，进入<a href=\"https://github.com/\">github</a>，如果出现该界面，则证明我们成功了<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-41-10.png\" alt=\"成功进入github\">。</li>\n</ol>\n<h4 id=\"拥有一个github帐号\">拥有一个github帐号</h4>\n<p>现在我们已经可以进入github了，我们想使用github我们首先要拥有一个github的帐号，如果您已经拥有请跳转到下一部分<a href=\"#github的基本使用方式\">github的基本使用方式</a></p>\n<p>我们该如果拥有一个github帐号呢，请按我如下方式注册它。</p>\n<ol type=\"1\">\n<li><img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-46-35.png\" alt=\"开始注册github\">点击<strong>Sign up</strong>进入github注册页面。</li>\n<li>输入你的邮箱,然后点击continue<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-49-29.png\" alt=\"输入邮箱\"></li>\n<li>设置你的密码,然后点击continue<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-52-04.png\" alt=\"设置密码\"></li>\n<li>设置用户名，然后点击continue<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-53-19.png\" alt=\"设置用户名\"></li>\n<li>选择是否要接收产品邮件，我建议是输入n，不接收<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-57-36.png\" alt=\"是否接收邮件\"></li>\n<li>点击创建账户<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-18-58-19.png\" alt=\"创建账户\"></li>\n<li>然后它会向你的邮箱发送邮件，接收到邮件后，输入邮件的验证码。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-01-18.png\" alt=\"输入验证码\"></li>\n<li>进入该页面<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-02-11.png\" alt=\"选择\">，选择一些符合自己的选择。</li>\n<li>然后我们就进入了github的个人页面<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-03-23.png\" alt=\"进入github的个人页面\"></li>\n</ol>\n<h4 id=\"github的基本使用方式\">github的基本使用方式</h4>\n<p>我们现在已经拥有了一个github帐号。那么现在我们就可以进行正式的使用github。</p>\n<h5 id=\"怎样学习使用github\">怎样学习使用github</h5>\n<p>在正式使用github之前我们先要对github页面进行一点介绍。我们刚一进入github页面，我记得我当时的感觉是，惊喜且不安，惊喜是因为什么呢？我感觉我进了一个特别吊的地方。不安又是因为什么呢？是因为我第一次进到一个都是英文的地方。我个人英语水平很差。我当时使用过一段时间github以后感觉，什么都不认识，每次使用都要用一下页面翻译，后来我也感觉这玩意用不明白，所以有一段时间我用了一下<a href=\"https://gitee.com/\">码云</a>，就是国内的github。但是用了一段时间感觉还是github好，之后就一直用到今天。</p>\n<p>回忆一下，我一开始为啥不想用github，就是因为众多的英文。我执着于什么都要一次看懂，但是后来我发现并不是特别需要一次全搞懂。我们只要一开始先记住最主要的，然后最后最主要的用熟了，然后在往外拓展。那么现在我们回归正题，那么现在最主要的是什么？就是本地加远程仓库的版本控制，那么我们想学学会它，我们应该怎么做呢？我们从需求开始理解github的基本操作。</p>\n<h5 id=\"远程仓库进行版本控制的流程\">远程仓库进行版本控制的流程</h5>\n<p>回忆一下我们用github来做什么？做网盘，保存本地仓库的代码。或者准确的说，在github中创建远程仓库，克隆github远程仓库到本地计算机中，将其变为本地仓库，并继续进行开发，然后将本地仓库的代码上传到远程仓库，进行本地仓库加远程仓库的版本控制。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-37-26.png\" alt=\"流程\">。</p>\n<h5 id=\"创建远程仓库\">创建远程仓库</h5>\n<p>那么我们怎样在github上创建远程仓库呢？</p>\n<ol type=\"1\">\n<li>点击这个位置的图标<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-39-37.png\" alt=\"点击图标\"></li>\n<li>点击Your repositories(你的仓库)，打开仓库页面 <img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-41-06.png\" alt=\"打开仓库页面\">。进入页面后，红框内的区域存放着我们创建的仓库<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-44-36.png\" alt=\"仓库界面\">。</li>\n<li>点击New新建仓库<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-19-50-35.png\" alt=\"新建仓库\">。</li>\n<li>输入创建仓库的名称，输入该仓库的描述，选择是否要开源，勾选添加README，点击绿色创建仓库数据。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-20-08-16.png\" alt=\"输入创建仓库数据\">，当出现了这个界面，我们已经在github上创建了一个远程仓库<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-02-25.png\" alt=\"远程仓库\"></li>\n</ol>\n<h5 id=\"克隆远程仓库的代码到本地计算机\">克隆远程仓库的代码到本地计算机</h5>\n<p>我们该如何将远程仓库的代码克隆到本地计算机呢？利用git的克隆命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将远程的git仓库克隆到本地，运行该命令的路径</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> 仓库的地址</span><br></pre></td></tr></table></figure>\n<p>那么我们该如何使用这个指令，如图我们点击Code，选择HTTPS，拷贝地址<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-20-32-43.png\" alt=\"拷贝地址\">，我们有了这个仓库HTTPS地址。我们首先在文件管理器中选择一个本地的路径去克隆这个仓库。然后右键打开Git Bash Here。输入git克隆指令去克隆这个仓库。</p>\n<p>你可能会遇到如下情况，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-20-42-43.png\" alt=\"SSL certificate problem\">,这是一个在window系统下使用git会发生的一个常见问题，这是因为SSL安全验证问题。那么我们如何解决它，我们只需要关闭验证就可。如何关闭呢？直接在命令行中输入如下指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify <span class=\"literal\">false</span> </span><br></pre></td></tr></table></figure>\n<p>这样我们就可以正常的克隆我们的仓库，如下图<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-20-57-02.png\" alt=\"成功克隆仓库\"></p>\n<p>现在我们查看一下，当前目录的文件。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-20-59-04.png\" alt=\"当前目录下文件\">，我们发现当前目录下有一个与我们克隆仓库名字相同的文件夹。这个就是我们从github创建的名字为test的远程仓库克隆到本地的文件夹。我们进入这个文件夹，<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-04-58.png\" alt=\"本地远程对比\">。我们发现本地仓库与远程仓库的文件内容相同。这也说明了我们这个文件是从远程克隆下来的。</p>\n<h5 id=\"经典的版本控制操作\">经典的版本控制操作</h5>\n<p>当我们将远程仓库克隆到本地，形成一个本地的代码仓库。我们把我们要开发的代码拷贝到这个从远程仓库克隆的本地仓库。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-22-52.png\" alt=\"拷贝\">然后我们就可以继续我们在本地仓库学到的经典操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加更改文件 我喜欢直接 git add * 一步添加所有文件</span></span><br><span class=\"line\">git add 文件路径</span><br><span class=\"line\"><span class=\"comment\">#将本地文件提交到本地仓库</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;提交版本的说明&quot;</span></span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-28-43.png\" alt><figcaption>经典操作</figcaption>\n</figure>\n<h5 id=\"将本地仓库的代码上传合并到远程的仓库-git-push\">将本地仓库的代码上传合并到远程的仓库 <strong>git push</strong></h5>\n<p>我们将代码提交到本地仓库，那么在本地加远程版本控制方式。我们下一步该如果处理，应该将本地仓库的代码提交到远程仓库。该如何实现。输入指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#提交到远程仓库</span></span><br><span class=\"line\">git push </span><br></pre></td></tr></table></figure>\n<p>这时候会输出如下情况。我们点击红框的选择<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-34-40.png\" alt=\"登陆\">，点击绿色的选项<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-36-07.png\" alt=\"连接github\">，在新页面输入密码点击确认comfirm<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-37-56.png\" alt=\"确认\">，成功上传代码<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-39-20.png\" alt=\"成功上传\"></p>\n<p>我们进入github远程仓库。查看和之前有什么区别。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-21-42-51.png\" alt=\"提交成功\">，我们发现我们的远程仓库多了一个本地仓库提交的文件。这时我们就成功向远程仓库提交文件。</p>\n<p>==如果你使用vscode，并在vscode上登陆你的github帐号，你就可以不用输密码提交==</p>\n<h5 id=\"回顾一下利用github进行版本控制的流程\">回顾一下利用github进行版本控制的流程</h5>\n<p>现在我们开始回顾一下我们使用github构建远程仓库进行版本控制的流程。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-08-22-00-00.png\" alt=\"流程\">我们首先在github上创建远程仓库。然后利用克隆到本地，本地开发工程，将更改的文件添加到本地暂存区，然后将本地暂存区的文件提交到本地仓库，最后上传到远程的github仓库。</p>\n<p>这个过程非常简单，并且高效，我认为你是可以使用这个流程进行舒适的版本控制的。</p>\n<h2 id=\"总结\">总结</h2>\n<p>回想一下我为什么会讲解git与github，之前实验室的代码开发一直都是采用满屏的.zip的版本控制方案，甚至有些人根本就从来不进行版本控制。对我们的实验室的整体开发产生了，不良的影响，并且不利于后期代码的迭代。使用git的最初的需求是让我们实验室下一代开发者，能在开发兵种代码时，能够使用，提高我们实验室的整体代码开发效率，以及更加利于后期代码的版本迭代。</p>\n<p>我个人建议，我们未来应该采用<a href=\"#回顾一下利用github进行版本控制的流程\">利用github创建仓库进行版本控制的方法</a>，使用这种方法，开发每个项目组的工程。我感觉这种方法相对来讲是比较简单。从我刚开始调哨兵到最后一版哨兵代码，我就一直都在使用这种方式来管理哨兵电控层的代码，哨兵代码在我的github上已拥有91次提交<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-09-10-20-48.png\" alt=\"哨兵\">，它清楚的记录了哨兵从一个连运动都困难，到今天一个能让我不留遗憾的作品。</p>\n<p>我希望以后我们战队的所有软件开发人员，明年在兵种代码开发时全线使用git进行版本控制，咱先不需要做到太过复杂，我们就运行那几个经典的命令，我们就可以进行高效的版本控制。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#克隆远程仓库</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> 远程仓库的地址</span><br><span class=\"line\"><span class=\"comment\"># 添加文件到暂存区</span></span><br><span class=\"line\">git add 文件的路径</span><br><span class=\"line\"><span class=\"comment\"># 查看是添加成功</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 提交到本地仓库</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;提交说明&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 提交到远程仓库</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h2 id=\"展望\">展望</h2>\n<p>在比赛的时候，我与其他战队交流，一些历史悠久的战队，他们都有自己的代码仓库。我也想做一个属于我们自己的代码仓库，所以我们在github上建立了一个github的组织。<img src=\"/posts/%E5%BC%80%E5%8F%91%E8%80%85%E5%B0%8F%E7%99%BD%E7%9A%84git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/index/2023-07-09-10-30-34.png\" alt=\"齐奇\">。虽然我到现在我也没有想好，这个组织该如何运行。但是我想建立它，我想播下一颗种子。我想让每一代齐奇人都进入这个组织，我们把我们的教学文案，战队开发资料以及整个工程代码全部放上去，以供战队内部交流提升，并且利于后人查阅学习和代码迭代。这只是我的初期想法，我的眼见是比较狭小，我无法看的太远，我不知道如何正确的构建一个战队级的仓库，我更不知道以我的努力是否能实现真正的建立一个齐奇的代码仓库，但是我认为你只要开始用github了，只要你接触它了，以你们的创造力就一定能构建出一个优秀的代码仓库。</p>\n<blockquote>\n<p>这就是开发者小白的git的入门指南的所有内容，笔者能力有限，肯定有很多谬误，有问题请指出。</p>\n<p>参考资料 <a href=\"https://blog.csdn.net/xihuanyuye/article/details/84933134\">一篇文章说清GIT的“分布式”是什么意思？</a> <a href=\"https://zhuanlan.zhihu.com/p/127778152\">git怎么做到版本控制的？</a></p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108154007.png","slug":"attachment/Pasted image 20230108154007.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108154022.png","slug":"attachment/Pasted image 20230108154022.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108154034.png","slug":"attachment/Pasted image 20230108154034.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108155020.png","slug":"attachment/Pasted image 20230108155020.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108161212.png","slug":"attachment/Pasted image 20230108161212.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108161823.png","slug":"attachment/Pasted image 20230108161823.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108170338.png","slug":"attachment/Pasted image 20230108170338.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108170817.png","slug":"attachment/Pasted image 20230108170817.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108171541.png","slug":"attachment/Pasted image 20230108171541.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108172311.png","slug":"attachment/Pasted image 20230108172311.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108173559.png","slug":"attachment/Pasted image 20230108173559.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108174304.png","slug":"attachment/Pasted image 20230108174304.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108174540.png","slug":"attachment/Pasted image 20230108174540.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108175411.png","slug":"attachment/Pasted image 20230108175411.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108175455.png","slug":"attachment/Pasted image 20230108175455.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108180141.png","slug":"attachment/Pasted image 20230108180141.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108184550.png","slug":"attachment/Pasted image 20230108184550.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108192936.png","slug":"attachment/Pasted image 20230108192936.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108200143.png","slug":"attachment/Pasted image 20230108200143.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230108200147.png","slug":"attachment/Pasted image 20230108200147.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109103344.png","slug":"attachment/Pasted image 20230109103344.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109104234.png","slug":"attachment/Pasted image 20230109104234.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109105000.png","slug":"attachment/Pasted image 20230109105000.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109134209.png","slug":"attachment/Pasted image 20230109134209.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109135140.png","slug":"attachment/Pasted image 20230109135140.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109140809.png","slug":"attachment/Pasted image 20230109140809.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109142504.png","slug":"attachment/Pasted image 20230109142504.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109142637.png","slug":"attachment/Pasted image 20230109142637.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109161325.png","slug":"attachment/Pasted image 20230109161325.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109161402.png","slug":"attachment/Pasted image 20230109161402.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109192900.png","slug":"attachment/Pasted image 20230109192900.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109205107.png","slug":"attachment/Pasted image 20230109205107.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109205237.png","slug":"attachment/Pasted image 20230109205237.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109221302.png","slug":"attachment/Pasted image 20230109221302.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109222504.png","slug":"attachment/Pasted image 20230109222504.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109222813.png","slug":"attachment/Pasted image 20230109222813.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109224829.png","slug":"attachment/Pasted image 20230109224829.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109225734.png","slug":"attachment/Pasted image 20230109225734.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109225958.png","slug":"attachment/Pasted image 20230109225958.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109232734.png","slug":"attachment/Pasted image 20230109232734.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109232852.png","slug":"attachment/Pasted image 20230109232852.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109234457.png","slug":"attachment/Pasted image 20230109234457.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109234602.png","slug":"attachment/Pasted image 20230109234602.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230109234638.png","slug":"attachment/Pasted image 20230109234638.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110000421.png","slug":"attachment/Pasted image 20230110000421.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110000834.png","slug":"attachment/Pasted image 20230110000834.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110003415.png","slug":"attachment/Pasted image 20230110003415.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110011546.png","slug":"attachment/Pasted image 20230110011546.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110011600.png","slug":"attachment/Pasted image 20230110011600.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110012117.png","slug":"attachment/Pasted image 20230110012117.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110012215.png","slug":"attachment/Pasted image 20230110012215.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110012240.png","slug":"attachment/Pasted image 20230110012240.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110015019.png","slug":"attachment/Pasted image 20230110015019.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110022858.png","slug":"attachment/Pasted image 20230110022858.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110023050.png","slug":"attachment/Pasted image 20230110023050.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230110024028.png","slug":"attachment/Pasted image 20230110024028.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111110934.png","slug":"attachment/Pasted image 20230111110934.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111111436.png","slug":"attachment/Pasted image 20230111111436.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111111906.png","slug":"attachment/Pasted image 20230111111906.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111113630.png","slug":"attachment/Pasted image 20230111113630.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111113730.png","slug":"attachment/Pasted image 20230111113730.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111114554.png","slug":"attachment/Pasted image 20230111114554.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111115708.png","slug":"attachment/Pasted image 20230111115708.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111115921.png","slug":"attachment/Pasted image 20230111115921.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111130838.png","slug":"attachment/Pasted image 20230111130838.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111131147.png","slug":"attachment/Pasted image 20230111131147.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111141014.png","slug":"attachment/Pasted image 20230111141014.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111141445.png","slug":"attachment/Pasted image 20230111141445.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111143542.png","slug":"attachment/Pasted image 20230111143542.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111143846.png","slug":"attachment/Pasted image 20230111143846.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111145727.png","slug":"attachment/Pasted image 20230111145727.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111152733.png","slug":"attachment/Pasted image 20230111152733.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111153322.png","slug":"attachment/Pasted image 20230111153322.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111154510.png","slug":"attachment/Pasted image 20230111154510.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111154603.png","slug":"attachment/Pasted image 20230111154603.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230111160717.png","slug":"attachment/Pasted image 20230111160717.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112103135.png","slug":"attachment/Pasted image 20230112103135.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112103823.png","slug":"attachment/Pasted image 20230112103823.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112104831.png","slug":"attachment/Pasted image 20230112104831.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112110039.png","slug":"attachment/Pasted image 20230112110039.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112110127.png","slug":"attachment/Pasted image 20230112110127.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112110652.png","slug":"attachment/Pasted image 20230112110652.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/Pasted image 20230112121821.png","slug":"attachment/Pasted image 20230112121821.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/kalman-filter-的个人理解/attachment/ll.png","slug":"attachment/ll.png","post":"clladvehf000357i0ge54g051","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-03-21-21-37.png","slug":"2023-07-03-21-21-37.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-03-21-25-06.png","slug":"2023-07-03-21-25-06.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-03-21-41-05.png","slug":"2023-07-03-21-41-05.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-03-21-59-34.png","slug":"2023-07-03-21-59-34.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-03-23-08-31.png","slug":"2023-07-03-23-08-31.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-05-10-58-59.png","slug":"2023-07-05-10-58-59.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-05-11-19-44.png","slug":"2023-07-05-11-19-44.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-05-11-20-44.png","slug":"2023-07-05-11-20-44.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-05-23-40-57.png","slug":"2023-07-05-23-40-57.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-00-07-57.png","slug":"2023-07-06-00-07-57.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-00-13-32.png","slug":"2023-07-06-00-13-32.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-00-45-29.png","slug":"2023-07-06-00-45-29.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-00-47-55.png","slug":"2023-07-06-00-47-55.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-19-51-42.png","slug":"2023-07-06-19-51-42.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-19-53-00.png","slug":"2023-07-06-19-53-00.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-19-53-22.png","slug":"2023-07-06-19-53-22.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-06-19-57-04.png","slug":"2023-07-06-19-57-04.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-04-03.png","slug":"2023-07-07-09-04-03.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-08-04.png","slug":"2023-07-07-09-08-04.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-30-10.png","slug":"2023-07-07-09-30-10.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-33-29.png","slug":"2023-07-07-09-33-29.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-40-21.png","slug":"2023-07-07-09-40-21.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-45-07.png","slug":"2023-07-07-09-45-07.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-51-32.png","slug":"2023-07-07-09-51-32.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-55-23.png","slug":"2023-07-07-09-55-23.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-09-59-31.png","slug":"2023-07-07-09-59-31.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-01-18.png","slug":"2023-07-07-10-01-18.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-03-19.png","slug":"2023-07-07-10-03-19.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-05-42.png","slug":"2023-07-07-10-05-42.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-09-57.png","slug":"2023-07-07-10-09-57.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-14-24.png","slug":"2023-07-07-10-14-24.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-16-06.png","slug":"2023-07-07-10-16-06.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-17-21.png","slug":"2023-07-07-10-17-21.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-40-37.png","slug":"2023-07-07-10-40-37.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-41-50.png","slug":"2023-07-07-10-41-50.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-42-44.png","slug":"2023-07-07-10-42-44.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-44-51.png","slug":"2023-07-07-10-44-51.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-10-46-27.png","slug":"2023-07-07-10-46-27.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-02-16.png","slug":"2023-07-07-11-02-16.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-04-09.png","slug":"2023-07-07-11-04-09.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-05-07.png","slug":"2023-07-07-11-05-07.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-06-00.png","slug":"2023-07-07-11-06-00.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-06-59.png","slug":"2023-07-07-11-06-59.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-07-38.png","slug":"2023-07-07-11-07-38.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-12-22.png","slug":"2023-07-07-11-12-22.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-12-52.png","slug":"2023-07-07-11-12-52.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-13-22.png","slug":"2023-07-07-11-13-22.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-14-01.png","slug":"2023-07-07-11-14-01.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-14-48.png","slug":"2023-07-07-11-14-48.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-15-27.png","slug":"2023-07-07-11-15-27.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-11-15-52.png","slug":"2023-07-07-11-15-52.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-12-08-03.png","slug":"2023-07-07-12-08-03.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-13-19-08.png","slug":"2023-07-07-13-19-08.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-13-44-44.png","slug":"2023-07-07-13-44-44.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-13-45-32.png","slug":"2023-07-07-13-45-32.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-14-09-36.png","slug":"2023-07-07-14-09-36.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-14-33-31.png","slug":"2023-07-07-14-33-31.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-14-36-39.png","slug":"2023-07-07-14-36-39.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-15-41-59.png","slug":"2023-07-07-15-41-59.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-15-46-24.png","slug":"2023-07-07-15-46-24.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-16-07-24.png","slug":"2023-07-07-16-07-24.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-16-50-38.png","slug":"2023-07-07-16-50-38.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-16-59-59.png","slug":"2023-07-07-16-59-59.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-07-17-02-20.png","slug":"2023-07-07-17-02-20.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-00-02-13.png","slug":"2023-07-08-00-02-13.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-08-15.png","slug":"2023-07-08-11-08-15.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-10-59.png","slug":"2023-07-08-11-10-59.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-14-02.png","slug":"2023-07-08-11-14-02.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-15-52.png","slug":"2023-07-08-11-15-52.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-19-44.png","slug":"2023-07-08-11-19-44.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-11-25-27.png","slug":"2023-07-08-11-25-27.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-12-24-29.png","slug":"2023-07-08-12-24-29.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-12-28-01.png","slug":"2023-07-08-12-28-01.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-12-41-05.png","slug":"2023-07-08-12-41-05.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-12-54-23.png","slug":"2023-07-08-12-54-23.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-03-46.png","slug":"2023-07-08-13-03-46.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-09-13.png","slug":"2023-07-08-13-09-13.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-11-16.png","slug":"2023-07-08-13-11-16.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-19-23.png","slug":"2023-07-08-13-19-23.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-21-32.png","slug":"2023-07-08-13-21-32.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-13-37-41.png","slug":"2023-07-08-13-37-41.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-15-58-21.png","slug":"2023-07-08-15-58-21.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-15-59-43.png","slug":"2023-07-08-15-59-43.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-16-02-58.png","slug":"2023-07-08-16-02-58.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-16-57-04.png","slug":"2023-07-08-16-57-04.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-17-02-23.png","slug":"2023-07-08-17-02-23.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-17-04-34.png","slug":"2023-07-08-17-04-34.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-41-10.png","slug":"2023-07-08-18-41-10.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-46-35.png","slug":"2023-07-08-18-46-35.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-48-57.png","slug":"2023-07-08-18-48-57.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-49-29.png","slug":"2023-07-08-18-49-29.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-52-04.png","slug":"2023-07-08-18-52-04.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-53-19.png","slug":"2023-07-08-18-53-19.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-57-36.png","slug":"2023-07-08-18-57-36.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-18-58-19.png","slug":"2023-07-08-18-58-19.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-01-18.png","slug":"2023-07-08-19-01-18.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-02-11.png","slug":"2023-07-08-19-02-11.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-03-23.png","slug":"2023-07-08-19-03-23.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-37-26.png","slug":"2023-07-08-19-37-26.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-39-37.png","slug":"2023-07-08-19-39-37.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-41-06.png","slug":"2023-07-08-19-41-06.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-44-36.png","slug":"2023-07-08-19-44-36.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-19-50-35.png","slug":"2023-07-08-19-50-35.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-08-16.png","slug":"2023-07-08-20-08-16.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-12-53.png","slug":"2023-07-08-20-12-53.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-32-43.png","slug":"2023-07-08-20-32-43.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-42-43.png","slug":"2023-07-08-20-42-43.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-57-02.png","slug":"2023-07-08-20-57-02.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-20-59-04.png","slug":"2023-07-08-20-59-04.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-02-25.png","slug":"2023-07-08-21-02-25.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-04-58.png","slug":"2023-07-08-21-04-58.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-10-46.png","slug":"2023-07-08-21-10-46.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-16-19.png","slug":"2023-07-08-21-16-19.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-22-52.png","slug":"2023-07-08-21-22-52.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-28-43.png","slug":"2023-07-08-21-28-43.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-34-40.png","slug":"2023-07-08-21-34-40.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-36-07.png","slug":"2023-07-08-21-36-07.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-37-56.png","slug":"2023-07-08-21-37-56.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-39-20.png","slug":"2023-07-08-21-39-20.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-41-08.png","slug":"2023-07-08-21-41-08.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-42-41.png","slug":"2023-07-08-21-42-41.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-42-51.png","slug":"2023-07-08-21-42-51.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-21-59-09.png","slug":"2023-07-08-21-59-09.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-08-22-00-00.png","slug":"2023-07-08-22-00-00.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-10-17-58.png","slug":"2023-07-09-10-17-58.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-10-20-48.png","slug":"2023-07-09-10-20-48.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-10-30-34.png","slug":"2023-07-09-10-30-34.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-12-11-23.png","slug":"2023-07-09-12-11-23.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-12-11-36.png","slug":"2023-07-09-12-11-36.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-12-12-03.png","slug":"2023-07-09-12-12-03.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-12-56-01.png","slug":"2023-07-09-12-56-01.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0},{"_id":"source/_posts/开发者小白的git入门指南/2023-07-09-16-06-28.png","slug":"2023-07-09-16-06-28.png","post":"clladvehj000957i02cdpfx6r","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clladvehf000357i0ge54g051","category_id":"clladvehg000457i0f25ydo5c","_id":"clladvehh000757i0cmkr7lj0"},{"post_id":"clladvehj000957i02cdpfx6r","category_id":"clladvehj000a57i0e80n1acq","_id":"clladvehk000d57i0eybig9le"}],"PostTag":[{"post_id":"clladvehf000357i0ge54g051","tag_id":"clladvehh000557i079o8gfnu","_id":"clladvehh000657i05z43htkw"},{"post_id":"clladvehj000957i02cdpfx6r","tag_id":"clladvehj000b57i01vtlbypu","_id":"clladvehk000c57i01ihp2mnz"}],"Tag":[{"name":"状态观测器","_id":"clladvehh000557i079o8gfnu"},{"name":"git与github","_id":"clladvehj000b57i01vtlbypu"}]}}